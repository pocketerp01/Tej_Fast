using System;
using System.Data;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls.WebParts;
using CrystalDecisions.Shared;
using CrystalDecisions.CrystalReports.Engine;
using System.Drawing.Printing;
using System.IO;
using System.Net.Mail;

using MessagingToolkit.QRCode.Codec;
using System.Linq;
//using Ionic.Zip;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.Drawing;

public partial class acct_reps : System.Web.UI.Page
{
    ReportDocument repDoc;
    string frm_mbr, frm_vty, frm_url, frm_qstr, frm_cocd, frm_uname, frm_myear, SQuery, frm_rptName, str, xprdRange, DateRange, frm_cDt1, fpath, frm_cDt2, col1, col2, col3, printBar = "N", frm_PageName, frm_ulvl, xprdRange1;
    string frm_FileName = "", frm_formID = "", frm_UserID, fromdt, todt, header_n, xprdrange1;
    string branch_Cd = "", xprd1 = "", firm, xhtml_tag, subj, party_cd, part_cd, cond1, pdfView = "", value1 = "", sdm_rep = "";
    double amt = 0, bal = 0;
    DataView distBarCode1 = new DataView();
    DataView distDt = new DataView();
    string data_found = "N";
    FileStream FilStr = null; FileStream FilStr1 = null; FileStream FilStr2 = null; FileStream FilStr3 = null; FileStream FilStr4 = null;
    BinaryReader BinRed = null; BinaryReader BinRed4 = null;
    fgenDB fgen = new fgenDB();
    DataTable ph_tbl, dtoutflow, dtinflow, dtindr, mrs, dt7, dt8, dt9, dt10, dt11, dtBarCode1, mainDt1;
    int cnt = 0, cntr = 0, d = 0, j = 0, k = 0, a = 0, n = 0; double db = 0, db1 = 0, db2 = 0, db3 = 0, db4 = 0, db5 = 0, db6 = 0, db7 = 0, db8 = 0, db9 = 0, db10 = 0, db11 = 0, db12 = 0, db13 = 0, db14 = 0, itot_stk = 0, to_cons = 0, itv = 0; int m = 0;
    string mq0 = "", mq1 = "", mq2 = "", mq3 = "", cond = "", val = "", mq4 = "", mq5 = "", mq6 = "", mq7 = "", eff_Dt, m1, fpath4_irn = "";
    string mq8 = "", mq9 = "", mq10 = "", mq11 = "", mq12 = "", MV_CLIENT_GRP = "", einv_qrcode = "";
    string param = "", year = "";
    string mktggrp = "";
    string signedQRCode, signedInvoice, Irn, IrnQrCodeValue, invoiceBarcodeImage, IrnlastpagePrint, mhd;
    private DataSet DsImages = new DataSet();
    string reportActionCode = "";
    string bsschCond = "";

    protected void Page_Load(object sender, EventArgs e)
    { }
    protected void Page_Init(object sender, EventArgs e)
    {
        try
        {
            frm_url = HttpContext.Current.Request.Url.AbsoluteUri;
            frm_PageName = System.IO.Path.GetFileName(Request.Url.AbsoluteUri);
            No_Data_Found.Visible = false;
            if (frm_url.Contains("STR"))
            {
                if (Request.QueryString["STR"].Length > 0)
                {
                    frm_qstr = Request.QueryString["STR"].Trim().ToString().ToUpper();
                    if (frm_qstr.Contains("@"))
                    {
                        frm_formID = frm_qstr.Split('@')[1].ToString();
                        frm_qstr = frm_qstr.Split('@')[0].ToString();
                        fgenMV.Fn_Set_Mvar(frm_qstr, "U_FORMID", frm_formID);
                    }
                    frm_cocd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COCD");
                    frm_uname = fgenMV.Fn_Get_Mvar(frm_qstr, "U_UNAME");
                    frm_myear = fgenMV.Fn_Get_Mvar(frm_qstr, "U_YEAR");
                    frm_ulvl = fgenMV.Fn_Get_Mvar(frm_qstr, "U_ULEVEL");
                    frm_mbr = fgenMV.Fn_Get_Mvar(frm_qstr, "U_MBR");
                    frm_vty = fgenMV.Fn_Get_Mvar(frm_qstr, "U_VTY");
                    xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PRDRANGE");// CHANGE U_DATERANGE TO U_PRDRANGE AS U_DATERANGE IS TAKING FULL FINANCIAL YEAR DATE BY MADHVI 
                    frm_UserID = fgenMV.Fn_Get_Mvar(frm_qstr, "U_USERID");
                    MV_CLIENT_GRP = fgenMV.Fn_Get_Mvar(frm_qstr, "U_CLIENT_GRP");
                    frm_cDt1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Cdt1");
                    frm_cDt2 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Cdt2");

                    fromdt = fgenMV.Fn_Get_Mvar(frm_qstr, "U_MDT1");
                    todt = fgenMV.Fn_Get_Mvar(frm_qstr, "U_MDT2");
                    xprdRange1 = "between to_date('" + frm_cDt1 + "','dd/MM/yyyy') and to_Date('" + fromdt + "','dd/MM/yyyy')-1";
                    DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                    hfhcid.Value = fgenMV.Fn_Get_Mvar(frm_qstr, "REPID");
                    frm_formID = hfhcid.Value;
                    hfval.Value = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                    branch_Cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_BRANCH_CD");
                    pdfView = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PDFVIEW");
                    fgenMV.Fn_Set_Mvar(frm_qstr, "U_PDFVIEW", "-");
                }
                else Response.Redirect("~/login.aspx");
            }
            if (!Page.IsPostBack)
            {
                pdfView = "N";
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "USEND_MAIL") == "Y") tremail.Visible = true;
                else
                {
                    pdfView = "Y";
                    tremail.Visible = false;
                }

                printCrpt(hfhcid.Value);

                if (data_found == "N")
                {
                    No_Data_Found.Visible = true;
                    divReportViewer.Visible = false;
                }
                else
                {
                    divReportViewer.Visible = true;
                    CrystalReportViewer1.RefreshReport();
                    CrystalReportViewer1.Focus();
                }
            }
            else
            {
                try
                {
                    CrystalReportViewer1.ReportSource = GetReportDocument((DataSet)Session["data_set"], (string)Session["rptfile"]);
                }
                catch { }
            }
        }
        catch (Exception ex)
        {
            fgen.FILL_ERR(ex.Message);
        }
    }
    void printCrpt(string iconID)
    {
        DataTable dt, dt1, dt2, dt3, dt4, dt5, dt6, dtm, dtDummy;
        DataRow mdr, dr1;
        DataSet dsRep = new DataSet();
        string barCode = hfval.Value;
        string scode = barCode;
        int repCount = 1;
        string mhd = "-";
        frm_rptName = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT ACREF FROM TYPEGRP WHERE ID='X1' AND TYPE1='" + iconID.Replace("F", "") + "' ", "ACREF");
        data_found = "Y";
        string doc_GST = "";
        string chk_opt = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
        //Member GCC Country
        string brcon = "";
        string rep_titles = "";

        if (chk_opt == "Y")
        {
            doc_GST = "GCC";
        }

        string eff_Dtd = "";
        string m1 = "";
        if (fgen.getOption(frm_qstr, frm_cocd, "W0100", "OPT_ENABLE") == "Y")
            m1 = fgen.getOption(frm_qstr, frm_cocd, "W0161", "OPT_PARAM");
        else
            m1 = fgen.seek_iname(frm_qstr, frm_cocd, "select params from controls where id='R01' and enable_yn='Y' ", "params");

        if (m1.Length != 10 || frm_cocd == "MPAC")
        {
            m1 = fgen.seek_iname(frm_qstr, frm_cocd, "select params from controls where id='R01'", "params");
        }

        eff_Dtd = " a.vchdate>= to_date('" + m1.Trim() + "','dd/mm/yyyy') and a.vchdate<=to_Date('" + todt + "','dd/mm/yyyy')";

        SQuery = "create or replace view RecDataW_" + frm_mbr + " as (select branchcd,TRIM(ACODE) AS ACODE,TRIM(upper(INVNO)) AS INVNO,INVDATE,SUM(DRAMT) AS DRAMT,SUM(CRAMT) AS CRAMT,SUM(DRAMT)-SUM(cRAMT) AS NET,trim(Grp) as grp from (SELECT a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM VOUCHER a,famst b WHERE trim(a.acode)=trim(B.acode) and a.BRANCHCD='" + frm_mbr + "' AND " + eff_Dtd + "  and  SUBSTR(b.grp,1,2)IN('02','05','06','16') UNION ALL SELECT a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM RECEBAL a,famst b WHERE trim(a.acode)=trim(b.acode) and a.BRANCHCD='" + frm_mbr + "' and SUBSTR(b.grp,1,2)IN('02','05','06','16') ) c  GROUP BY branchcd,trim(Grp),TRIM(ACODE),TRIM(upper(INVNO)),INVDATE HAVING SUM(dRAMT)-SUM(CRAMT)<>0)";
        fgen.execute_cmd(frm_qstr, frm_cocd, SQuery);

        // SQuery = "create or replace view RecDataW_ALL as (select branchcd,TRIM(ACODE) AS ACODE,TRIM(upper(INVNO)) AS INVNO,INVDATE,SUM(DRAMT) AS DRAMT,SUM(CRAMT) AS CRAMT,SUM(DRAMT)-SUM(cRAMT) AS NET,trim(Grp) as grp from (SELECT '-' as branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM VOUCHER a,famst b WHERE trim(a.acode)=trim(B.acode) and a.BRANCHCD!='88' AND " + eff_Dtd + "  and  SUBSTR(b.grp,1,2)IN('02','05','06','16') UNION ALL SELECT '-' as branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM RECEBAL a,famst b WHERE trim(a.acode)=trim(b.acode) and a.BRANCHCD!='DD' and SUBSTR(b.grp,1,2)IN('02','05','06','16') ) c  GROUP BY branchcd,trim(Grp),TRIM(ACODE),TRIM(upper(INVNO)),INVDATE HAVING SUM(dRAMT)-SUM(CRAMT)<>0)";//OLD
        //as per vipin sir branchcd picked in view qry due to branchcode is '-' in above qry and data is not coming in report
        SQuery = "create or replace view RecDataW_ALL as (select branchcd,TRIM(ACODE) AS ACODE,TRIM(upper(INVNO)) AS INVNO,INVDATE,SUM(DRAMT) AS DRAMT,SUM(CRAMT) AS CRAMT,SUM(DRAMT)-SUM(cRAMT) AS NET,trim(Grp) as grp from (SELECT  a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM VOUCHER a,famst b WHERE trim(a.acode)=trim(B.acode) and a.BRANCHCD!='88' AND " + eff_Dtd + "  and  SUBSTR(b.grp,1,2)IN('02','05','06','16') UNION ALL SELECT  a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM RECEBAL a,famst b WHERE trim(a.acode)=trim(b.acode) and a.BRANCHCD!='DD' and SUBSTR(b.grp,1,2)IN('02','05','06','16') ) c  GROUP BY branchcd,trim(Grp),TRIM(ACODE),TRIM(upper(INVNO)),INVDATE HAVING SUM(dRAMT)-SUM(CRAMT)<>0)"; //to be recified by mg mam in union qry
        fgen.execute_cmd(frm_qstr, frm_cocd, SQuery);
        DataTable phm = new DataTable();

        mktggrp = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT SUBSTR(SMAN_IDEN,1,4) AS SMAN_ID FROM EVAS WHERE USERNAME='" + frm_uname + "'", "SMAN_ID");
        switch (iconID)
        {
            case "OVERALL_SUM":
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PRDRANGE");

                phm.Columns.Add(new DataColumn("Header_n", typeof(string)));
                phm.Columns.Add(new DataColumn("Fromdt", typeof(DateTime)));
                phm.Columns.Add(new DataColumn("Todt", typeof(DateTime)));

                phm.Columns.Add(new DataColumn("Block_Head", typeof(string)));
                phm.Columns.Add(new DataColumn("Grp_Head", typeof(string)));
                phm.Columns.Add(new DataColumn("Grp_Detail", typeof(string)));
                phm.Columns.Add(new DataColumn("Num_forday", typeof(double)));
                phm.Columns.Add(new DataColumn("Num_formth", typeof(double)));

                header_n = "Overall SnapShot of the Company ";

                // Sales Data
                //---------------------------------------------------
                SQuery = "select b.name as Plant_Ref,c.Name as Type_ref,a.branchcd,a.type,sum(a.for_Day) as for_Day,sum(a.for_mth) as for_mth from (Select branchcd,type,amt_sale as for_Day,0 as for_mth from sale where branchcd!='DD' and type like '4%' and to_char(vchdate,'yyyymmdd')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymmdd') union all Select branchcd,type,0 as for_Day,amt_Sale as for_mth from sale where branchcd!='DD' and type like '4%' and to_char(vchdate,'yyyymm')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymm') ) a, type b, type c where trim(A.branchcd)=trim(b.type1) and trim(a.type)=trim(C.type1) and b.id='B' and c.id='V' group by b.name,c.Name,a.branchcd,a.type order by a.branchcd,a.type";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "01) Sales Transactions Type Wise (Basic Amount)";
                        dr1["Grp_Head"] = dt.Rows[i]["Plant_Ref"].ToString().Trim();
                        dr1["Grp_Detail"] = dt.Rows[i]["Type_ref"].ToString().Trim();
                        dr1["Num_forday"] = fgen.make_double(dt.Rows[i]["for_Day"].ToString().Trim());
                        dr1["Num_formth"] = fgen.make_double(dt.Rows[i]["for_mth"].ToString().Trim());
                        phm.Rows.Add(dr1);
                    }
                }
                //-------------------------------------------------
                SQuery = "select b.name as Plant_Ref,c.Name as Type_ref,a.branchcd,a.type,d.aname,sum(a.for_Day) as for_Day from (Select branchcd,type,Acode,amt_Sale as for_Day,0 as for_mth from sale where branchcd!='DD' and type like '4%' and to_char(vchdate,'yyyymmdd')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymmdd') ) a, type b, type c,famst d where trim(A.acode)=trim(d.acode) and trim(A.branchcd)=trim(b.type1) and trim(a.type)=trim(C.type1) and b.id='B' and c.id='V' group by d.aname,b.name,c.Name,a.branchcd,a.type order by a.branchcd,a.type,for_Day desc ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "02) Sales Transactions Plant,Customer wise(Basic Amount) on " + todt;
                        dr1["Grp_Head"] = dt.Rows[i]["Plant_Ref"].ToString().Trim();
                        dr1["Grp_Detail"] = dt.Rows[i]["aname"].ToString().Trim();
                        dr1["Num_forday"] = fgen.make_double(dt.Rows[i]["for_Day"].ToString().Trim());
                        dr1["Num_formth"] = 0;
                        phm.Rows.Add(dr1);
                    }
                }
                //-------------------------------------------------

                //Collections
                //---------------------------------------------------


                SQuery = "select C.Name as Plant_ref,a.branchcd,sum(a.cramt-a.dramt) as for_mth from voucher a,famst b,type c where c.id='B' and a.branchcd=c.type1 and a.branchcd not in ('DD','88') and to_char(a.vchdate,'yyyymm')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymm') and substr(a.type,1,1)='1' and b.grp='16' and trim(A.acode)=trim(B.acode) group by c.Name,a.branchcd order by a.branchcd";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "03) Collection from Customers Plant Wise (MTD)";
                        dr1["Grp_Head"] = "MTD Collection";
                        dr1["Grp_Detail"] = dt.Rows[i]["Plant_ref"].ToString().Trim();
                        dr1["Num_forday"] = 0;
                        dr1["Num_formth"] = fgen.make_double(dt.Rows[i]["for_mth"].ToString().Trim());
                        phm.Rows.Add(dr1);
                    }
                }
                //-------------------------------------------------
                SQuery = "select C.Name as Plant_ref,b.Aname as Cust_ref,a.branchcd,sum(a.cramt-a.dramt) as for_day from voucher a,famst b,type c where c.id='B' and a.branchcd=c.type1 and a.branchcd not in ('DD','88') and to_char(a.vchdate,'yyyymmdd')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymmdd') and substr(a.type,1,1)='1' and b.grp='16' and trim(A.acode)=trim(B.acode) group by b.Aname,c.Name,a.branchcd order by a.branchcd,b.Aname";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "04) Collection from Plant,Customers Wise on " + todt;
                        dr1["Grp_Head"] = dt.Rows[i]["Plant_ref"].ToString().Trim();
                        dr1["Grp_Detail"] = dt.Rows[i]["Cust_ref"].ToString().Trim();
                        dr1["Num_forday"] = fgen.make_double(dt.Rows[i]["for_day"].ToString().Trim());
                        dr1["Num_formth"] = 0;
                        phm.Rows.Add(dr1);
                    }
                }
                //-------------------------------------------------

                //Payments
                //---------------------------------------------------


                SQuery = "select C.Name as Plant_ref,a.branchcd,abs(sum(a.Dramt-a.cramt)) as for_mth from voucher a,famst b,type c where c.id='B' and a.branchcd=c.type1 and a.branchcd not in ('DD','88') and to_char(a.vchdate,'yyyymm')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymm') and substr(a.type,1,1)='2' and b.grp='06' and trim(A.acode)=trim(B.acode) group by c.Name,a.branchcd order by a.branchcd";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "05) Payments to Suppliers Plant Wise (MTD)";
                        dr1["Grp_Head"] = "MTD Payments";
                        dr1["Grp_Detail"] = dt.Rows[i]["Plant_ref"].ToString().Trim();
                        dr1["Num_forday"] = 0;
                        dr1["Num_formth"] = fgen.make_double(dt.Rows[i]["for_mth"].ToString().Trim());
                        phm.Rows.Add(dr1);
                    }
                }
                //-------------------------------------------------
                SQuery = "select C.Name as Plant_ref,b.Aname as Supp_ref,a.branchcd,abs(sum(a.cramt-a.dramt)) as for_day from voucher a,famst b,type c where c.id='B' and a.branchcd=c.type1 and a.branchcd not in ('DD','88') and to_char(a.vchdate,'yyyymmdd')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymmdd') and substr(a.type,1,1)='2' and b.grp='06' and trim(A.acode)=trim(B.acode) group by b.Aname,c.Name,a.branchcd order by a.branchcd,b.Aname";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "06) Payments to Plant,Suppliers Wise on " + todt;
                        dr1["Grp_Head"] = dt.Rows[i]["Plant_ref"].ToString().Trim();
                        dr1["Grp_Detail"] = dt.Rows[i]["Supp_ref"].ToString().Trim();
                        dr1["Num_forday"] = fgen.make_double(dt.Rows[i]["for_day"].ToString().Trim());
                        dr1["Num_formth"] = 0;
                        phm.Rows.Add(dr1);
                    }
                }
                //-------------------------------------------------

                //MRR Booked
                //---------------------------------------------------
                SQuery = "select C.Name as Plant_ref,a.branchcd,sum(a.Bill_tot) as for_mth from ivchctrl a,famst b,type c where c.id='B' and a.branchcd=c.type1 and a.branchcd not in ('DD','88') and to_char(a.vchdate,'yyyymm')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymm') and substr(a.type,1,1)='0' and substr(a.type,1,2) not in ('04','08')  and trim(A.acode)=trim(B.acode) group by c.Name,a.branchcd order by a.branchcd";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "07) GRN/MRR Summary Plant Wise (MTD)";
                        dr1["Grp_Head"] = "MTD GRN/MRR";
                        dr1["Grp_Detail"] = dt.Rows[i]["Plant_ref"].ToString().Trim();
                        dr1["Num_forday"] = 0;
                        dr1["Num_formth"] = fgen.make_double(dt.Rows[i]["for_mth"].ToString().Trim());
                        phm.Rows.Add(dr1);
                    }
                }
                //-------------------------------------------------
                SQuery = "select C.Name as Plant_ref,b.Aname as Supp_ref,a.branchcd,sum(a.Bill_tot) as for_day from ivchctrl a,famst b,type c where c.id='B' and a.branchcd=c.type1 and a.branchcd not in ('DD','88') and to_char(a.vchdate,'yyyymmdd')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymmdd') and substr(a.type,1,1)='0' and substr(a.type,1,2) not in ('04','08')  and trim(A.acode)=trim(B.acode) group by b.aname,b.acode,c.Name,a.branchcd order by a.branchcd,for_day desc ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "08) GRN/MRR Summary Plant,Supplier Wise (MTD)";
                        dr1["Grp_Head"] = dt.Rows[i]["Plant_ref"].ToString().Trim();
                        dr1["Grp_Detail"] = dt.Rows[i]["Supp_ref"].ToString().Trim();
                        dr1["Num_forday"] = fgen.make_double(dt.Rows[i]["for_day"].ToString().Trim());
                        dr1["Num_formth"] = 0;
                        phm.Rows.Add(dr1);
                    }
                }

                //-------------------------------------------------
                //Sales Orders 
                //---------------------------------------------------
                SQuery = "select C.Name as Plant_ref,a.branchcd,sum(a.po_total) as for_mth from (Select distinct mfginbr as branchcd,type,ordno,orddt,acode,(case when type='4F' then total*curr_Rate else total end) as po_total from Somas where branchcd not in ('DD','88') and to_char(orddt,'yyyymm')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymm') and substr(type,1,1)='4' and type!='4A' and nvl(app_by,'-')!='-' )  a,famst b,type c where c.id='B' and a.branchcd=c.type1  and trim(A.acode)=trim(B.acode) group by c.Name,a.branchcd order by a.branchcd";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "09) Sales Orders Summary Plant Wise (MTD)";
                        dr1["Grp_Head"] = "MTD Sales Orders";
                        dr1["Grp_Detail"] = dt.Rows[i]["Plant_ref"].ToString().Trim();
                        dr1["Num_forday"] = 0;
                        dr1["Num_formth"] = fgen.make_double(dt.Rows[i]["for_mth"].ToString().Trim());
                        phm.Rows.Add(dr1);
                    }
                }
                //-------------------------------------------------
                SQuery = "select C.Name as Plant_ref,a.branchcd,b.aname as cust_Ref,sum(a.po_total) as for_day from (Select distinct mfginbr as branchcd,type,ordno,orddt,acode,(case when type='4F' then total*curr_Rate else total end) as po_total from Somas where branchcd not in ('DD','88') and to_char(orddt,'yyyymmdd')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymmdd') and substr(type,1,1)='4' and type!='4A' and nvl(app_by,'-')!='-' )  a,famst b,type c where c.id='B' and a.branchcd=c.type1  and trim(A.acode)=trim(B.acode) group by c.Name,a.branchcd,b.aname,b.acode order by a.branchcd,for_day desc ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "10) Sales Orders Summary Plant,Customer Wise on " + todt;
                        dr1["Grp_Head"] = dt.Rows[i]["Plant_ref"].ToString().Trim();
                        dr1["Grp_Detail"] = dt.Rows[i]["Cust_ref"].ToString().Trim();
                        dr1["Num_forday"] = fgen.make_double(dt.Rows[i]["for_day"].ToString().Trim());
                        dr1["Num_formth"] = 0;
                        phm.Rows.Add(dr1);
                    }
                }
                //-------------------------------------------------
                //Purchase Orders 
                //---------------------------------------------------
                SQuery = "select C.Name as Plant_ref,a.branchcd,sum(a.po_total) as for_mth from (Select distinct branchcd,type,ordno,orddt,acode,(case when type='54' then rate_cd*wk3 else rate_cd end) as po_total from pomas where branchcd not in ('DD','88') and to_char(orddt,'yyyymm')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymm') and substr(type,1,1)='5' and nvl(app_by,'-')!='-' )  a,famst b,type c where c.id='B' and a.branchcd=c.type1  and trim(A.acode)=trim(B.acode) group by c.Name,a.branchcd order by a.branchcd";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "11) Purchase Orders Summary Plant Wise (MTD)";
                        dr1["Grp_Head"] = "MTD Purchase Orders";
                        dr1["Grp_Detail"] = dt.Rows[i]["Plant_ref"].ToString().Trim();
                        dr1["Num_forday"] = 0;
                        dr1["Num_formth"] = fgen.make_double(dt.Rows[i]["for_mth"].ToString().Trim());
                        phm.Rows.Add(dr1);
                    }
                }
                //-------------------------------------------------
                SQuery = "select C.Name as Plant_ref,a.branchcd,b.aname as Supp_ref,sum(a.po_total) as for_day from (Select distinct branchcd,type,ordno,orddt,acode,(case when type='54' then rate_cd*wk3 else rate_cd end) as po_total from pomas where branchcd not in ('DD','88') and to_char(orddt,'yyyymmdd')=to_char(to_date('" + todt + "','dd/mm/yyyy'),'yyyymmdd') and substr(type,1,1)='5' and nvl(app_by,'-')!='-' )  a,famst b,type c where c.id='B' and a.branchcd=c.type1  and trim(A.acode)=trim(B.acode) group by c.Name,a.branchcd,b.aname,a.acode order by a.branchcd,for_day desc";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "12) Purchase Orders Summary Plant,Supplier Wise on " + todt;
                        dr1["Grp_Head"] = dt.Rows[i]["Plant_ref"].ToString().Trim();
                        dr1["Grp_Detail"] = dt.Rows[i]["Supp_ref"].ToString().Trim();
                        dr1["Num_forday"] = fgen.make_double(dt.Rows[i]["for_day"].ToString().Trim());
                        dr1["Num_formth"] = 0;
                        phm.Rows.Add(dr1);
                    }
                }
                //-------------------------------------------------




                if (phm.Rows.Count > 0)
                {
                    phm.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(phm, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "OALL_MIS_RPT", "OALL_MIS_RPT", dsRep, header_n);
                }
                break;

            case "OVERALL_DTL":
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PRDRANGE");
                header_n = "Executive Summary Of Invoices/Sales orders/MRR|GRN/Purchase Orders";

                phm.Columns.Add(new DataColumn("Header_n", typeof(string)));
                phm.Columns.Add(new DataColumn("Fromdt", typeof(DateTime)));
                phm.Columns.Add(new DataColumn("Todt", typeof(DateTime)));
                phm.Columns.Add(new DataColumn("Block_Head", typeof(string)));

                phm.Columns.Add(new DataColumn("Type_Name", typeof(string)));
                phm.Columns.Add(new DataColumn("doc_grp", typeof(string)));
                phm.Columns.Add(new DataColumn("doc_no", typeof(string)));
                phm.Columns.Add(new DataColumn("doc_dt", typeof(string)));
                phm.Columns.Add(new DataColumn("party", typeof(string)));
                phm.Columns.Add(new DataColumn("item", typeof(string)));
                phm.Columns.Add(new DataColumn("unit", typeof(string)));
                phm.Columns.Add(new DataColumn("Qty", typeof(double)));
                phm.Columns.Add(new DataColumn("Rate", typeof(double)));
                phm.Columns.Add(new DataColumn("Amount", typeof(double)));
                //Sales 
                //-------------------------------------------------
                SQuery = "Select a.branchcd,a.type,a.vchnum,a.vchdate,to_char(a.vchdate,'dd-Mon-yyyy') as dt_fld,b.aname,c.iname,c.unit,d.name,a.iqtyout,a.irate,a.iamount,a.Acode,a.icode from ivoucher a,famst b,item c,type d where d.id='V' and a.branchcd='" + frm_mbr + "' and a.type like '4%' and a.vchdate " + xprdRange + " and trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(c.icode) and trim(A.type)=trim(d.type1) order by a.branchcd,a.type,a.vchdate,a.vchnum ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "01) Sales Transactions  on " + todt;
                        dr1["Type_Name"] = dt.Rows[i]["Name"].ToString().Trim();
                        dr1["doc_grp"] = dt.Rows[i]["branchcd"].ToString().Trim() + dt.Rows[i]["type"].ToString().Trim() + dt.Rows[i]["dt_fld"].ToString().Trim() + dt.Rows[i]["vchnum"].ToString().Trim();
                        dr1["doc_no"] = dt.Rows[i]["vchnum"].ToString().Trim();
                        dr1["doc_dt"] = dt.Rows[i]["dt_fld"].ToString().Trim();
                        dr1["party"] = dt.Rows[i]["aname"].ToString().Trim();
                        dr1["item"] = dt.Rows[i]["iname"].ToString().Trim();
                        dr1["unit"] = dt.Rows[i]["unit"].ToString().Trim();

                        dr1["Qty"] = fgen.make_double(dt.Rows[i]["iqtyout"].ToString().Trim());
                        dr1["Rate"] = fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());
                        dr1["Amount"] = fgen.make_double(dt.Rows[i]["iamount"].ToString().Trim());

                        phm.Rows.Add(dr1);
                    }
                }

                //Sales Orders
                //-------------------------------------------------
                SQuery = "Select a.branchcd,a.type,a.ordno as vchnum,a.orddt as vchdate,to_char(a.orddt,'dd-Mon-yyyy') as dt_fld,b.aname,c.iname,c.unit,d.name,a.qtyord as iqtyout,a.irate,((a.qtyord)*((a.irate*(decode(a.curr_Rate,0,1,a.curr_rate)))*((100-a.cdisc)/100))) as Iamount ,a.Acode,a.icode from somas a,famst b,item c,type d where d.id='V' and a.mfginbr='" + frm_mbr + "' and a.type like '4%' and a.orddt " + xprdRange + "  and trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(c.icode) and trim(A.type)=trim(d.type1) and a.icat<>'Y' order by a.branchcd,a.type,a.orddt,a.ordno ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "02) Sales Order Created on " + todt;
                        dr1["Type_Name"] = dt.Rows[i]["Name"].ToString().Trim();
                        dr1["doc_grp"] = dt.Rows[i]["branchcd"].ToString().Trim() + dt.Rows[i]["type"].ToString().Trim() + dt.Rows[i]["dt_fld"].ToString().Trim() + dt.Rows[i]["vchnum"].ToString().Trim();
                        dr1["doc_no"] = dt.Rows[i]["vchnum"].ToString().Trim();
                        dr1["doc_dt"] = dt.Rows[i]["dt_Fld"].ToString().Trim();
                        dr1["party"] = dt.Rows[i]["aname"].ToString().Trim();
                        dr1["item"] = dt.Rows[i]["iname"].ToString().Trim();
                        dr1["unit"] = dt.Rows[i]["unit"].ToString().Trim();

                        dr1["Qty"] = fgen.make_double(dt.Rows[i]["iqtyout"].ToString().Trim());
                        dr1["Rate"] = fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());
                        dr1["Amount"] = fgen.make_double(dt.Rows[i]["iamount"].ToString().Trim());

                        phm.Rows.Add(dr1);
                    }
                }

                //GRN/MRR 
                //-------------------------------------------------
                SQuery = "Select a.branchcd,a.type,a.vchnum,a.vchdate,to_char(a.vchdate,'dd-Mon-yyyy') as dt_fld,b.aname,c.iname,c.unit,d.name,a.iqtyin as iqtyout,a.irate,a.iamount,a.Acode,a.icode from ivoucher a,famst b,item c,type d where d.id='M' and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.vchdate " + xprdRange + "  and trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(c.icode) and trim(A.type)=trim(d.type1) and a.store!='R' order by a.branchcd,a.type,a.vchdate,a.vchnum ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "03) MRR/GRN Transactions  on " + todt;
                        dr1["Type_Name"] = dt.Rows[i]["Name"].ToString().Trim();
                        dr1["doc_grp"] = dt.Rows[i]["branchcd"].ToString().Trim() + dt.Rows[i]["type"].ToString().Trim() + dt.Rows[i]["dt_fld"].ToString().Trim() + dt.Rows[i]["vchnum"].ToString().Trim();
                        dr1["doc_no"] = dt.Rows[i]["vchnum"].ToString().Trim();
                        dr1["doc_dt"] = dt.Rows[i]["dt_fld"].ToString().Trim();
                        dr1["party"] = dt.Rows[i]["aname"].ToString().Trim();
                        dr1["item"] = dt.Rows[i]["iname"].ToString().Trim();
                        dr1["unit"] = dt.Rows[i]["unit"].ToString().Trim();

                        dr1["Qty"] = fgen.make_double(dt.Rows[i]["iqtyout"].ToString().Trim());
                        dr1["Rate"] = fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());
                        dr1["Amount"] = fgen.make_double(dt.Rows[i]["iamount"].ToString().Trim());

                        phm.Rows.Add(dr1);
                    }
                }

                //purchase Orders
                //-------------------------------------------------
                SQuery = "Select a.branchcd,a.type,a.ordno as vchnum,a.orddt as vchdate,to_char(a.orddt,'dd-Mon-yyyy') as dt_fld,b.aname,c.iname,c.unit,d.name,a.qtyord as iqtyout,a.prate as irate,((a.qtyord)*((a.prate*(decode(a.wk3,0,1,a.wk3)))*((100-a.pdisc)/100))) as Iamount ,a.Acode,a.icode from pomas a,famst b,item c,type d where d.id='M' and a.branchcd='" + frm_mbr + "' and a.type like '5%' and a.orddt " + xprdRange + "  and trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(c.icode) and trim(A.type)=trim(d.type1) and nvl(a.pflag,0)!=1 order by a.branchcd,a.type,a.orddt,a.ordno ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = phm.NewRow();
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;

                        dr1["Block_Head"] = "04) Purchase Order Created on " + todt;
                        dr1["Type_Name"] = dt.Rows[i]["Name"].ToString().Trim();
                        dr1["doc_grp"] = dt.Rows[i]["branchcd"].ToString().Trim() + dt.Rows[i]["type"].ToString().Trim() + dt.Rows[i]["dt_fld"].ToString().Trim() + dt.Rows[i]["vchnum"].ToString().Trim();
                        dr1["doc_no"] = dt.Rows[i]["vchnum"].ToString().Trim();
                        dr1["doc_dt"] = dt.Rows[i]["dt_fld"].ToString().Trim();
                        dr1["party"] = dt.Rows[i]["aname"].ToString().Trim();
                        dr1["item"] = dt.Rows[i]["iname"].ToString().Trim();
                        dr1["unit"] = dt.Rows[i]["unit"].ToString().Trim();

                        dr1["Qty"] = fgen.make_double(dt.Rows[i]["iqtyout"].ToString().Trim());
                        dr1["Rate"] = fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());
                        dr1["Amount"] = fgen.make_double(dt.Rows[i]["iamount"].ToString().Trim());

                        phm.Rows.Add(dr1);
                    }
                }


                if (phm.Rows.Count > 0)
                {
                    phm.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(phm, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "OALL_MIS_DTL", "OALL_MIS_DTL", dsRep, header_n);
                }
                break;

            //GST Debit Note
            case "P70106D":
            case "F1022":
            case "F70203M":
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                #region GST Debit Note
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL2");
                sdm_rep = "";
                if (xprdRange.Length == 1)
                {
                    xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                }
                string cond = "and TRIM(a.vchnum)||TO_CHAR(A.vchdate,'DD/MM/YYYY') in (" + barCode + ")";
                if (iconID == "F70203M") cond = "and a.branchcd||a.type||TRIM(a.vchnum)||TO_CHAR(A.vchdate,'DD/MM/YYYY') in (" + barCode + ")";
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1) { cond = "and TRIM(a.vchnum)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1 && fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3").Length > 1) { cond = "and TRIM(a.vchnum) between '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5").Length > 1) cond = cond + " and trim(a.acode)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5") + "' ";
                if (mq1 == "YES" && frm_cocd == "SDM")
                {
                    //SQuery = "select trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'ddmmyyyy') as fstr,header,aname,FDDR1,FADDR2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr,sum(iqty_chl) as iqty_chl, purpose,desc_,naration,'-' as ponum,null as podate,'-' as invno,sysdate as invdate,sum(iamount) as iamount,0 as irate,'-' as finvno,exc_57f4dt,exc_rate ,sum(exc_amt) as exc_amt,refnum,iexc_addl,sum(cess_pu)  as cess_pu,cess_percent,sum(spexc_rate) as spexc_rate,sum(spexc_amt) as spexc_amt,sum(psize) as psize,btchdt,form31,mfgdt,expdt from (SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,k.ven_code as VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " and a.vchdate  between to_date('01/04/2020','dd/mm/yyyy') and to_date('31/03/2021','dd/mm/yyyy')  order by a.vchnum) group by header,aname,FDDR1,faddr2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr, purpose,desc_,naration,exc_57f4dt,exc_rate,refnum,iexc_addl,cess_percent,btchdt,form31,mfgdt,expdt";
                    SQuery = "select BRANCHCD||tYPE||TRIM(vchnum)||TO_CHAr(vchdate,'DDMMYYYY') as fstr,header,aname,FDDR1,FADDR2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr,sum(iqty_chl) as iqty_chl, purpose,desc_,naration,'-' AS ponum,NULL AS podate,'-' as invno,sysdate as invdate,sum(iamount) as iamount,0 as irate,'-' AS finvno,exc_57f4dt,exc_rate ,sum(exc_amt) as exc_amt,refnum,iexc_addl,sum(cess_pu)  as cess_pu,cess_percent,sum(spexc_rate) as spexc_rate,sum(spexc_amt) as spexc_amt,sum(psize) as psize,btchdt,form31,mfgdt,expdt from(SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum ) group by header,aname,FDDR1,faddr2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr, purpose,desc_,naration,exc_57f4dt,exc_rate,refnum,iexc_addl,cess_percent,btchdt,form31,mfgdt,expdt"; //old
                    SQuery = "select BRANCHCD||tYPE||TRIM(vchnum)||TO_CHAr(vchdate,'DDMMYYYY') as fstr,header,aname,FDDR1,FADDR2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr,sum(iqty_chl) as iqty_chl, purpose,desc_,naration,'-' AS ponum,NULL AS podate,'-' as invno,sysdate as invdate,sum(iamount) as iamount,0 as irate,'-' AS finvno,exc_57f4dt,exc_rate ,sum(exc_amt) as exc_amt,refnum,iexc_addl,sum(cess_pu)  as cess_pu,cess_percent,sum(spexc_rate) as spexc_rate,sum(spexc_amt) as spexc_amt,sum(psize) as psize,btchdt,form31,mfgdt,expdt from(SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode else nvl(f1.VEN_CODE,'-') end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A left outer join famstbal f1 on trim(a.acode)=trim(f1.acode) and f1.branchcd='" + frm_mbr + "',FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum ) group by header,aname,FDDR1,faddr2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr, purpose,desc_,naration,exc_57f4dt,exc_rate,refnum,iexc_addl,cess_percent,btchdt,form31,mfgdt,expdt";
                    SQuery = "select BRANCHCD||tYPE||TRIM(vchnum)||TO_CHAr(vchdate,'DDMMYYYY') as fstr,header,aname,FDDR1,FADDR2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr,sum(iqty_chl) as iqty_chl, purpose,desc_,naration,'-' AS ponum,NULL AS podate,'-' as invno,sysdate as invdate,sum(iamount) as iamount,0 as irate,'-' AS finvno,exc_57f4dt,exc_rate ,sum(exc_amt) as exc_amt,refnum,iexc_addl,sum(cess_pu)  as cess_pu,cess_percent,sum(spexc_rate) as spexc_rate,sum(spexc_amt) as spexc_amt,sum(psize) as psize,btchdt,form31,mfgdt,expdt from(SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode when length(nvl(trim(F1.VEN_CODE),'-'))>3 then f1.VEN_CODE when length(nvl(trim(F1.VEN_CODE),'-'))>3 then f1.VEN_CODE end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A left outer join famstbal f1 on trim(a.acode)=trim(f1.acode) and f1.branchcd='" + frm_mbr + "',FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum ) group by header,aname,FDDR1,faddr2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr, purpose,desc_,naration,exc_57f4dt,exc_rate,refnum,iexc_addl,cess_percent,btchdt,form31,mfgdt,expdt";
                    //SQuery = "select BRANCHCD||tYPE||TRIM(vchnum)||TO_CHAr(vchdate,'DDMMYYYY') as fstr,header,aname,FDDR1,FADDR2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr,sum(iqty_chl) as iqty_chl, purpose,desc_,naration,'-' AS ponum,NULL AS podate,'-' as invno,sysdate as invdate,sum(iamount) as iamount,0 as irate,'-' AS finvno,exc_57f4dt,exc_rate ,sum(exc_amt) as exc_amt,refnum,iexc_addl,sum(cess_pu)  as cess_pu,cess_percent,sum(spexc_rate) as spexc_rate,sum(spexc_amt) as spexc_amt,sum(psize) as psize,btchdt,form31,mfgdt,expdt from(SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode when length(nvl(trim(F1.VEN_CODE),'-'))>3 then f1.VEN_CODE when length(nvl(trim(F.vencode),'-'))>3 then f.vencode end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A left outer join famstbal f1 on trim(a.acode)=trim(f1.acode) and f1.branchcd='" + frm_mbr + "',FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum ) group by header,aname,FDDR1,faddr2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr, purpose,desc_,naration,exc_57f4dt,exc_rate,refnum,iexc_addl,cess_percent,btchdt,form31,mfgdt,expdt";
                }
                else
                {
                    if (frm_cocd == "GGRP")
                    {
                        if (frm_vty == "58") header_n = "'SUPPLEMENTARY INVOICE / CREDIT NOTE'";
                        else if (frm_vty == "59") header_n = "'SUPPLEMENTARY INVOICE / DEBIT NOTE'";
                        frm_rptName = "std_Vch_Rpt_IRNQR";
                    }
                    else
                    {
                        header_n = "(case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE x.name end)";
                    }
                    header_n = "x.name";
                    //
                    // ORIGINAL QUERY  SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' then 'DEBIT NOTE/SUPPLEMENTARY INVOICE' ELSE 'DEBIT NOTE' end) as header, F.ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,I.INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    // BY MADHVI ON 19 APR 2018,PUT ONE COND "or substr(f.aname,1,4)='HERO'" FOR HEADER ON THE INSTRUCTIONS OF PUNEET SIR
                    SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode when length(nvl(trim(F1.VEN_CODE),'-'))>3 then f1.VEN_CODE when length(nvl(trim(F1.VEN_CODE),'-'))>3 then f1.VEN_CODE end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A left outer join famstbal f1 on trim(a.acode)=trim(f1.acode) and f1.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    SQuery = "SELECT '" + IrnlastpagePrint + "' as lPageqrcode," + header_n + " as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode when length(nvl(trim(F1.VEN_CODE),'-'))>3 then f1.VEN_CODE when length(nvl(trim(F1.VEN_CODE),'-'))>3 then f1.VEN_CODE end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'ddmmyyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.*,Y.naration as rmk FROM IVOUCHER A left outer join famstbal f1 on trim(a.acode)=trim(f1.acode) and f1.branchcd='" + frm_mbr + "'  left outer join WB_PV_HEAD Y on a.branchcd||a.type||Trim(a.vchnum)||to_Char(a.vchdate,'dd/mm/yyyy')=Y.branchcd||Y.type||Trim(Y.vchnum)||to_Char(Y.vchdate,'dd/mm/yyyy') ,FAMST F ,ITEM I,type x  WHERE trim(A.type)=trim(x.type1) and x.id='V' and TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                }
                sdm_rep = mq1;
                if (frm_cocd == "RRP") SQuery = "SELECT '" + IrnlastpagePrint + "' as lPageqrcode,(case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE x.name end) as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode when length(nvl(trim(F1.VEN_CODE),'-'))>3 then f1.VEN_CODE when length(nvl(trim(F1.VEN_CODE),'-'))>3 then f1.VEN_CODE end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'ddmmyyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.*,A.naration as rmk FROM IVOUCHER A left outer join famstbal f1 on trim(a.acode)=trim(f1.acode) and f1.branchcd='" + frm_mbr + "'  left outer join WB_PV_HEAD Y on a.branchcd||a.type||Trim(a.vchnum)||to_Char(a.vchdate,'dd/mm/yyyy')=Y.branchcd||Y.type||Trim(Y.vchnum)||to_Char(Y.vchdate,'dd/mm/yyyy') ,FAMST F ,ITEM I,type x  WHERE trim(A.type)=trim(x.type1) and x.id='V' and TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                if (frm_cocd == "PIPL") SQuery = "SELECT '" + IrnlastpagePrint + "' as lPageqrcode, (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header, (CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,i.ciname as INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'ddmmyyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                if (frm_cocd == "BONY" || frm_cocd == "SFAB") SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header, F.ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,k.ven_code as VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,(CASE WHEN LENGTH(TRIM(A.EXC_57F4))>2 THEN A.EXC_57F4 ELSE I.cpartno END) AS cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'ddmmyyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                if (mq1 == "YES" && frm_cocd == "SDM")
                {
                    frm_rptName = "std_vch_rpt_Smry";
                }
                else
                {
                    frm_rptName = "std_vch_rpt";
                }
                //if (frm_cocd == "GGRP") frm_rptName = "std_Vch_Rpt_IRNQR";
                //if (frm_cocd == "SAIP***" || frm_cocd == "BONY" || frm_cocd == "SFAB") { frm_rptName = "std_vchsaip"; }
                //if (frm_cocd == "SAIP") frm_rptName = "std_vchsaip_IRN";
                //if (frm_cocd == "RRP") frm_rptName = "std_Vch_Rpt_RRP";
                //if (frm_cocd == "WING" || frm_cocd == "AEPL" || frm_cocd == "MLGI") frm_rptName = "std_vch_DSC";

                //if (doc_GST == "GCC") frm_rptName = "std_vch_rptGCC";
                //else if (frm_cocd != "MLGI")
                //{
                //    frm_rptName = "std_Vch_Rpt_IRNQR";
                //}
                dsRep = new DataSet();
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count < 0)
                {
                    // ORIGINAL QUERY  SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' then 'DEBIT NOTE/SUPPLEMENTARY INVOICE' ELSE 'DEBIT NOTE' end) as header, F.ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,I.INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS gRNO,'-' AS GRDT,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    // BY MADHVI ON 19 APR 2018,PUT ONE COND "or substr(f.aname,1,4)='HERO'" FOR HEADER ON THE INSTRUCTIONS OF PUNEET SIR
                    SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header, (CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS gRNO,'-' AS GRDT,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "PIPL") SQuery = "SELECT '" + IrnlastpagePrint + "' as lPageqrcode,(case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header, (CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,i.ciname AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS gRNO,'-' AS GRDT,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "BONY" || frm_cocd == "SFAB") SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header, (CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,(CASE WHEN LENGTH(TRIM(A.EXC_57F4))>2 THEN A.EXC_57F4 ELSE I.cpartno END) AS cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    dt = new DataTable();
                    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                }
                #region //=====for irn
                einv_qrcode = "";
                {
                    dt.Columns.Add("OM_QR");
                    dt.Columns.Add("OM_OM");
                    dt.Columns.Add("EINV_NO");
                    dt.Columns.Add("ACK_NO");
                    dt.Columns.Add("ACK_dt");
                    einv_qrcode = "N";
                    foreach (DataRow drin in dt.Rows)
                    {
                        dt8 = new DataTable();
                        // dt8 = fgen.getdata(frm_qstr, frm_cocd, "SELECT a.BRANCHCD||a.DOC_TYPE||TRIM(a.DOC_NO)||TO_CHAr(a.DOC_DT,'DDMMYYYY') AS FSTR,a.irnqr_1||(case when length(trim(nvl(a.irnqr_2,'-'))) > 1 then trim(a.irnqr_2) else '' end) as qrval,a.irn_no FROM EINV_REC a WHERE a.BRANCHCD||a.DOC_TYPE||TRIM(a.DOC_NO)||TO_CHAr(a.DOC_DT,'DDMMYYYY')='" + drin["fstr"].ToString().Trim() + "' ");
                        dt8 = fgen.getdata(frm_qstr, frm_cocd, "SELECT a.BRANCHCD||a.DOC_TYPE||TRIM(a.DOC_NO)||TO_CHAr(a.DOC_DT,'DDMMYYYY') AS FSTR,a.irnqr_1||(case when length(trim(nvl(a.irnqr_2,'-'))) > 1 then trim(a.irnqr_2) else '' end) as qrval,a.irn_no,ACK_NO,ACK_dt FROM EINV_REC a WHERE a.BRANCHCD||a.DOC_TYPE||TRIM(a.DOC_NO)||TO_CHAr(a.DOC_DT,'DDMMYYYY')='" + drin["fstr"].ToString().Trim() + "' and trim(nvl(a.irn_no,'-'))!='-' ");
                        if (dt8.Rows.Count > 0)
                        {
                            einv_qrcode = "Y";
                            drin["OM_QR"] = dt8.Rows[0]["qrval"];
                            drin["OM_OM"] = "-";
                            drin["EINV_NO"] = dt8.Rows[0]["irn_no"];
                            drin["ACK_NO"] = dt8.Rows[0]["ACK_NO"];
                            drin["ACK_dt"] = dt8.Rows[0]["ACK_dt"];
                        }
                    }
                }
                dtBarCode1 = new DataTable();
                distBarCode1 = new DataView(dt);
                mainDt1 = dt;
                dtBarCode1 = distBarCode1.ToTable(true, "FSTR");
                mainDt1.Columns.Add(new DataColumn("irn_qr_desc", typeof(string)));
                mainDt1.Columns.Add(new DataColumn("irn_qr_img", typeof(System.Byte[])));
                foreach (DataRow drBarcode in dtBarCode1.Rows)
                {
                    dt = new DataTable();
                    DataView distDt = new DataView(mainDt1, "FSTR='" + drBarcode["fstr"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    if (distDt.Count > 0)
                        dt = distDt.ToTable();
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        invoiceBarcodeImage = dt.Rows[i]["fstr"].ToString().Trim();
                        switch (frm_cocd)
                        {
                            case "SVPL*":
                                col1 = dt.Rows[i]["fstr"].ToString().Trim();
                                break;
                        }
                        if (einv_qrcode == "Y")
                            IrnQrCodeValue = dt.Rows[i]["OM_QR"].ToString().Trim();
                    }
                    // deleting exising barcode file
                    switch (frm_cocd)
                    {
                        case "SVPL**":
                            fpath = Server.MapPath(@"BarCode\" + invoiceBarcodeImage + ".png");
                            del_file(fpath);
                            break;
                        default:
                            fpath = Server.MapPath(@"~\tej-base\BarCode\" + invoiceBarcodeImage + ".png");
                            del_file(fpath);
                            break;
                    }
                    // create barcode , qrcode file
                    if (einv_qrcode == "Y")
                        fgen.prnt_QRbar(frm_cocd, IrnQrCodeValue, invoiceBarcodeImage + "_IRN.png");

                    foreach (DataRow dr in mainDt1.Rows)
                    {
                        if (dr["FSTR"].ToString().Trim() == drBarcode["FSTR"].ToString().Trim())
                        {
                            if (einv_qrcode == "Y")
                            {
                                fpath4_irn = Server.MapPath(@"~\tej-base\BarCode\" + invoiceBarcodeImage + "_IRN.png");
                                FilStr4 = new FileStream(fpath4_irn, FileMode.Open);
                                BinRed4 = new BinaryReader(FilStr4);
                                dr["irn_qr_desc"] = IrnQrCodeValue.Trim();
                                dr["irn_qr_img"] = BinRed4.ReadBytes((int)BinRed4.BaseStream.Length);
                                FilStr4.Dispose();
                                BinRed4.Dispose();
                            }
                        }
                    }
                }
                #endregion
                if (mainDt1.Rows.Count > 0)
                {
                    mainDt1.TableName = "Prepcur";



                    if (frm_cocd == "LOGW" || frm_cocd == "JRAJ" || frm_cocd == "JGLR" || frm_cocd == "ROOP") repCount = 1;
                    else if (frm_cocd == "MEGA") repCount = 3;
                    else if (frm_cocd == "PPAP" || frm_cocd == "SAIP" || frm_cocd == "SAIL" || frm_cocd == "JLAP")
                    {
                        col1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                        if (col1 == "Y")
                        {
                            mq0 = "2";
                        }
                        else
                        {
                            mq0 = "1";
                        }
                        repCount = fgen.make_int(mq0);
                    }
                    else repCount = 2;
                    dsRep.Tables.Add(fgen.mTitle2(mainDt1, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_vch", frm_rptName, dsRep, "std_vch", "Y");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;
            //GST Credit Note
            case "P70106C":
            case "F1023":
                #region GST Credit Note
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL2");
                sdm_rep = "";
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                cond = "and TRIM(a.vchnum)||TO_CHAR(A.vchdate,'DD/MM/YYYY') in (" + barCode + ")";
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1) { cond = "and TRIM(a.vchnum)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1 && fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3").Length > 1) { cond = "and TRIM(a.vchnum) between '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5").Length > 1) cond = cond + " and trim(a.acode)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5") + "' ";
                if (mq1 == "YES" && frm_cocd == "SDM")
                {
                    SQuery = "select trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'ddmmyyyy') as fstr,header,aname,FDDR1,FADDR2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr,sum(iqty_chl) as iqty_chl, purpose,desc_,naration,'-' as ponum,null as podate,'-' as invno,sysdate as invdate,sum(iamount) as iamount,0 as irate,'-' as finvno,exc_57f4dt,exc_rate ,sum(exc_amt) as exc_amt,refnum,iexc_addl,sum(cess_pu)  as cess_pu,cess_percent,sum(spexc_rate) as spexc_rate,sum(spexc_amt) as spexc_amt,sum(psize) as psize,btchdt,form31,mfgdt,expdt from (SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,k.ven_code as VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " and a.vchdate  between to_date('01/04/2020','dd/mm/yyyy') and to_date('31/03/2021','dd/mm/yyyy')  order by a.vchnum) group by header,aname,FDDR1,faddr2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr, purpose,desc_,naration,exc_57f4dt,exc_rate,refnum,iexc_addl,cess_percent,btchdt,form31,mfgdt,expdt";
                    SQuery = "select trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'ddmmyyyy') as fstr,header,aname,FDDR1,FADDR2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr,sum(iqty_chl) as iqty_chl, purpose,desc_,naration,'-' as ponum,null as podate,'-' as invno,sysdate as invdate,sum(iamount) as iamount,0 as irate,'-' as finvno,exc_57f4dt,exc_rate ,sum(exc_amt) as exc_amt,refnum,iexc_addl,sum(cess_pu)  as cess_pu,cess_percent,sum(spexc_rate) as spexc_rate,sum(spexc_amt) as spexc_amt,sum(psize) as psize,btchdt,form31,mfgdt,expdt from (SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode when length(nvl(trim(k.VEN_CODE),'-'))>3 then k.VEN_CODE when length(nvl(trim(k.vencode),'-'))>3 then k.vencode end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + "  order by a.vchnum) group by header,aname,FDDR1,faddr2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr, purpose,desc_,naration,exc_57f4dt,exc_rate,refnum,iexc_addl,cess_percent,btchdt,form31,mfgdt,expdt";
                }
                //else if(frm_cocd=="GGRP")
                //{
                //    cond = "and trim(a.branchcd)||trim(a.type)||TRIM(a.vchnum)||TO_CHAR(A.vchdate,'DD/MM/YYYY') in (" + barCode + ")"; 
                //    SQuery = "SELECT '" + IrnlastpagePrint + "' as lPageqrcode,'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode when length(nvl(trim(k.VEN_CODE),'-'))>3 then k.VEN_CODE end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'ddmmyyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";//QRY IS SAME...ONLY VNCODE IS RMV FROM CASE DUE TO NOT IN FAMSTBAL TABLE
                //}
                else
                {
                    SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,k.ven_code as VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode when length(nvl(trim(k.VEN_CODE),'-'))>3 then k.VEN_CODE when length(nvl(trim(k.vencode),'-'))>3 then k.vencode end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'ddmmyyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    SQuery = "SELECT '" + IrnlastpagePrint + "' as lPageqrcode,'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode when length(nvl(trim(k.VEN_CODE),'-'))>3 then k.VEN_CODE when length(nvl(trim(k.vencode),'-'))>3 then k.vencode end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'ddmmyyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                }
                sdm_rep = mq1;
                if (frm_cocd == "RRP") SQuery = "SELECT '" + IrnlastpagePrint + "' as lPageqrcode,'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode when length(nvl(trim(k.VEN_CODE),'-'))>3 then k.VEN_CODE when length(nvl(trim(k.vencode),'-'))>3 then k.vencode end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'ddmmyyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.*,a.naration as rmk FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";//only rmk is added in qry for rrp only
                if (frm_cocd == "SAIP") SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,(case when length(nvl(trim(F.VENCODE),'-'))>3 then f.vencode when length(nvl(trim(k.VEN_CODE),'-'))>3 then k.VEN_CODE end) as vencode,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'ddmmyyyy') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum"; //when length(nvl(trim(k.vencode),'-'))>3 then k.vencode  ..IN SAIP famstbal table vencode is not found so rmv this field from case ...yogita....10june
                if (frm_cocd == "PIPL") SQuery = "SELECT '" + IrnlastpagePrint + "' as lPageqrcode,a.BRANCHCD||a.tYPE||TRIM(a.vchnum)||TO_CHAr(a.vchdate,'DDMMYYYY') as fstr,'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,i.ciname AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                if (frm_cocd == "BONY" || frm_cocd == "SFAB") SQuery = "SELECT a.BRANCHCD||a.tYPE||TRIM(a.vchnum)||TO_CHAr(a.vchdate,'DDMMYYYY') as fstr,'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,(CASE WHEN LENGTH(TRIM(A.EXC_57F4))>2 THEN A.EXC_57F4 ELSE I.cpartno END) AS cpartno,I.UNIT AS IUNIT,I.HSCODE,to_char(a.podate,'dd/mm/yyyy') as podate_,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                if (mq1 == "YES" && frm_cocd == "SDM")
                {
                    // SQuery = "select header,aname,FDDR1,FADDR2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr,sum(iqty_chl) as iqty_chl, purpose,desc_,naration,'-' as ponum,null as podate,'-' as invno,sysdate as invdate,sum(iamount) as iamount,0 as irate,'-' as finvno,exc_57f4dt,exc_rate ,sum(exc_amt) as exc_amt,refnum,iexc_addl,sum(cess_pu)  as cess_pu,cess_percent,sum(spexc_rate) as spexc_rate,sum(spexc_amt) as spexc_amt,sum(psize) as psize,btchdt,form31,mfgdt,expdt from (SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,k.ven_code as VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " and a.vchdate  between to_date('01/04/2020','dd/mm/yyyy') and to_date('31/03/2021','dd/mm/yyyy')  order by a.vchnum) group by header,aname,FDDR1,faddr2,faddr3,fstate,fstatecode,fgirno,vencode,fgst_no,iname,cpartno,iunit,hscode,branchcd,type,vchnum,vchdate,acode,icode,iopr, purpose,desc_,naration,exc_57f4dt,exc_rate,refnum,iexc_addl,cess_percent,btchdt,form31,mfgdt,expdt";
                    frm_rptName = "std_vch_rpt_Smry";
                }
                else
                {
                    frm_rptName = "std_vch_rpt";
                }
                if (frm_cocd == "SAIP**" || frm_cocd == "BONY" || frm_cocd == "SFAB") frm_rptName = "std_vchsaip";
                if (frm_cocd == "SAIP") frm_rptName = "std_vchsaip_IRN";
                if (frm_cocd == "WING" || frm_cocd == "AEPL" || frm_cocd == "MLGI") frm_rptName = "std_vch_DSC";
                //  if (frm_cocd == "RRP") frm_rptName = "std_Vch_Rpt_RRP";
                dsRep = new DataSet();
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count < 0)
                {
                    SQuery = "SELECT a.BRANCHCD||a.tYPE||TRIM(a.vchnum)||TO_CHAr(a.vchdate,'DDMMYYYY') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,k.ven_code as VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "PIPL") SQuery = "SELECT a.BRANCHCD||a.tYPE||TRIM(a.vchnum)||TO_CHAr(a.vchdate,'DDMMYYYY') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,i.ciname AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS GRNO,'-' AS GRDT,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "BONY" || frm_cocd == "SFAB") SQuery = "SELECT a.BRANCHCD||a.tYPE||TRIM(a.vchnum)||TO_CHAr(a.vchdate,'DDMMYYYY') as fstr,to_char(a.podate,'dd/mm/yyyy') as podate_,'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,(CASE WHEN LENGTH(TRIM(A.EXC_57F4))>2 THEN A.EXC_57F4 ELSE I.cpartno END) AS cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    dt = new DataTable();
                    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                }
                #region //=====for irn
                einv_qrcode = "";
                {
                    dt.Columns.Add("OM_QR");
                    dt.Columns.Add("OM_OM");
                    dt.Columns.Add("EINV_NO");
                    dt.Columns.Add("ACK_NO");
                    dt.Columns.Add("ACK_dt");
                    einv_qrcode = "N";
                    foreach (DataRow drin in dt.Rows)
                    {
                        dt8 = new DataTable();
                        // dt8 = fgen.getdata(frm_qstr, frm_cocd, "SELECT a.BRANCHCD||a.DOC_TYPE||TRIM(a.DOC_NO)||TO_CHAr(a.DOC_DT,'DDMMYYYY') AS FSTR,a.irnqr_1||(case when length(trim(nvl(a.irnqr_2,'-'))) > 1 then trim(a.irnqr_2) else '' end) as qrval,a.irn_no FROM EINV_REC a WHERE a.BRANCHCD||a.DOC_TYPE||TRIM(a.DOC_NO)||TO_CHAr(a.DOC_DT,'DDMMYYYY')='" + drin["fstr"].ToString().Trim() + "' ");
                        dt8 = fgen.getdata(frm_qstr, frm_cocd, "SELECT a.BRANCHCD||a.DOC_TYPE||TRIM(a.DOC_NO)||TO_CHAr(a.DOC_DT,'DDMMYYYY') AS FSTR,a.irnqr_1||(case when length(trim(nvl(a.irnqr_2,'-'))) > 1 then trim(a.irnqr_2) else '' end) as qrval,a.irn_no,ACK_NO,ACK_dt FROM EINV_REC a WHERE a.BRANCHCD||a.DOC_TYPE||TRIM(a.DOC_NO)||TO_CHAr(a.DOC_DT,'DDMMYYYY')='" + drin["fstr"].ToString().Trim() + "' and trim(nvl(a.irn_no,'-'))!='-' ");
                        if (dt8.Rows.Count > 0)
                        {
                            einv_qrcode = "Y";
                            drin["OM_QR"] = dt8.Rows[0]["qrval"];
                            drin["OM_OM"] = "-";
                            drin["EINV_NO"] = dt8.Rows[0]["irn_no"];
                            drin["ACK_NO"] = dt8.Rows[0]["ACK_NO"];
                            drin["ACK_dt"] = dt8.Rows[0]["ACK_dt"];
                        }
                    }
                }
                dtBarCode1 = new DataTable();
                distBarCode1 = new DataView(dt);
                mainDt1 = dt;
                dtBarCode1 = distBarCode1.ToTable(true, "FSTR");
                mainDt1.Columns.Add(new DataColumn("irn_qr_desc", typeof(string)));
                mainDt1.Columns.Add(new DataColumn("irn_qr_img", typeof(System.Byte[])));
                foreach (DataRow drBarcode in dtBarCode1.Rows)
                {
                    dt = new DataTable();
                    DataView distDt = new DataView(mainDt1, "FSTR='" + drBarcode["fstr"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    if (distDt.Count > 0)
                        dt = distDt.ToTable();
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        invoiceBarcodeImage = dt.Rows[i]["fstr"].ToString().Trim();
                        switch (frm_cocd)
                        {
                            case "SVPL*":
                                col1 = dt.Rows[i]["fstr"].ToString().Trim();
                                break;
                        }
                        if (einv_qrcode == "Y")
                            IrnQrCodeValue = dt.Rows[i]["OM_QR"].ToString().Trim();
                    }
                    // deleting exising barcode file
                    switch (frm_cocd)
                    {
                        case "SVPL**":
                            fpath = Server.MapPath(@"BarCode\" + invoiceBarcodeImage + ".png");
                            del_file(fpath);
                            break;
                        default:
                            fpath = Server.MapPath(@"~\tej-base\BarCode\" + invoiceBarcodeImage + ".png");
                            del_file(fpath);
                            break;
                    }
                    // create barcode , qrcode file
                    if (einv_qrcode == "Y")
                        fgen.prnt_QRbar(frm_cocd, IrnQrCodeValue, invoiceBarcodeImage + "_IRN.png");

                    foreach (DataRow dr in mainDt1.Rows)
                    {
                        if (dr["FSTR"].ToString().Trim() == drBarcode["FSTR"].ToString().Trim())
                        {
                            if (einv_qrcode == "Y")
                            {
                                fpath4_irn = Server.MapPath(@"~\tej-base\BarCode\" + invoiceBarcodeImage + "_IRN.png");
                                FilStr4 = new FileStream(fpath4_irn, FileMode.Open);
                                BinRed4 = new BinaryReader(FilStr4);
                                dr["irn_qr_desc"] = IrnQrCodeValue.Trim();
                                dr["irn_qr_img"] = BinRed4.ReadBytes((int)BinRed4.BaseStream.Length);
                                FilStr4.Dispose();
                                BinRed4.Dispose();
                            }
                        }
                    }
                }
                #endregion
                //=========
                if (mainDt1.Rows.Count > 0)
                {
                    mainDt1.TableName = "Prepcur";
                    if (frm_cocd == "LOGW" || frm_cocd == "ROOP" || frm_cocd == "JRAJ" || frm_cocd == "JGLR") repCount = 1;
                    else if (frm_cocd == "MEGA") repCount = 3;
                    else if (frm_cocd == "PPAP" || frm_cocd == "SAIP" || frm_cocd == "SAIL" || frm_cocd == "JLAP")
                    {
                        col1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                        if (col1 == "Y")
                        {
                            mq0 = "2";
                        }
                        else
                        {
                            mq0 = "1";
                        }
                        repCount = fgen.make_int(mq0);
                    }
                    else repCount = 2;
                    dsRep.Tables.Add(fgen.mTitle2(mainDt1, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_vch", frm_rptName, dsRep, "std_vch", "Y");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            //GST Debit Note
            case "P70106Dxxx":
            case "F1022xxx":
            case "F70203Mxxx":
                #region GST Debit Note

                if (xprdRange.Length == 1)
                {
                    xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                }

                cond = "and TRIM(a.vchnum)||TO_CHAR(A.vchdate,'DD/MM/YYYY') in (" + barCode + ")";
                if (iconID == "F70203M") cond = "and a.branchcd||a.type||TRIM(a.vchnum)||TO_CHAR(A.vchdate,'DD/MM/YYYY') in (" + barCode + ")";
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1) { cond = "and TRIM(a.vchnum)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1 && fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3").Length > 1) { cond = "and TRIM(a.vchnum) between '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5").Length > 1) cond = cond + " and trim(a.acode)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5") + "' ";

                // ORIGINAL QUERY  SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' then 'DEBIT NOTE/SUPPLEMENTARY INVOICE' ELSE 'DEBIT NOTE' end) as header, F.ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,I.INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                // BY MADHVI ON 19 APR 2018,PUT ONE COND "or substr(f.aname,1,4)='HERO'" FOR HEADER ON THE INSTRUCTIONS OF PUNEET SIR
                SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";

                if (frm_cocd == "PIPL") SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header, (CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,i.ciname as INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                if (frm_cocd == "BONY" || frm_cocd == "SFAB") SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header, F.ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,k.ven_code as VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,(CASE WHEN LENGTH(TRIM(A.EXC_57F4))>2 THEN A.EXC_57F4 ELSE I.cpartno END) AS cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";

                frm_rptName = "std_vch_rpt";
                if (frm_cocd == "SAIP" || frm_cocd == "BONY" || frm_cocd == "SFAB") { frm_rptName = "std_vchsaip"; }
                if (frm_cocd == "WING" || frm_cocd == "AEPL" || frm_cocd == "MLGI") frm_rptName = "std_vch_DSC";
                dsRep = new DataSet();
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count < 0)
                {
                    // ORIGINAL QUERY  SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' then 'DEBIT NOTE/SUPPLEMENTARY INVOICE' ELSE 'DEBIT NOTE' end) as header, F.ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,I.INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS gRNO,'-' AS GRDT,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    // BY MADHVI ON 19 APR 2018,PUT ONE COND "or substr(f.aname,1,4)='HERO'" FOR HEADER ON THE INSTRUCTIONS OF PUNEET SIR
                    SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header, (CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS gRNO,'-' AS GRDT,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "PIPL") SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header, (CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,i.ciname AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS gRNO,'-' AS GRDT,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "BONY" || frm_cocd == "SFAB") SQuery = "SELECT (case when upper(A.naration) like 'SUPPL%' or substr(f.aname,1,4)='HERO' OR substr(f.aname,1,4)='TATA' then 'SUPPLEMENTARY INVOICE / DEBIT NOTE' ELSE 'DEBIT NOTE' end) as header, (CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,(CASE WHEN LENGTH(TRIM(A.EXC_57F4))>2 THEN A.EXC_57F4 ELSE I.cpartno END) AS cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    dt = new DataTable();
                    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                }
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    if (frm_cocd == "LOGW" || frm_cocd == "JRAJ" || frm_cocd == "JGLR" || frm_cocd == "ROOP") repCount = 1;
                    else if (frm_cocd == "MEGA") repCount = 3;
                    else if (frm_cocd == "PPAP" || frm_cocd == "SAIP" || frm_cocd == "SAIL" || frm_cocd == "JLAP")
                    {
                        col1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                        if (col1 == "Y")
                        {
                            mq0 = "2";
                        }
                        else
                        {
                            mq0 = "1";
                        }
                        repCount = fgen.make_int(mq0);
                    }
                    else repCount = 2;
                    dsRep.Tables.Add(fgen.mTitle2(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_vch", frm_rptName, dsRep, "std_vch", "Y");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            //GST Credit Note
            case "P70106Cxx":
            case "F1023xx":
                #region GST Credit Note
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                cond = "and TRIM(a.vchnum)||TO_CHAR(A.vchdate,'DD/MM/YYYY') in (" + barCode + ")";
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1) { cond = "and TRIM(a.vchnum)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1 && fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3").Length > 1) { cond = "and TRIM(a.vchnum) between '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5").Length > 1) cond = cond + " and trim(a.acode)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5") + "' ";

                SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,k.ven_code as VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                if (frm_cocd == "PIPL") SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,i.ciname AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                if (frm_cocd == "BONY" || frm_cocd == "SFAB") SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,(CASE WHEN LENGTH(TRIM(A.EXC_57F4))>2 THEN A.EXC_57F4 ELSE I.cpartno END) AS cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";

                frm_rptName = "std_vch_rpt";
                if (frm_cocd == "SAIP" || frm_cocd == "BONY" || frm_cocd == "SFAB") frm_rptName = "std_vchsaip";
                if (frm_cocd == "WING" || frm_cocd == "AEPL" || frm_cocd == "MLGI") frm_rptName = "std_vch_DSC";
                dsRep = new DataSet();
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count < 0)
                {
                    SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,k.ven_code as VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A LEFT OUTER JOIN famstbal k ON trim(a.acode)=trim(k.acode) and k.branchcd='" + frm_mbr + "' ,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "PIPL") SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,i.ciname AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS GRNO,'-' AS GRDT,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "BONY" || frm_cocd == "SFAB") SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,(CASE WHEN LENGTH(TRIM(A.EXC_57F4))>2 THEN A.EXC_57F4 ELSE I.cpartno END) AS cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    dt = new DataTable();
                    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                }
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    if (frm_cocd == "LOGW" || frm_cocd == "ROOP" || frm_cocd == "JRAJ" || frm_cocd == "JGLR") repCount = 1;
                    else if (frm_cocd == "MEGA") repCount = 3;
                    else if (frm_cocd == "PPAP" || frm_cocd == "SAIP" || frm_cocd == "SAIL" || frm_cocd == "JLAP")
                    {
                        col1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                        if (col1 == "Y")
                        {
                            mq0 = "2";
                        }
                        else
                        {
                            mq0 = "1";
                        }
                        repCount = fgen.make_int(mq0);
                    }
                    else repCount = 2;
                    dsRep.Tables.Add(fgen.mTitle2(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_vch", frm_rptName, dsRep, "std_vch", "Y");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            //GST Credit Note            
            case "P70110C":
                #region GST Credit Note
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                cond = "and TRIM(a.vchnum)||TO_CHAR(A.vchdate,'DD/MM/YYYY') in (" + barCode + ")";
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1) { cond = "and TRIM(a.vchnum)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1 && fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3").Length > 1) { cond = "and TRIM(a.vchnum) between '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5").Length > 1) cond = cond + " and trim(a.acode)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5") + "' ";

                SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHERP A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";

                frm_rptName = "std_vch_rpt";
                if (frm_cocd == "SAIP" || frm_cocd == "BONY" || frm_cocd == "SFAB") frm_rptName = "std_vchsaip";
                if (frm_cocd == "WING" || frm_cocd == "AEPL" || frm_cocd == "MLGI") frm_rptName = "std_vch_DSC";
                dsRep = new DataSet();
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count < 0)
                {
                    SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS GRNO,'-' AS GRDT,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "PIPL") SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,i.ciname AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS GRNO,'-' AS GRDT,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "BONY" || frm_cocd == "SFAB") SQuery = "SELECT 'CREDIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,(CASE WHEN LENGTH(TRIM(A.EXC_57F4))>2 THEN A.EXC_57F4 ELSE I.cpartno END) AS cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    dt = new DataTable();
                    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                }
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    if (frm_cocd == "LOGW" || frm_cocd == "ROOP" || frm_cocd == "JRAJ" || frm_cocd == "JGLR") repCount = 1;
                    else if (frm_cocd == "MEGA") repCount = 3;
                    else repCount = 2;
                    dsRep.Tables.Add(fgen.mTitle2(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_vch", frm_rptName, dsRep, "std_vch", "Y");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;
            case "P70110D":
                #region GST Dr Note
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                cond = "and TRIM(a.vchnum)||TO_CHAR(A.vchdate,'DD/MM/YYYY') in (" + barCode + ")";
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1) { cond = "and TRIM(a.vchnum)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1").Length > 1 && fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3").Length > 1) { cond = "and TRIM(a.vchnum) between '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1") + "' and '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3") + "' and a.vchdate " + xprdRange + " "; }
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5").Length > 1) cond = cond + " and trim(a.acode)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR5") + "' ";

                SQuery = "SELECT 'DEBIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHERP A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";

                frm_rptName = "std_vch_rpt";
                if (frm_cocd == "SAIP" || frm_cocd == "BONY" || frm_cocd == "SFAB") frm_rptName = "std_vchsaip";
                if (frm_cocd == "WING" || frm_cocd == "AEPL" || frm_cocd == "MLGI") frm_rptName = "std_vch_DSC";
                dsRep = new DataSet();
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count < 0)
                {
                    SQuery = "SELECT 'DEBIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS GRNO,'-' AS GRDT,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "PIPL") SQuery = "SELECT 'DEBIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,i.ciname AS INAME,I.cpartno,I.UNIT AS IUNIT,I.HSCODE,'-' AS GRNO,'-' AS GRDT,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    if (frm_cocd == "BONY" || frm_cocd == "SFAB") SQuery = "SELECT 'DEBIT NOTE' as header,(CASE WHEN TRIM(NVL(F.PNAME,'-'))='-' THEN F.ANAME ELSE F.PNAME END) AS ANAME,F.ADDR1 AS FDDR1,F.ADDR2 AS FADDR2,F.ADDR3 AS FADDR3,F.STATEN AS FSTATE,SUBSTR(F.GST_NO,0,2) AS FSTATECODE,F.GIRNO AS FGIRNO,F.VENCODE,F.GST_NO AS FGST_NO,(CASE WHEN LENGTH(A.PURPOSE)>2 THEN A.PURPOSE ELSE I.INAME END) AS INAME,(CASE WHEN LENGTH(TRIM(A.EXC_57F4))>2 THEN A.EXC_57F4 ELSE I.cpartno END) AS cpartno,I.UNIT AS IUNIT,I.HSCODE,A.* FROM IVOUCHER A,FAMST F ,ITEM I WHERE  TRIM(A.ACODE)=TRIM(F.ACODE) AND TRIM(A.ICODE)=TRIM(I.ICODE) AND A.BRANCHCD='" + frm_mbr + "' and A.TYPE ='" + frm_vty + "' " + cond + " order by a.vchnum";
                    dt = new DataTable();
                    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                }
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    if (frm_cocd == "LOGW" || frm_cocd == "ROOP" || frm_cocd == "JRAJ" || frm_cocd == "JGLR") repCount = 1;
                    else if (frm_cocd == "MEGA") repCount = 3;
                    else repCount = 2;
                    dsRep.Tables.Add(fgen.mTitle2(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_vch", frm_rptName, dsRep, "std_vch", "Y");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;
            // MERGE BY MADHVI ON 27TH JAN 2018 , MADE BY YOGITA

            case "F70151"://4 col
            case "F70238":///set no printer6 col
            case "F70237": /////set prd='N'2col
                #region Trial Balance

                fgen.execute_cmd(frm_qstr, frm_cocd, "insert into type(id,type1,name)(select distinct 'Z',substr(trim(grp),1,2),'Group '||substr(trim(grp),1,2) from famst where substr(trim(grp),1,2) not in (select trim(type1) from type where id='Z'))");
                fgen.execute_cmd(frm_qstr, frm_cocd, "insert into typegrp(branchcd,id,type1,name)(select distinct '00','A',lpad(trim(bssch),4,'0'),'Schedule '||lpad(trim(bssch),4,'0') from famst where trim(bssch) not in (select trim(type1) from typegrp where id='A'))");

                part_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE");
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                if (part_cd.Length <= 4) part_cd = " and trim(b.bssch) like '%'";
                else part_cd = " and trim(b.bssch) in (" + part_cd + ")";
                if (party_cd.Length <= 2) party_cd = "and substr(b.grp,1,2) like '%'";
                else party_cd = "and trim(b.grp) in (" + party_cd + ")";
                xprdRange1 = "BETWEEN TO_DATE('" + frm_cDt1 + "','DD/MM/YYYY') AND TO_DATE('" + fromdt + "','DD/MM/YYYY')-1";
                cond = "";
                cond = fgenMV.Fn_Get_Mvar(frm_qstr, "U_BRANCH_CD");


                string rep_file_name = "";
                switch (iconID)
                {
                    case "F70151":
                        rep_file_name = "std_trail_bal";
                        header_n = "Trial Balance 4 Column";
                        break;
                    case "F70237":
                        rep_file_name = "std_trail_bal_2col";
                        header_n = "Trial Balance 2 Column";
                        break;
                    case "F70238":
                        rep_file_name = "std_trail_bal_6col";
                        header_n = "Trial Balance 6 Column";
                        break;
                }

                SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, b.bssch as subgrpcode,c.type1 as mgcode, d.name as sub_grp,c.name as mgname, trim(a.acode) as acode,b.aname,sum(nvl(a.opening,0)) as opening,sum(nvl(a.cdr,0)) as drmt,sum(nvl(a.ccr,0)) as crmt,sum(nvl(a.opening,0))+sum(nvl(a.cdr,0))-sum(nvl(a.ccr,0)) as cl from (Select branchcd,trim(acode) as acode, nvl(yr_" + frm_myear + ",0) as opening,0 as cdr,0 as ccr,0 as clos from famstbal where (" + cond + ") union all select branchcd,trim(acode),nvl(dramt,0)-nvl(cramt,0) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where " + cond + " and type like '%' and type!='3Z' and vchdate " + xprdRange1 + " union all select branchcd,trim(acode),0 as op,nvl(dramt,0) as cdr,nvl(cramt,0) as ccr,0 as clos from VOUCHER where " + cond + " and type like '%' and type!='3Z' and vchdate " + xprdRange + " ) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(b.grp),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) " + part_cd + " " + party_cd + " group by trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having abs(sum(nvl(a.opening,0)))+sum(nvl(a.cdr,0))+sum(nvl(a.ccr,0))!=0 ";

                SQuery = "select frmdt,todt,header,subgrpcode,mgcode,sub_grp,mgname,'-' as branchcd,acode,aname,opening,drmt,crmt,cl,(case when opening>0 then opening else 0 end ) as op_debit,(case when opening<0 then abs(opening) else 0 end ) as op_crdt,(case when (cl)>0 then (abs(cl)) else 0 end ) as cl_debit,(case when (cl)<0 then (abs(cl)) else 0 end ) as cl_crdt from (" + SQuery + ") ORDER BY mgcode,aCODE";
                pdfView = "Y";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, rep_file_name, rep_file_name, dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;


            case "F70222":
                #region Cash Book
                header_n = "Cash Book";
                //mq0 = "Rcpt";
                //mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Col1");
                //original query SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,a.naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type in ('" + mq1 + "') and a.vchdate " + xprdRange + " order by vdd,vchnum,srno";
                xprdRange1 = "between to_date('" + frm_cDt1 + "','dd/MM/yyyy') and to_Date('" + fromdt + "','dd/MM/yyyy')-1";
                mq1 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(acode) as acode from type where id='V' and type1='20'", "acode");
                SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,(case when a.type='10' then 'Rcpt ('||a.type||')' else 'Pymt ('||a.type||')' end) as typ,0 as iopqty,0 as bal, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,(case when length(nvl(trim(a.refnum),'-'))>1 then 'Chq No. '||trim(a.refnum)||' Dt. '||to_char(a.refdate,'dd/mm/yyyy')||' '||a.naration else a.naration end) as naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.rcode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.vchdate " + xprdRange + " and a.acode='" + mq1 + "' order by vdd,vchnum,srno";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                mq2 = "select branchcd,trim(acode) as acode,nvl(sum(opening),0) as IOPQTY,nvl(sum(cdr),0) as qtyin,nvl(sum(ccr),0) as qtyout,sum(opening)+sum(cdr)-sum(ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd='" + frm_mbr + "' union all select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + " GROUP BY acode,branchcd union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd='" + frm_mbr + "' and type like '%'  and vchdate " + xprdRange + " GROUP BY acode,branchcd )WHERE ACODE='" + mq1 + "' group by branchcd,trim(acode) ORDER BY acode";
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, mq2);
                ph_tbl = new DataTable();
                ph_tbl = dt.Clone();
                db1 = 0; db2 = 0;
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = ph_tbl.NewRow();
                        dr1["frmdt"] = fromdt;
                        dr1["todt"] = todt;
                        dr1["header"] = header_n;
                        dr1["typ"] = dt.Rows[i]["typ"].ToString().Trim();
                        dr1["type"] = dt.Rows[i]["type"].ToString().Trim();
                        dr1["vchnum"] = dt.Rows[i]["vchnum"].ToString().Trim();
                        dr1["chq_dt"] = dt.Rows[i]["chq_dt"].ToString().Trim();
                        dr1["acode"] = dt.Rows[i]["acode"].ToString().Trim();
                        dr1["dramt"] = fgen.make_double(dt.Rows[i]["dramt"].ToString().Trim());
                        dr1["cramt"] = fgen.make_double(dt.Rows[i]["cramt"].ToString().Trim());
                        if (i == 0)
                        {
                            if (dt1.Rows.Count > 0)
                            {
                                db1 = fgen.make_double(dt1.Rows[0]["IOPQTY"].ToString().Trim()); //opening
                            }
                            dr1["iopqty"] = db1;
                            db2 = db1 + fgen.make_double(dr1["dramt"].ToString()) - fgen.make_double(dr1["cramt"].ToString());
                        }
                        else
                        {
                            dr1["iopqty"] = db2;
                            db2 = db2 + fgen.make_double(dr1["dramt"].ToString()) - fgen.make_double(dr1["cramt"].ToString());
                        }
                        dr1["bal"] = db2;
                        dr1["naration"] = dt.Rows[i]["naration"].ToString().Trim();
                        dr1["aname"] = dt.Rows[i]["aname"].ToString().Trim();
                        dr1["vdd"] = dt.Rows[i]["vdd"].ToString().Trim();
                        dr1["date_"] = dt.Rows[i]["date_"].ToString().Trim();
                        ph_tbl.Rows.Add(dr1);
                    }
                }
                if (ph_tbl.Rows.Count > 0)
                {
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(ph_tbl, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Cash_Book", "std_Cash_Book", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            ///////////////////////7FEB 2018 
            case "F70240":
            case "F70145":
            case "F47240":
                header_n = "Payment Advice";
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                SQuery = "SELECT '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,b.aname,b.rtg_bank,b.rtg_addr,b.rtg_acno,b.rtg_ifsc,b.payment,c.aname as rname,b.addr1,b.addr2,b.addr3,b.telnum as tel,b.person,b.mobile as mb,b.pincode,to_char(A.INVDATE+B.PAY_NUM,'dd/mm/yyyy') AS DUEDATE,to_char(a.vchdate,'dd/MM/yyyy') as vch,a.*,substr(trim(a.type),1,1) as ntype,nvl(b.email,'-') as p_email,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(A.INVDATE,'yyyymmdd') as vdd FROM voucher a,famst b,famst c  where  trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode) and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy')||trim(a.acode) in (" + mq1 + ") order by a.vchnum,vdd,a.invno";
                if (frm_cocd == "PIPL")
                {
                    //changed on 17/06/2021 as payment advice print was not coming..
                    //SQuery = "SELECT '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,b.aname,b.rtg_bank,b.rtg_addr,b.rtg_acno,b.rtg_ifsc,b.payment,c.aname as rname,b.addr1,b.addr2,b.addr3,b.telnum as tel,b.person,b.mobile as mb,b.pincode,to_char(A.INVDATE+B.PAY_NUM,'dd/mm/yyyy') AS DUEDATE,to_char(a.vchdate,'dd/MM/yyyy') as vch,a.*,substr(trim(a.type),1,1) as ntype,nvl(b.email,'-') as p_email,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(A.INVDATE,'yyyymmdd') as vdd FROM voucher a,famst b,famst c  where  trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode) AND A.BRANCHCD!='88' AND A.TYPE='33' and trim(a.stform)||trim(a.acode) in (" + mq1 + ") order by a.vchnum,vdd,a.invno";
                    SQuery = "SELECT '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,b.aname,b.rtg_bank,b.rtg_addr,b.rtg_acno,b.rtg_ifsc,b.payment,c.aname as rname,b.addr1,b.addr2,b.addr3,b.telnum as tel,b.person,b.mobile as mb,b.pincode,to_char(A.INVDATE+B.PAY_NUM,'dd/mm/yyyy') AS DUEDATE,to_char(a.vchdate,'dd/MM/yyyy') as vch,a.*,substr(trim(a.type),1,1) as ntype,nvl(b.email,'-') as p_email,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(A.INVDATE,'yyyymmdd') as vdd FROM voucher a,famst b,famst c  where  trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode) AND A.BRANCHCD!='88'  and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy')||trim(a.acode) in (" + mq1 + ") order by a.vchnum,vdd,a.invno";
                }
                //else if(frm_cocd=="AMAR"||frm_cocd=="SDM")
                //{
                //    SQuery = "SELECT '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,b.aname,b.rtg_bank,b.rtg_addr,b.rtg_acno,b.rtg_ifsc,b.payment,c.aname as rname,b.addr1,b.addr2,b.addr3,b.telnum as tel,b.person,b.mobile as mb,b.pincode,to_char(A.INVDATE+B.PAY_NUM,'dd/mm/yyyy') AS DUEDATE,to_char(a.vchdate,'dd/MM/yyyy') as vch,a.*,substr(trim(a.type),1,1) as ntype,nvl(b.email,'-') as p_email,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(A.INVDATE,'yyyymmdd') as vdd FROM voucher a,famst b,famst c  where  trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode) and substr(a.acode,1,2) in ('05','06') AND A.BRANCHCD not in ('DD','88')  and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy')||trim(a.acode) in (" + mq1 + ") order by a.branchcd,a.type,a.vchnum,vdd";
                //}
                //else
                //{
                SQuery = "SELECT '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,b.aname,b.rtg_bank,b.rtg_addr,b.rtg_acno,b.rtg_ifsc,b.payment,c.aname as rname,b.addr1,b.addr2,b.addr3,b.telnum as tel,b.person,b.mobile as mb,b.pincode,to_char(A.INVDATE+B.PAY_NUM,'dd/mm/yyyy') AS DUEDATE,to_char(a.vchdate,'dd/MM/yyyy') as vch,a.*,substr(trim(a.type),1,1) as ntype,nvl(b.email,'-') as p_email,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(A.INVDATE,'yyyymmdd') as vdd FROM voucher a,famst b,famst c  where  trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode) and substr(a.acode,1,2) in ('05','06') AND A.BRANCHCD not in ('DD','88')  and (trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') in ('" + mq1.Replace("'", "").Left(20) + "') or trim(a.stform) in ('" + mq1.Replace("'", "").Left(20) + "')) order by a.branchcd,a.type,a.vchnum,vdd";//THIS IS OLD QRY
                SQuery = "SELECT '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,b.aname,b.rtg_bank,b.rtg_addr,b.rtg_acno,b.rtg_ifsc,b.payment,c.aname as rname,b.addr1,b.addr2,b.addr3,b.telnum as tel,b.person,b.mobile as mb,b.pincode,to_char(A.INVDATE+B.PAY_NUM,'dd/mm/yyyy') AS DUEDATE,to_char(a.vchdate,'dd/MM/yyyy') as vch,a.*,substr(trim(a.type),1,1) as ntype,nvl(b.email,'-') as p_email,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(A.INVDATE,'yyyymmdd') as vdd FROM voucher a,famst b,famst c  where  trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode) and substr(a.acode,1,2) in ('05','06') AND A.BRANCHCD not in ('DD','88')  and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy')||trim(a.acode) in (" + mq1 + ") order by a.branchcd,a.type,a.vchnum,vdd";
                //}
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count <= 0)
                {
                    SQuery = "SELECT '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,b.aname,b.rtg_bank,b.rtg_addr,b.rtg_acno,b.rtg_ifsc,b.payment,c.aname as rname,b.addr1,b.addr2,b.addr3,b.telnum as tel,b.person,b.mobile as mb,b.pincode,to_char(A.INVDATE+B.PAY_NUM,'dd/mm/yyyy') AS DUEDATE,to_char(a.vchdate,'dd/MM/yyyy') as vch,a.*,substr(trim(a.type),1,1) as ntype,nvl(b.email,'-') as p_email,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,to_char(A.INVDATE,'yyyymmdd') as vdd FROM voucher a,famst b,famst c  where  trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode) and trim(a.stform)||trim(a.acode) in (" + mq1 + ") order by a.vchnum,vdd,a.invno";
                    dt = new DataTable();
                    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                }
                mq1 = ""; mq2 = "";
                if (dt.Rows.Count > 0)
                {
                    dt.Columns.Add("pday", typeof(int));
                    dt.Columns.Add("ncramt", typeof(string));
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        //if (frm_cocd != "PIPL")
                        if (1 == 2)
                        {
                            dt2 = new DataTable();
                            SQuery = "SELECT '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,b.aname,b.payment,c.aname as rname,b.addr1,b.addr2,b.addr3,b.telnum as tel,b.person,b.mobile as mb,b.pincode,to_char(A.INVDATE+B.PAY_NUM,'dd/mm/yyyy') AS DUEDATE,to_char(a.vchdate,'dd/MM/yyyy') as vch,a.*,substr(trim(a.type),1,1) as ntype,nvl(b.email,'-') as p_email,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr FROM voucher a,famst b,famst c  where  trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode) and trim(a.stform)='" + dt.Rows[i]["fstr"].ToString().Trim() + "' and substr(a.acode,1,2) in ('05','06') ";
                            SQuery = "SELECT '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,b.aname,b.payment,c.aname as rname,b.addr1,b.addr2,b.addr3,b.telnum as tel,b.person,b.mobile as mb,b.pincode,to_char(A.INVDATE+B.PAY_NUM,'dd/mm/yyyy') AS DUEDATE,to_char(a.vchdate,'dd/MM/yyyy') as vch,a.*,substr(trim(a.type),1,1) as ntype,nvl(b.email,'-') as p_email,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') as fstr,TO_CHAR(A.INVDATE,'YYYYMMDD') AS VDD FROM voucher a,famst b,famst c  where  trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode) and trim(a.stform)='" + dt.Rows[i]["fstr"].ToString().Trim() + "' and substr(a.acode,1,2) in ('05','06')  ORDER BY VDD,INVNO";
                            dt2 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                            if (dt2.Rows.Count > 0)
                            {
                                mq10 = fgen.seek_iname_dt(dt, "FSTR='" + dt.Rows[i]["fstr"].ToString().Trim() + "'", "REFNUM");
                                mq11 = fgen.seek_iname_dt(dt, "FSTR='" + dt.Rows[i]["fstr"].ToString().Trim() + "'", "REFDATE");

                                dt.Rows.RemoveAt(i);
                                dt2.Columns.Add("pday", typeof(int));
                                foreach (DataRow drImpRow in dt2.Rows)
                                {
                                    drImpRow["REFNUM"] = mq10;
                                    drImpRow["REFDATE"] = mq11;
                                    dt.ImportRow(drImpRow);
                                }
                            }
                        }

                        mq2 = "select to_date('" + dt.Rows[i]["vch"].ToString().Trim() + "','dd/MM/yyyy')-to_date('" + dt.Rows[i]["duedate"].ToString().Trim() + "','dd/MM/yyyy') as pday FROM DUAL";
                        mq1 = fgen.seek_iname(frm_qstr, frm_cocd, mq2, "pday");
                        dt.Rows[i]["pday"] = mq1;

                        if (fgen.make_double(dt.Rows[i]["fcrate"].ToString().Trim()) == 0)
                        {
                            if (dt.Rows[i]["ntype"].ToString().Trim() == "2")
                            {
                                //dt.Rows[i]["ncramt"] = dt.Rows[i]["cramt"].ToString().Trim();
                                dt.Rows[i]["ncramt"] = dt.Rows[i]["dramt"].ToString().Trim();
                            }
                            else
                            {
                                //dt.Rows[i]["ncramt"] = dt.Rows[i]["dramt"].ToString().Trim();
                                dt.Rows[i]["ncramt"] = dt.Rows[i]["cramt"].ToString().Trim();
                            }
                        }
                        else
                        {
                            dt.Rows[i]["ncramt"] = dt.Rows[i]["fcrate"].ToString().Trim();
                        }
                    }
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    frm_rptName = "std_pymt_advise_N";
                    if (frm_cocd == "KLAS" || frm_cocd == "MANU*") frm_rptName = "std_pymt_advise_klas";
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_pymt_advise_N", frm_rptName, dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }

                break;

            ///////////////////////7FEB 2018 
            case "F70239"://set no printer
                header_n = "Bank Day Book";
                mq0 = "Bank";
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_VTY");
                //SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd mon') as vchdate,to_char(a.vchdate,'yyyymmdd') as vch,a.acode,a.dramt ,a.cramt,a.naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" +frm_mbr + "' and a.type in ('" + mq1 + "') and a.vchdate " + xprdRange + " order BY vch,vchnum,srno";
                SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,a.naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type ='" + mq1 + "' and a.vchdate " + xprdRange + " order by vdd,vchnum,srno";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Day_Book", "std_Day_Book", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            //--------------------merged by suman...new reports(finance module).........23/06/2021-----
            case "MPAY"://MONTH WISE PAYMENT REPORT
                SQuery = "select 'Month Wise Bank Wise Payment Report' as Header,'" + fromdt + "' as Fromdt,'" + todt + "' as Todt,(a.rcode||a.Month_Name) as Bank_Name,a.rcode,a.Month_Name,a.acode,d.aname as account_name,c.aname,MAX(C.ADDR1) AS ADDR1,sum(ytd) as ytdd from (Select to_char(vchdate,'YYYY MONTH') as Month_Name,branchcd,rcode,acode,0 as today,0 as mtd,sum(dramt-cramt) as ytd from voucher where branchcd!='88' and branchcd='" + frm_mbr + "' and substr(type,1,1)='2'  AND SUBSTR(TRIM(ACODE),1,2) NOT IN('12','03')  AND vchdate " + xprdRange + "  group by to_char(vchdate,'YYYY MONTH'),branchcd,rcode,acode)a,type b , famst c,famst d where trim(a.acode)=trim(c.acode) and  trim(a.rcode)=trim(d.acode) and id='B'  and a.branchcd=b.type1 group by a.rcode,a.Month_Name,a.acode,d.aname,c.aname order by a.Month_Name,a.rcode,c.ANAME"; //and substr(acode,1,2) in('05','06','04','65','07','41','08','00')
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Month_Wise_Payment_Rpt", "Month_Wise_Payment_Rpt", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;
            case "MCOL"://MONTH WISE COLLECTION REPORT
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL4");
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                if (mq1 == "N")
                {
                    SQuery = "Select 'Month Wise Bank Wise Collection Report' as Header,'" + fromdt + "' as Fromdt,'" + todt + "' as Todt,a.rcode||to_char(vchdate,'YYYY MONTH') AS BANK_NAME, a.acode,b.aname,b.addr1,a.rcode,c.aname as Account_Name,sum(cramt)-sum(Dramt) as YTDD,to_char(vchdate,'YYYY MONTH') AS MONTH_NAME from voucher a , famst b , famst c where trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode)  and a.branchcd!='88' and a.vchdate between to_date('" + fromdt + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy') and substr(a.type,1,1)='1' and substr(a.acode,1,2) IN('16','18')  group by a.rcode,to_char(vchdate,'YYYY MONTH'),c.aname,a.acode,b.aname,b.addr1 order  by aname,acode"; //and substr(acode,1,2) in('05','06','04','65','07','41','08','00') and b.bssch='" + mq0 + "'
                }
                else
                {
                    SQuery = "Select 'Month Wise Bank Wise Collection Report' as Header,'" + fromdt + "' as Fromdt,'" + todt + "' as Todt,a.rcode||to_char(vchdate,'YYYY MONTH') AS BANK_NAME, a.acode,b.aname,b.addr1,a.rcode,c.aname as Account_Name,sum(cramt)-sum(Dramt) as YTDD,to_char(vchdate,'YYYY MONTH') AS MONTH_NAME from voucher a , famst b , famst c where trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode)  and a.branchcd!='88' and a.vchdate between to_date('" + fromdt + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy') and substr(a.type,1,1)='1' and substr(a.acode,1,2) IN('16','18') and b.bssch='" + mq0 + "' group by a.rcode,to_char(vchdate,'YYYY MONTH'),c.aname,a.acode,b.aname,b.addr1 order  by aname,acode"; //and substr(acode,1,2) in('05','06','04','65','07','41','08','00')
                }
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Month_Wise_Collection_Rpt", "Month_Wise_Collection_Rpt", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "SCOL"://SALE WISE PAYMENT REPORT
                SQuery = "select 'Sales Person Wise Party Wise Sales,Collection Report' as Header,'" + fromdt + "' as Fromdt,'" + todt + "' as Todt,c.name as bank_name,b.bssch,c.name,a.acode,b.aname,sum(a.rcpt) as rcpt,sum(a.sale) as sale from (select acode,nvl(cramt,0) as rcpt,0 as sale from voucher where branchcd='" + frm_mbr + "' and substr(type,1,1)='1' and vchdate " + xprdRange + " union all select acode,0 as rcpt,nvl(dramt,0) as sale from voucher where branchcd='" + frm_mbr + "' and substr(type,1,1)='4' and vchdate " + xprdRange + ") a , famst b , typegrp c where trim(a.acode)=trim(b.acode) and trim(b.bssch)=trim(c.type1) and c.id='A' and substr(c.type1,1,2)='16'  group by b.bssch,c.name,a.acode,b.aname order by name,aname";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Sale_Wise_Payment_Rpt", "Sale_Wise_Payment_Rpt", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "FGVAL"://FG VALUATION REPORT


                phm.Columns.Add(new DataColumn("Header_n", typeof(string)));
                phm.Columns.Add(new DataColumn("TypeofRpt", typeof(string)));
                phm.Columns.Add(new DataColumn("Fromdt", typeof(DateTime)));
                phm.Columns.Add(new DataColumn("Todt", typeof(DateTime)));
                phm.Columns.Add(new DataColumn("Grp", typeof(string)));
                phm.Columns.Add(new DataColumn("Item_Grp", typeof(string)));
                phm.Columns.Add(new DataColumn("icode", typeof(string)));
                phm.Columns.Add(new DataColumn("iname", typeof(string)));
                phm.Columns.Add(new DataColumn("rack", typeof(string)));
                phm.Columns.Add(new DataColumn("Unit", typeof(string)));
                phm.Columns.Add(new DataColumn("stock", typeof(double)));
                phm.Columns.Add(new DataColumn("Item_rate", typeof(double)));
                phm.Columns.Add(new DataColumn("Inv_rate", typeof(double)));
                phm.Columns.Add(new DataColumn("SO_rate", typeof(double)));
                phm.Columns.Add(new DataColumn("Avg_sale_price_rate", typeof(double)));
                phm.Columns.Add(new DataColumn("value_Item_rate", typeof(double)));
                phm.Columns.Add(new DataColumn("value_Inv_rate", typeof(double)));
                phm.Columns.Add(new DataColumn("value_SO_rate", typeof(double)));
                phm.Columns.Add(new DataColumn("value_Avg_sale_price_rate", typeof(double)));

                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL4");

                if (mq0 == "SC") header_n = "F.G Valuation(Item Master)";
                else if (mq0 == "LI") header_n = "F.G Valuation(Latest Selling Price)(100%)";
                else if (mq0 == "LO") header_n = "F.G Valuation(Latest Order Price)(100%)";
                else header_n = "F.G Valuation(Avg Selling Price)(100%)";


                SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,d.type1,D.NAME,c.irate,trim(a.icode) as icode,c.iname,c.unit,sum(a.opening) as opening,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as closing   from (Select icode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal  where branchcd='" + frm_mbr + "' and substr(icode,1,1)='9' union all select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate between to_date('" + fromdt + "','dd/MM/yyyy') and to_Date('" + fromdt + "','dd/MM/yyyy')-1 and store='Y' and substr(icode,1,1)='9' GROUP BY ICODE union all  select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate between to_date('" + fromdt + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  and store='Y' and substr(icode,1,1)='9' GROUP BY ICODE ) a, item c ,TYPE D  where SUBSTR(TRIM(A.ICODE),1,2)=TRIM(D.TYPE1) AND D.ID='Y' AND D.TYPE1 LIKE '9%' AND trim(A.icode)=trim(c.icodE) and length(trim(a.icode))>4 group by d.type1,D.NAME,c.irate,trim(a.icode),c.iname,c.unit having sum(a.opening)+sum(a.cdr)-sum(a.ccr)<>0  order by D.type1,icode";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                SQuery = "select irate,icode,orddt  from somas where branchcd='" + frm_mbr + "' and substr(trim(icode),1,1)='9' and length(trim(icode))>4 and type like '4%'  order by orddt desc";
                dt2 = new DataTable();
                dt2 = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                SQuery = "select irate,icode from ivoucher where  branchcd='" + frm_mbr + "' and type like '4%'  and substr(icode,1,1)='9'  and store='Y' and vchdate " + xprdRange + " order by vchdate desc";
                dt3 = new DataTable();
                dt3 = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                SQuery = "select sum(nvl(iamount,0)) as avgamt,sum(nvl(iqtyout,0)) as avgqty ,icode from ivoucher where  branchcd='" + frm_mbr + "' and type like '4%'  and substr(icode,1,1)='9'  and store='Y' and vchdate " + xprdRange + "  group by icode";
                dt4 = new DataTable();
                dt4 = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        double So_irate = fgen.make_double(fgen.seek_iname_dt(dt2, "trim(icode)='" + dt.Rows[i]["icode"].ToString().Trim() + "'", "irate").ToString());
                        double Inv_irate = fgen.make_double(fgen.seek_iname_dt(dt3, "trim(icode)='" + dt.Rows[i]["icode"].ToString().Trim() + "'", "irate").ToString());
                        double avg_sp_amt = fgen.make_double(fgen.seek_iname_dt(dt4, "trim(icode)='" + dt.Rows[i]["icode"].ToString().Trim() + "'", "avgamt").ToString());
                        double avg_sp_qty = fgen.make_double(fgen.seek_iname_dt(dt4, "trim(icode)='" + dt.Rows[i]["icode"].ToString().Trim() + "'", "avgqty").ToString());
                        double avg_sp_rate = 0;
                        if (avg_sp_amt > 0)
                            avg_sp_rate = avg_sp_amt / avg_sp_qty;
                        else
                            avg_sp_rate = 0;

                        dr1 = phm.NewRow();
                        dr1["TypeofRpt"] = mq0;
                        dr1["Header_n"] = header_n;
                        dr1["Fromdt"] = fromdt;
                        dr1["Todt"] = todt;
                        dr1["Grp"] = dt.Rows[i]["type1"].ToString().Trim();
                        dr1["Item_Grp"] = dt.Rows[i]["type1"].ToString().Trim() + " " + dt.Rows[i]["NAME"].ToString().Trim();
                        dr1["icode"] = dt.Rows[i]["icode"].ToString().Trim();
                        dr1["iname"] = dt.Rows[i]["iname"].ToString().Trim();
                        dr1["rack"] = "-";
                        dr1["Unit"] = dt.Rows[i]["unit"].ToString().Trim();
                        dr1["stock"] = fgen.make_double(dt.Rows[i]["closing"].ToString().Trim());
                        dr1["Item_rate"] = fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());
                        if (Inv_irate == 0)
                        {
                            dr1["Inv_rate"] = fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());
                        }
                        else
                        {
                            dr1["Inv_rate"] = Inv_irate;
                        }
                        if (So_irate == 0)
                        {
                            dr1["SO_rate"] = fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());
                        }
                        else
                        {
                            dr1["SO_rate"] = So_irate;
                        }

                        if (avg_sp_rate == 0)
                        {
                            dr1["Avg_sale_price_rate"] = fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());
                        }
                        else
                        {
                            dr1["Avg_sale_price_rate"] = avg_sp_rate;
                        }

                        dr1["value_Item_rate"] = fgen.make_double(dt.Rows[i]["closing"].ToString().Trim()) * fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());

                        if (Inv_irate == 0)
                        {
                            dr1["value_Inv_rate"] = fgen.make_double(dt.Rows[i]["closing"].ToString().Trim()) * fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());
                        }
                        else
                        {
                            dr1["value_Inv_rate"] = fgen.make_double(dt.Rows[i]["closing"].ToString().Trim()) * Inv_irate;
                        }

                        if (So_irate == 0)
                        {
                            dr1["value_SO_rate"] = fgen.make_double(dt.Rows[i]["closing"].ToString().Trim()) * fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());
                        }
                        else
                        {
                            dr1["value_SO_rate"] = fgen.make_double(dt.Rows[i]["closing"].ToString().Trim()) * So_irate;
                        }

                        if (avg_sp_rate == 0)
                        {
                            dr1["value_Avg_sale_price_rate"] = fgen.make_double(dt.Rows[i]["closing"].ToString().Trim()) * fgen.make_double(dt.Rows[i]["irate"].ToString().Trim());
                        }
                        else
                        {
                            dr1["value_Avg_sale_price_rate"] = fgen.make_double(dt.Rows[i]["closing"].ToString().Trim()) * avg_sp_rate;
                        }

                        phm.Rows.Add(dr1);
                    }

                    phm.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(phm, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "FG_Val_Rpt", "FG_Val_Rpt", dsRep, header_n);

                }

                else
                {
                    data_found = "N";
                }


                break;

            case "CRYRLR"://CROSS YEAR LEDGER REPORT------------
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL4");
                SQuery = "select 'Cross Year Ledger' as Header,'" + fromdt + "' as Fromdt,'" + todt + "' as Todt,d.vchnum||to_char(d.vchdate,'dd/mm/yyyy') as fstr,d.*,b.aname,b.addr1,b.addr2,b.addr3,b.gst_no,b.email2,c.aname as account_name,e.yr_" + frm_myear + " as opening,(case when type='40' then 'Sale(40)' else 'Rcpt(12)' end) as type_desc from (select a.vchnum,a.vchdate,a.acode,a.rcode,a.type,sum(nvl(a.dramt,0)) as dramt,sum(nvl(a.cramt,0)) as cramt,max(a.naration) as naration,max(a.refnum) as refnum,max(a.refdate) as refdate,max(a.invno) as invno,max(a.invdate) as invdate from voucher a where  a.branchcd='" + frm_mbr + "' and a.type in ('40','12') and a.vchdate " + xprdRange + " and trim(a.acode)='" + mq0 + "' group by a.vchnum,a.vchdate,a.acode,a.rcode,a.type order by a.vchdate,a.type) d  , famst b , famst c,famstbal e where trim(d.acode)=trim(b.acode) and trim(d.rcode)=trim(c.acode) and trim(d.acode)=trim(e.acode)  order by d.vchdate,d.type";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.Columns.Add(new DataColumn("Balance", typeof(double)));
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        double op = fgen.make_double(dt.Rows[i]["opening"].ToString().Trim());
                        double dramt = fgen.make_double(dt.Rows[i]["dramt"].ToString().Trim());
                        double cramt = fgen.make_double(dt.Rows[i]["cramt"].ToString().Trim());

                        if (i == 0) bal = op + dramt - cramt;
                        else bal = bal + dramt - cramt;
                        dt.Rows[i]["Balance"] = fgen.make_double(bal.ToString());

                    }
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Cross_Yr_Ledger_Rpt", "Cross_Yr_Ledger_Rpt", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;
            case "ACSTAT"://A/C STATEMENT REPORT
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL4");
                SQuery = "select 'Statement of Account' as Header,'" + fromdt + "' as Fromdt,'" + todt + "' as Todt,a.vchnum||to_char(a.vchdate,'dd/mm/yyyy') as fstr,(case when type='50' then 'P/S.V(50)' else 'Pymt(21)' end) as Type_Desc ,a.*,c.aname as Account_Name,b.aname,b.addr1,b.addr2,b.addr3,b.gst_no,b.email2,b.telnum,b.girno,(select SUM(NVL(CRAMT,0)-NVL(DRAMT,0)) from voucher d where d.branchcd in ('" + frm_mbr + "')  AND d.VCHDATE BETWEEN TO_DATE('" + Convert.ToDateTime(frm_cDt1).AddYears(-1).ToShortDateString() + "','DD/MM/YYYY') AND TO_DATE('" + Convert.ToDateTime(frm_cDt2).AddYears(-1).ToShortDateString() + "','DD/MM/YYYY') AND d.TYPE LIKE '5%' and trim(d.acode)='" + mq0 + "') as closing  from (select vchnum,vchdate,acode,rcode,type,SUM(NVL(CRAMT,0)) AS CRAMT,SUM(NVL(DRAMT,0)) AS DRAMT,max(naration) as naration, max(refnum) as refnum, max(refdate) as refdate, max(invno) as invno, max(invdate) as invdate from voucher where branchcd in ('" + frm_mbr + "')  AND VCHDATE " + xprdRange + " AND TYPE LIKE '5%' and trim(acode)='" + mq0 + "' GROUP BY VCHNUM,VCHDATE,acode,rcode,type UNION ALL select VCHNUM,VCHDATE,acode,rcode,type,SUM(NVL(CRAMT,0)) AS CRAMT,SUM(NVL(DRAMT,0)) AS DRAMT,max(naration) as naration, max(refnum) as refnum, max(refdate) as refdate, max(invno) as invno, max(invdate) as invdate from voucher where branchcd in ('" + frm_mbr + "')  AND VCHDATE " + xprdRange + " AND TYPE LIKE '2%' and trim(acode)='" + mq0 + "' GROUP BY VCHNUM,VCHDATE,acode,rcode,type) a , famst b,famst c where trim(a.acode)=trim(b.acode) and trim(a.rcode)=trim(c.acode) order by vchdate";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {

                    dt.Columns.Add(new DataColumn("Balance", typeof(double)));
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        double op = fgen.make_double(dt.Rows[i]["closing"].ToString().Trim());
                        double dramt = fgen.make_double(dt.Rows[i]["dramt"].ToString().Trim());
                        double cramt = fgen.make_double(dt.Rows[i]["cramt"].ToString().Trim());

                        if (i == 0) bal = op - dramt + cramt;
                        else bal = bal - dramt + cramt;
                        dt.Rows[i]["Balance"] = fgen.make_double(bal.ToString());

                    }
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Ac_statement", "Ac_statement", dsRep, header_n);
                }
                break;

            case "STKLEG"://stock ledger
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR1");//item group
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR2");//item Sub group
                mq2 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3");//item Start From
                mq3 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR4");//item End To

                if (mq0.Length > 1) cond = " and substr(trim(a.icode),1,2)='" + mq0 + "'";
                else cond = "";
                if (mq1.Length > 2) mq4 = " and substr(trim(a.icode),1,4)='" + mq1 + "'";
                else mq4 = "";
                if (mq2.Length > 2) cond1 = " and trim(a.icode) between '" + mq2 + "' and '" + mq3 + "'";
                else cond1 = "";

                SQuery = "select 'Cross Year Stock Ledger' as Header,'" + fromdt + "' as Fromdt,'" + todt + "' as Todt,a.vchnum||to_char(a.vchdate,'dd/mm/yyyy') as fstr,a.vchnum,a.icode,c.iname,c.cpartno,c.unit,a.vchdate,a.desc_,a.invno,a.invdate,a.o_deptt,a.acode,d.aname,(case when trim(a.acode)='11' then 'PRODUCTION FINISH ENTRY' else '' end) as aname_prod,a.iqtyin,a.iqtyout,a.bal,a.imin,a.imax,a.iord,type from (select NULL AS VCHNUM,icode,NULL AS VCHDATE,NULL AS DESC_,NULL AS INVNO, NULL AS INVDATE,NULL AS O_DEPTT,NULL AS ACODE,0 AS IQTYIN,0 AS IQTYOUT , yr_" + frm_myear + " as bal,imin,imax,iord,null as type  from itembal where BRANCHCD='" + frm_mbr + "' union all select vchnum,icode,vchdate,desc_,invno,invdate,o_deptt,acode,iqtyin,iqtyout,0 AS BAL,0 AS IMIN,0 AS IMAX,0 AS IORD,type from ivoucher where branchcd='" + frm_mbr + "' and vchdate " + xprdRange + " and store='Y' ) a left join famst d on  trim(a.acode)=trim(d.acode) ,item c  where trim(a.icode)=trim(c.icode) " + cond + " " + cond1 + " " + mq4 + " AND LENGTH(TRIM(A.ICODE))>4  order by a.icode,vchdate,type";//AND SUBSTR(TRIM(A.ICODE),1,2)='90' order by a.icode,type,vchnum,vchdate
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt1 = new DataTable();
                string icode = "";
                DataView view1imm = new DataView(dt);
                DataTable dtdrsimm = new DataTable();
                dtdrsimm = view1imm.ToTable(true, "ICODE"); //MAIN   

                ph_tbl = new DataTable();
                ph_tbl.Columns.Add("Header", typeof(string));
                ph_tbl.Columns.Add("Fromdt", typeof(string));
                ph_tbl.Columns.Add("Todt", typeof(string));
                ph_tbl.Columns.Add("fstr", typeof(string));
                ph_tbl.Columns.Add("vchnum", typeof(string));
                ph_tbl.Columns.Add("vchdate", typeof(DateTime));
                ph_tbl.Columns.Add("icode", typeof(string));
                ph_tbl.Columns.Add("iname", typeof(string));
                ph_tbl.Columns.Add("cpartno", typeof(string));
                ph_tbl.Columns.Add("unit", typeof(string));
                ph_tbl.Columns.Add("desc_", typeof(string));
                ph_tbl.Columns.Add("invno", typeof(string));
                ph_tbl.Columns.Add("invdate", typeof(DateTime));
                ph_tbl.Columns.Add("o_deptt", typeof(string));
                ph_tbl.Columns.Add("acode", typeof(string));
                ph_tbl.Columns.Add("aname", typeof(string));
                ph_tbl.Columns.Add("aname_prod", typeof(string));
                ph_tbl.Columns.Add("iqtyin", typeof(double));
                ph_tbl.Columns.Add("iqtyout", typeof(double));
                ph_tbl.Columns.Add("bal", typeof(double));
                ph_tbl.Columns.Add("imin", typeof(string));
                ph_tbl.Columns.Add("imax", typeof(string));
                ph_tbl.Columns.Add("iord", typeof(string));
                ph_tbl.Columns.Add("type", typeof(string));
                ph_tbl.Columns.Add("balance", typeof(double));

                if (dt.Rows.Count > 0)
                {

                    foreach (DataRow dr0 in dtdrsimm.Rows)
                    {

                        DataView viewim = new DataView(dt, "ICODE='" + dr0["ICODE"] + "'", "", DataViewRowState.CurrentRows);
                        dt1 = new DataTable();
                        dt1 = viewim.ToTable();
                        for (int i = 0; i < dt1.Rows.Count; i++)
                        {
                            double itembal = fgen.make_double(fgen.seek_iname(frm_qstr, frm_cocd, "select yr_" + frm_myear + " from itembal where branchcd='" + frm_mbr + "' and trim(icode)='" + dt1.Rows[i]["icode"].ToString().Trim() + "'", "yr_" + frm_myear + ""));
                            dr1 = ph_tbl.NewRow();
                            dr1["Header"] = dt1.Rows[i]["Header"].ToString().Trim();
                            dr1["Fromdt"] = dt1.Rows[i]["Fromdt"].ToString().Trim();
                            dr1["Todt"] = dt1.Rows[i]["Todt"].ToString().Trim();
                            dr1["fstr"] = dt1.Rows[i]["fstr"].ToString().Trim();
                            dr1["vchnum"] = dt1.Rows[i]["vchnum"].ToString().Trim();
                            if (dt1.Rows[i]["vchdate"].ToString().Trim().Length > 2)
                                dr1["vchdate"] = dt1.Rows[i]["vchdate"].ToString().Trim();
                            else
                                dr1["vchdate"] = Convert.ToDateTime(frm_cDt1).ToShortDateString();
                            dr1["icode"] = dt1.Rows[i]["icode"].ToString().Trim();
                            dr1["iname"] = dt1.Rows[i]["iname"].ToString().Trim();
                            dr1["cpartno"] = dt1.Rows[i]["cpartno"].ToString().Trim();
                            dr1["unit"] = dt1.Rows[i]["unit"].ToString().Trim();
                            dr1["desc_"] = dt1.Rows[i]["desc_"].ToString().Trim();
                            dr1["invno"] = dt1.Rows[i]["invno"].ToString().Trim();
                            if (dt1.Rows[i]["invdate"].ToString().Trim().Length > 2)
                                dr1["invdate"] = dt1.Rows[i]["invdate"].ToString().Trim();
                            else
                                dr1["invdate"] = Convert.ToDateTime(frm_cDt1).ToShortDateString();
                            dr1["o_deptt"] = dt1.Rows[i]["o_deptt"].ToString().Trim();
                            dr1["acode"] = dt1.Rows[i]["acode"].ToString().Trim();
                            dr1["aname"] = dt1.Rows[i]["aname"].ToString().Trim();
                            if (dt1.Rows[i]["aname_prod"].ToString().Trim() == "") dr1["aname_prod"] = "-";
                            else dr1["aname_prod"] = dt1.Rows[i]["aname_prod"].ToString().Trim();
                            dr1["iqtyin"] = fgen.make_double(dt1.Rows[i]["iqtyin"].ToString().Trim());
                            dr1["iqtyout"] = fgen.make_double(dt1.Rows[i]["iqtyout"].ToString().Trim());
                            dr1["bal"] = itembal;
                            if (dt1.Rows[i]["imin"].ToString().Trim() == "0") dr1["imin"] = "N/A";
                            else dr1["imin"] = dt1.Rows[i]["imin"].ToString().Trim();
                            if (dt1.Rows[i]["imax"].ToString().Trim() == "0") dr1["imax"] = "N/A";
                            else dr1["imax"] = dt1.Rows[i]["imax"].ToString().Trim();
                            if (dt1.Rows[i]["iord"].ToString().Trim() == "0") dr1["iord"] = "N/A";
                            else dr1["iord"] = dt1.Rows[i]["iord"].ToString().Trim();
                            if (dt1.Rows[i]["type"].ToString().Trim() == "") dr1["type"] = "-";
                            else dr1["type"] = dt1.Rows[i]["type"].ToString().Trim();

                            double op = itembal;
                            double dramt = fgen.make_double(dt1.Rows[i]["iqtyout"].ToString().Trim());
                            double cramt = fgen.make_double(dt1.Rows[i]["iqtyin"].ToString().Trim());

                            if (i == 0) bal = op + cramt - dramt;
                            else bal = bal + cramt - dramt;
                            dr1["balance"] = bal;

                            ph_tbl.Rows.Add(dr1);
                        }
                    }

                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(ph_tbl, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Cross_Year_Stock_Ledger", "Cross_Year_Stock_Ledger", dsRep, header_n);
                }

                break;

            //-------------------end---------------------------------------------------
            case "F70231":
            case "F70232":
            case "F70233":
            case "F70234":
            case "F70235":
            case "F70236":
                string base_type = "-";
                switch (iconID)
                {
                    case "F70231":
                        base_type = "1";
                        mq0 = "Rcpt";
                        break;
                    case "F70232":
                        base_type = "2";
                        mq0 = "Pay";
                        break;
                    case "F70233":
                        base_type = "3";
                        mq0 = "Jrnl";
                        break;
                    case "F70235":
                        base_type = "4";
                        //exclVty = " or a.type in ('65')";
                        mq0 = "Sale";
                        break;
                    case "F70234":
                        base_type = "5";
                        mq0 = "Purchase";
                        break;
                    case "F70236":
                        base_type = "10";
                        mq0 = "Cash";
                        break;

                }

                header_n = mq0 + " Day Book";

                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                part_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE");
                string type_var = "-";
                if (party_cd.Trim().Length <= 1)
                {
                    type_var = "substr(type,1,1) like '" + base_type + "%'";
                }
                else
                {
                    type_var = "type in (" + party_cd + ")";
                }

                if (mq0 == "Cash")
                {
                    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.type||'-'||a.vchnum as vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,a.naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt,a.vchnum as refn,b.Grp  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and (type='10' or type='20') and a.vchdate " + xprdRange + "  order by vdd,a.vchnum,type,refn,srno";
                }
                else
                {
                    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.type||'-'||a.vchnum as vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,a.naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt,a.vchnum as refn,b.Grp  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and " + type_var + " and a.vchdate " + xprdRange + " order by vdd,a.vchnum,type,refn,srno";
                }

                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Day_Book", "std_Day_Book", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            ////case "F70232"://SET NO PRINTER
            ////    header_n = "Payment Day Book";
            ////    mq0 = "Pay";
            ////    mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_VTY");
            ////    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,a.naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type ='" + mq1 + "' and a.vchdate " + xprdRange + " order by vdd,vchnum,srno";
            ////    dt = new DataTable();
            ////    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
            ////    if (dt.Rows.Count > 0)
            ////    {
            ////        dt.TableName = "Prepcur";
            ////        dsRep.Tables.Add(fgen.mTitle(dt, repCount));
            ////        Print_Report_BYDS(frm_cocd, frm_mbr, "std_Day_Book", "std_Day_Book", dsRep, header_n);
            ////    }
            ////    else
            ////    {
            ////        data_found = "N";
            ////    }
            ////    break;

            ////case "F70233"://SET NO PRINTER
            ////    header_n = "Journal Day Book";
            ////    mq0 = "Jrnl";
            ////    mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_VTY");
            ////    //SQuery="select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd mon') as vchdate,to_char(a.vchdate,'yyyymmdd') as vch,a.acode,a.dramt ,a.cramt,a.naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type in ('" + mq1 + "') and a.vchdate " + xprdRange + " order by vch,vchnum,srno";
            ////    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,a.naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type='" + mq1 + "' and a.vchdate " + xprdRange + " order by vdd,vchnum,srno";
            ////    dt = new DataTable();
            ////    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
            ////    if (dt.Rows.Count > 0)
            ////    {
            ////        dt.TableName = "Prepcur";
            ////        dsRep.Tables.Add(fgen.mTitle(dt, repCount));
            ////        Print_Report_BYDS(frm_cocd, frm_mbr, "std_Day_Book", "std_Day_Book", dsRep, header_n);
            ////    }
            ////    else
            ////    {
            ////        data_found = "N";
            ////    }
            ////    break;

            ////case "F70234":
            ////    #region Sales Day Book
            ////    header_n = "Sales Day Book";
            ////    mq0 = "sale";
            ////    mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Col1");
            ////    if (mq1 == "YES")
            ////    {
            ////        SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,'Sale Bill No '||a.invno||' Dt.'||to_char(a.invdate,'dd/mm/yyyy')||' '||a.naration as naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type LIKE '4%' and a.vchdate " + xprdRange + " order by vdd,vchnum,srno";
            ////    }
            ////    if (mq1 == "NO")
            ////    {
            ////        SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,'Sale Bill No '||a.invno||' Dt.'||to_char(a.invdate,'dd/mm/yyyy')||' '||a.naration as naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type ='" + frm_vty + "' and a.vchdate " + xprdRange + " order by vdd,vchnum,srno";
            ////    }
            ////    dt = new DataTable();
            ////    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
            ////    if (dt.Rows.Count > 0)
            ////    {
            ////        dt.TableName = "Prepcur";

            ////        dsRep.Tables.Add(fgen.mTitle(dt, repCount));
            ////        Print_Report_BYDS(frm_cocd, frm_mbr, "std_Day_Book", "std_Day_Book", dsRep, header_n);
            ////    }
            ////    else
            ////    {
            ////        data_found = "N";
            ////    }
            ////    #endregion
            ////    break;

            ////case "F70235"://SET NO PRINTER
            ////    header_n = "Purchase Day Book";
            ////    mq0 = "PUR";
            ////    mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_VTY");
            ////    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,'Bill No '||a.invno||' Dt. '||to_char(a.invdate,'dd/mm/yyyy')||' '||a.naration as naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type ='" + mq1 + "' and a.vchdate " + xprdRange + " order by vdd,vchnum,srno";
            ////    dt = new DataTable();
            ////    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
            ////    if (dt.Rows.Count > 0)
            ////    {
            ////        dt.TableName = "Prepcur";
            ////        dsRep.Tables.Add(fgen.mTitle(dt, repCount));
            ////        Print_Report_BYDS(frm_cocd, frm_mbr, "std_Day_Book", "std_Day_Book", dsRep, header_n);
            ////    }
            ////    else
            ////    {
            ////        data_found = "N";
            ////    }
            ////    break;

            ////case "F70236":
            ////    header_n = "Cash Day Book";
            ////    mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_VTY");
            ////    if (mq1 == "10")
            ////    {
            ////        mq0 = "Rcpt";
            ////    }
            ////    else
            ////    {
            ////        mq0 = "Pymt";
            ////    }
            ////    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,a.naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type ='" + mq1 + "' and a.vchdate " + xprdRange + " order by vdd,vchnum,srno";
            ////    dt = new DataTable();
            ////    dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
            ////    if (dt.Rows.Count > 0)
            ////    {
            ////        dt.TableName = "Prepcur";
            ////        dsRep.Tables.Add(fgen.mTitle(dt, repCount));
            ////        Print_Report_BYDS(frm_cocd, frm_mbr, "std_Day_Book", "std_Day_Book", dsRep, header_n);
            ////    }
            ////    else
            ////    {
            ////        data_found = "N";
            ////    }
            ////    break;

            case "F70229":
                header_n = "PROFIT AND LOSS MONTHLY TREND";
                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                string h1 = "", h2 = "", h3 = "", h4 = "", h5 = "", h6 = "", h7 = "", h8 = "", h9 = "", h10 = "", h11 = "", h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {

                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col2 = col2 + ", sum(a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + ") as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";
                        col3 = col3 + ", (Case when to_char(vchdate,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then dramt-cramt   else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }


                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col2.Length > 2) col2 = col2.TrimStart(',');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                if (frm_vty.Contains("%"))
                {
                    //SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,substr(trim(a.acode),0,2) as acc,c.name as accname,a.acode,b.aname,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select acode,(Case when to_char(vchdate,'mm')='04' then dramt-cramt   else 0 end) as Apr,(Case when to_char(vchdate,'mm')='05' then dramt-cramt   else 0 end) as may,(Case when to_char(vchdate,'mm')='06' then dramt-cramt   else 0 end) as jun,(Case when to_char(vchdate,'mm')='07' then dramt-cramt   else 0 end) as jul,(Case when to_char(vchdate,'mm')='08' then dramt-cramt   else 0 end) as aug,(Case when to_char(vchdate,'mm')='09' then dramt-cramt   else 0 end) as sep,(Case when to_char(vchdate,'mm')='10' then dramt-cramt   else 0 end) as oct,(Case when to_char(vchdate,'mm')='11' then dramt-cramt   else 0 end) as nov,(Case when to_char(vchdate,'mm')='12' then dramt-cramt   else 0 end) as dec,(Case when to_char(vchdate,'mm')='01' then dramt-cramt   else 0 end) as jan,(Case when to_char(vchdate,'mm')='02' then dramt-cramt   else   0 end) as feb,(Case when to_char(vchdate,'mm')='03' then dramt-cramt   else 0 end) as mar from VOUCHER where branchcd not in '88' and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C  where trim(a.acode)=trim(b.acode) and substr(trim(a.acode),0,2)=trim(c.type1) AND C.ID='Z' and substr(trim(a.acode),1,1)>='2' group by a.acode,b.aname,c.name order by acc,acode";
                    //SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,substr(trim(b.grp),1,2) as acc,c.name as accname,a.acode,b.aname,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select acode,(Case when to_char(vchdate,'mm')='04' then dramt-cramt   else 0 end) as Apr,(Case when to_char(vchdate,'mm')='05' then dramt-cramt   else 0 end) as may,(Case when to_char(vchdate,'mm')='06' then dramt-cramt   else 0 end) as jun,(Case when to_char(vchdate,'mm')='07' then dramt-cramt   else 0 end) as jul,(Case when to_char(vchdate,'mm')='08' then dramt-cramt   else 0 end) as aug,(Case when to_char(vchdate,'mm')='09' then dramt-cramt   else 0 end) as sep,(Case when to_char(vchdate,'mm')='10' then dramt-cramt   else 0 end) as oct,(Case when to_char(vchdate,'mm')='11' then dramt-cramt   else 0 end) as nov,(Case when to_char(vchdate,'mm')='12' then dramt-cramt   else 0 end) as dec,(Case when to_char(vchdate,'mm')='01' then dramt-cramt   else 0 end) as jan,(Case when to_char(vchdate,'mm')='02' then dramt-cramt   else   0 end) as feb,(Case when to_char(vchdate,'mm')='03' then dramt-cramt   else 0 end) as mar from VOUCHER where branchcd not in '88' and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C  where trim(a.acode)=trim(b.acode) and substr(trim(b.grp),1,2)=trim(c.type1) AND C.ID='Z' and substr(trim(b.grp),1,1)>='2' group by a.acode,substr(trim(b.grp),1,2),b.aname,c.name order by acc,acode";
                    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,substr(trim(b.grp),1,2) as acc,c.name as accname,a.acode,b.aname,sum(" + col1 + ") as total," + col2 + " from (select acode," + col3 + " from VOUCHER where branchcd not in '88' and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C  where trim(a.acode)=trim(b.acode) and substr(trim(b.grp),1,2)=trim(c.type1) AND C.ID='Z' and substr(trim(b.grp),1,1)>='2' group by a.acode,substr(trim(b.grp),1,2),b.aname,c.name order by acc,acode";
                }
                else
                {
                    //SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,substr(trim(a.acode),0,2) as acc,c.name as accname,a.acode,b.aname,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select acode,(Case when to_char(vchdate,'mm')='04' then dramt-cramt   else 0 end) as Apr,(Case when to_char(vchdate,'mm')='05' then dramt-cramt   else 0 end) as may,(Case when to_char(vchdate,'mm')='06' then dramt-cramt   else 0 end) as jun,(Case when to_char(vchdate,'mm')='07' then dramt-cramt   else 0 end) as jul,(Case when to_char(vchdate,'mm')='08' then dramt-cramt   else 0 end) as aug,(Case when to_char(vchdate,'mm')='09' then dramt-cramt   else 0 end) as sep,(Case when to_char(vchdate,'mm')='10' then dramt-cramt   else 0 end) as oct,(Case when to_char(vchdate,'mm')='11' then dramt-cramt   else 0 end) as nov,(Case when to_char(vchdate,'mm')='12' then dramt-cramt   else 0 end) as dec,(Case when to_char(vchdate,'mm')='01' then dramt-cramt   else 0 end) as jan,(Case when to_char(vchdate,'mm')='02' then dramt-cramt   else   0 end) as feb,(Case when to_char(vchdate,'mm')='03' then dramt-cramt   else 0 end) as mar from VOUCHER where branchcd in (" + frm_vty + ") and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C  where trim(a.acode)=trim(b.acode) and substr(trim(a.acode),0,2)=trim(c.type1) AND C.ID='Z' and substr(trim(a.acode),1,1)>='2' group by a.acode,b.aname,c.name order by acc,acode";
                    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,substr(trim(b.grp),1,2) as acc,c.name as accname,a.acode,b.aname,sum(" + col1 + ") as total," + col2 + " from (select acode," + col3 + " from VOUCHER where branchcd in (" + frm_vty + ") and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C  where trim(a.acode)=trim(b.acode) and substr(trim(b.grp),1,2)=trim(c.type1) AND C.ID='Z' and substr(trim(b.grp),1,1)>='2' group by a.acode,b.aname,c.name,substr(trim(b.grp),1,2) order by acc,acode";
                }
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_PL_Trend", "std_PL_Trend", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70230":
                header_n = "PROFIT AND LOSS QUARTERLY TREND";

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";
                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(vchdate,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then dramt-cramt   else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                    col2 = "sum(a." + h1 + " + a." + h2 + " + a." + h3 + ") as " + h1 + "_" + h3 + ",sum(a." + h4 + "+a." + h5 + "+a." + h6 + ") as " + h4 + "_" + h6 + ",sum(a." + h7 + "+a." + h8 + "+a." + h9 + ") as " + h7 + "_" + h9 + ",sum(a." + h10 + "+a." + h11 + "+a." + h12 + ") as " + h10 + "_" + h12 + "";

                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                if (frm_vty.Contains("%"))
                {
                    //SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, substr(trim(a.acode),0,2) as acc,c.name as accname,a.acode,b.aname,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr+a.may+a.jun) as APR_JUN,sum(a.jul+a.aug+a.sep) as JUL_sep,sum(a.oct+a.nov+a.dec) as OCT_dec,sum(a.jan+a.feb+a.mar) as JAN_mar  from (select acode,(Case when to_char(vchdate,'mm')='04' then dramt-cramt  else 0 end) as Apr,(Case when to_char(vchdate,'mm')='05' then dramt-cramt else 0 end) as may,(Case when to_char(vchdate,'mm')='06' then dramt-cramt else 0 end) as jun,(Case when to_char(vchdate,'mm')='07' then dramt-cramt else 0 end) as jul,(Case when to_char(vchdate,'mm')='08' then dramt-cramt else 0 end) as aug,(Case when to_char(vchdate,'mm')='09' then dramt-cramt else 0 end) as sep,(Case when to_char(vchdate,'mm')='10' then dramt-cramt else 0 end) as oct,(Case when to_char(vchdate,'mm')='11' then dramt-cramt else 0 end) as nov,(Case when to_char(vchdate,'mm')='12' then dramt-cramt else 0 end) as dec,(Case when to_char(vchdate,'mm')='01' then dramt-cramt else 0 end) as jan,(Case when to_char(vchdate,'mm')='02' then dramt-cramt else 0 end) as feb,(Case when to_char(vchdate,'mm')='03' then dramt-cramt else 0 end) as mar from VOUCHER where branchcd not in '88' and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C where trim(a.acode)=trim(b.acode) and substr(trim(a.acode),0,2)=trim(c.type1) AND C.ID='Z' and substr(trim(a.acode),1,1)>='2' group by a.acode,b.aname,c.name order by acc,acode";
                    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, substr(trim(b.grp),1,2) as acc,c.name as accname,a.acode,b.aname,sum(" + col1 + ") as total," + col2 + "  from (select acode," + col3 + " from VOUCHER where branchcd not in '88' and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C where trim(a.acode)=trim(b.acode) and substr(trim(b.grp),1,2)=trim(c.type1) AND C.ID='Z' and substr(trim(b.grp),1,2)>='2' group by a.acode,b.aname,c.name,substr(trim(b.grp),1,2) order by acc,acode";
                }
                else
                {
                    //get memvar of cdt1'
                    //make if loop that month(cdt1)="01" / "04'

                    //for 04 wala SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, substr(trim(a.acode),0,2) as acc,c.name as accname,a.acode,b.aname,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr+a.may+a.jun) as qtr1,sum(a.jul+a.aug+a.sep) as qtr2,sum(a.oct+a.nov+a.dec) as qtr3,sum(a.jan+a.feb+a.mar) as qtr4  from (select acode,(Case when to_char(vchdate,'mm')='04' then dramt-cramt  else 0 end) as Apr,(Case when to_char(vchdate,'mm')='05' then dramt-cramt else 0 end) as may,(Case when to_char(vchdate,'mm')='06' then dramt-cramt else 0 end) as jun,(Case when to_char(vchdate,'mm')='07' then dramt-cramt else 0 end) as jul,(Case when to_char(vchdate,'mm')='08' then dramt-cramt else 0 end) as aug,(Case when to_char(vchdate,'mm')='09' then dramt-cramt else 0 end) as sep,(Case when to_char(vchdate,'mm')='10' then dramt-cramt else 0 end) as oct,(Case when to_char(vchdate,'mm')='11' then dramt-cramt else 0 end) as nov,(Case when to_char(vchdate,'mm')='12' then dramt-cramt else 0 end) as dec,(Case when to_char(vchdate,'mm')='01' then dramt-cramt else 0 end) as jan,(Case when to_char(vchdate,'mm')='02' then dramt-cramt else 0 end) as feb,(Case when to_char(vchdate,'mm')='03' then dramt-cramt else 0 end) as mar from VOUCHER where branchcd in (" + frm_mbr + ") and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C where trim(a.acode)=trim(b.acode) and substr(trim(a.acode),0,2)=trim(c.type1) AND C.ID='Z' and substr(trim(a.acode),1,1)>='2' group by a.acode,b.aname,c.name order by acc,acode";
                    //for 01 wala SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, substr(trim(a.acode),0,2) as acc,c.name as accname,a.acode,b.aname,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr+a.may+a.jun) as qtr2,sum(a.jul+a.aug+a.sep) as qtr3,sum(a.oct+a.nov+a.dec) as qtr4,sum(a.jan+a.feb+a.mar) as qtr1  from (select acode,(Case when to_char(vchdate,'mm')='04' then dramt-cramt  else 0 end) as Apr,(Case when to_char(vchdate,'mm')='05' then dramt-cramt else 0 end) as may,(Case when to_char(vchdate,'mm')='06' then dramt-cramt else 0 end) as jun,(Case when to_char(vchdate,'mm')='07' then dramt-cramt else 0 end) as jul,(Case when to_char(vchdate,'mm')='08' then dramt-cramt else 0 end) as aug,(Case when to_char(vchdate,'mm')='09' then dramt-cramt else 0 end) as sep,(Case when to_char(vchdate,'mm')='10' then dramt-cramt else 0 end) as oct,(Case when to_char(vchdate,'mm')='11' then dramt-cramt else 0 end) as nov,(Case when to_char(vchdate,'mm')='12' then dramt-cramt else 0 end) as dec,(Case when to_char(vchdate,'mm')='01' then dramt-cramt else 0 end) as jan,(Case when to_char(vchdate,'mm')='02' then dramt-cramt else 0 end) as feb,(Case when to_char(vchdate,'mm')='03' then dramt-cramt else 0 end) as mar from VOUCHER where branchcd in (" + frm_mbr + ") and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C where trim(a.acode)=trim(b.acode) and substr(trim(a.acode),0,2)=trim(c.type1) AND C.ID='Z' and substr(trim(a.acode),1,1)>='2' group by a.acode,b.aname,c.name order by acc,acode";

                    //SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, substr(trim(a.acode),0,2) as acc,c.name as accname,a.acode,b.aname,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr+a.may+a.jun) as APR_JUN,sum(a.jul+a.aug+a.sep) as JUL_sep,sum(a.oct+a.nov+a.dec) as OCT_dec,sum(a.jan+a.feb+a.mar) as JAN_mar  from (select acode,(Case when to_char(vchdate,'mm')='04' then dramt-cramt  else 0 end) as Apr,(Case when to_char(vchdate,'mm')='05' then dramt-cramt else 0 end) as may,(Case when to_char(vchdate,'mm')='06' then dramt-cramt else 0 end) as jun,(Case when to_char(vchdate,'mm')='07' then dramt-cramt else 0 end) as jul,(Case when to_char(vchdate,'mm')='08' then dramt-cramt else 0 end) as aug,(Case when to_char(vchdate,'mm')='09' then dramt-cramt else 0 end) as sep,(Case when to_char(vchdate,'mm')='10' then dramt-cramt else 0 end) as oct,(Case when to_char(vchdate,'mm')='11' then dramt-cramt else 0 end) as nov,(Case when to_char(vchdate,'mm')='12' then dramt-cramt else 0 end) as dec,(Case when to_char(vchdate,'mm')='01' then dramt-cramt else 0 end) as jan,(Case when to_char(vchdate,'mm')='02' then dramt-cramt else 0 end) as feb,(Case when to_char(vchdate,'mm')='03' then dramt-cramt else 0 end) as mar from VOUCHER where branchcd in (" + frm_mbr + ") and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C where trim(a.acode)=trim(b.acode) and substr(trim(a.acode),0,2)=trim(c.type1) AND C.ID='Z' and substr(trim(a.acode),1,1)>='2' group by a.acode,b.aname,c.name order by acc,acode";
                    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, substr(trim(b.grp),1,2) as acc,c.name as accname,a.acode,b.aname,sum(" + col1 + ") as total," + col2 + "  from (select acode," + col3 + " from VOUCHER where branchcd in (" + frm_mbr + ") and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C where trim(a.acode)=trim(b.acode) and substr(trim(b.grp),1,2)=trim(c.type1) AND C.ID='Z' and substr(trim(b.grp),1,2)>='2' group by a.acode,b.aname,c.name,substr(trim(b.grp),1,2) order by acc,acode";
                }
                dt = new DataTable();

                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));

                if (dt.Rows.Count > 0)
                {

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1 + "_" + h3;
                        dt.Rows[i]["mth1"] = h4 + "_" + h6;
                        dt.Rows[i]["mth2"] = h7 + "_" + h9;
                        dt.Rows[i]["mth3"] = h10 + "_" + h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + "_" + h3 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h4 + "_" + h6 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h7 + "_" + h9 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h10 + "_" + h12 + ""].ToString());
                    }

                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_PL_Trend_Qtr", "std_PL_Trend_Qtr", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;


            case "F70136":
                header_n = "Cheque Issue Register";//// set no printer
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_VTY");
                //original query    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, c.aname as party,b.name as acname,a.type,a.acode,a.rcode,a.dramt,a.cramt,a.naration as rmk,a.refnum,to_char(a.refdate,'dd/mm/yyyy') as refdt,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.bank_date,a.ent_by,a.ent_date,a.srno,a.tfccr from voucher a ,TYPE b,famst c where  trim(a.rcode)=trim(c.acode) and  trim(a.type)||Trim(a.acode)=TRIM(B.TYPE1)||TRIM(B.ACODE) and TRIM(a.TYPE)||TRIM(a.ACODE)='" + mq1 + "'  and a.branchcd= '" + frm_mbr + "' and upper(trim(a.refnum)) not like 'RTGS%' and length(trim(a.refnum))> 1 and a.vchdate " + xprdRange + " order by a.VCHDATE,a.refnum";
                SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, trim(c.aname) as party,trim(b.name) as acname,a.type,a.acode,a.rcode,sum(a.dramt)-sum(a.cramt) as cramt,a.naration as rmk,a.refnum,to_char(a.refdate,'dd/mm/yyyy') as refdt,rtrim(xmlagg(xmlelement(e,replace(a.invno ,'-',null)||',')).extract('//text()').extract('//text()'),',') as inv_ref,rtrim(xmlagg(xmlelement(e,replace(to_char(a.invdate,'dd/mm/yyyy') ,'-',null)||',')).extract('//text()').extract('//text()'),',') as inv_dt from voucher a ,TYPE b,famst c where  trim(a.acode)=trim(c.acode) and  trim(a.type)||Trim(a.rcode)=TRIM(B.TYPE1)||TRIM(B.ACODE) and TRIM(a.TYPE)||TRIM(a.rCODE)='" + mq1 + "' and a.branchcd= '" + frm_mbr + "' and upper(trim(a.refnum)) not like 'RTGS%' and length(trim(a.refnum))> 1 and a.vchdate " + xprdRange + " group by trim(c.aname),trim(b.name),a.type,a.acode,a.rcode,a.naration,a.refnum,to_char(a.refdate,'dd/mm/yyyy') order by a.refnum";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Chq_Issue_Reg", "std_Chq_Issue_Reg", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70137":
                header_n = "Bank Reconciliation";
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Col1");
                SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, vchnum,to_char(vchdate,'dd/mm/yyyy') as vchdate, icode,col1 as vch_no,col2 as vch_dt,col3 as cheq_no,col4 as debit,col5 as credit,col7 as particular,col13 as chq_dt,remarks as bank_name,startdt ,col11 as bal_bank,col12 as bal_book,num1 as cal_bank,srno  from costestimate where  trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'dd/mm/yyyy')='" + mq1 + "'  order by srno"; //this is old
                //after changes...by yogita....
                //SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, vchnum,to_char(vchdate,'dd/mm/yyyy') as vchdate, icode,col1 as vch_no,col2 as vch_dt,col3 as cheq_no,(Case when nvl(col4,'-')='-' then '0' else col4 end ) as debit,(Case when nvl(col5,'-')='-' then '0' else col5 end ) as credit,col7 as particular,col13 as chq_dt,remarks as bank_name,startdt ,col11 as bal_bank,col12 as bal_book,num1 as cal_bank,srno  from costestimate where  trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'dd/mm/yyyy')='" + mq1 + "'  order by srno";//old
                //if (frm_cocd == "OMEG" || frm_cocd == "MPAC")//this is done by yogita on 19june as per rahulp sir..jiski bank date hai only wahi data aaye
                {
                    SQuery = " select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, vchnum,to_char(vchdate,'dd/mm/yyyy') as vchdate,col6 as bnkdate, icode,col1 as vch_no,col2 as vch_dt,col3 as cheq_no,(Case when nvl(col4,'-')='-' then '0' else col4 end ) as debit,(Case when nvl(col5,'-')='-' then '0' else col5 end ) as credit,col7 as particular,col13 as chq_dt,remarks as bank_name,startdt ,col11 as bal_bank,col12 as bal_book,num1 as cal_bank,srno,to_Char(az_dt,'dd/mm/yyyy') AS ref_Date from costestimate where  trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'dd/mm/yyyy')='" + mq1 + "'  order by srno";// AND LENGTH(TRIM(COL6))>3  

                }
                //else
                //{//old

                //SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, vchnum,to_char(vchdate,'dd/mm/yyyy') as vchdate,null as bankdate, icode,col1 as vch_no,col2 as vch_dt,col3 as cheq_no,(Case when nvl(col4,'-')='-' then '0' else col4 end ) as debit,(Case when nvl(col5,'-')='-' then '0' else col5 end ) as credit,col7 as particular,col13 as chq_dt,remarks as bank_name,startdt ,col11 as bal_bank,col12 as bal_book,num1 as cal_bank,srno,null as ref_Date from costestimate where  trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'dd/mm/yyyy')='" + mq1 + "'  order by srno";
                //}

                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));//old rpt in folder by name... std_Bank_Reco_oldbeofre merging
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Bank_Reco", "std_Bank_Reco", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70117N": //this is new print for bank reco new form
                //Bank Reconciliation new print for new form
                header_n = "Bank Reconciliation";
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Col1");
                SQuery = "SELECT a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,substr(trim(a.doc_ref_no),7,6) as vch_no,substr(trim(a.doc_ref_no),13,10) as vch_dt,a.refnum as cheq_no,a.refdate as ref_date,a.bank_date as bnkdate,a.acode,trim(b.aname) as bank_name,nvl(a.dramt,0) as debit,nvl(a.cramt,0) as credit,a.rcode,a.account_REf as particular,nvl(a.bank_bal,0) as bal_bank,nvl(a.our_bal,0) as bal_book,nvl(a.diff_bal,0) as diff_bal,nvl(a.diff_find,0) as diff_find,a.diff_Reco,a.remarks  FROM wb_bank_reco a,famst b WHERE trim(a.acode)=trim(b.acode) and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy')='" + mq1 + "' and a.bank_date is null ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Bank_Reco_New", "std_Bank_Reco_New", dsRep, header_n);
                }

                else
                {
                    data_found = "N";
                }
                break;

            case "F70149*": // (OLD CODE) ID IS CHANGED WITH * SO THAT OLD CODE BACKUP COPY REMAIN UNCHANGED
                #region Balance sheet detail
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");   //selected branch value         
                m = 0;
                ph_tbl = new DataTable();//add dummy column in \ xthis
                ph_tbl.Columns.Add("ph_srn", typeof(double));
                ph_tbl.Columns.Add("col1_srn", typeof(double));
                ph_tbl.Columns.Add("ch_col0", typeof(string)); //mcode
                ph_tbl.Columns.Add("ch_col1", typeof(string));//mname

                ph_tbl.Columns.Add("nm_col1", typeof(double));//subgrp clos
                ph_tbl.Columns.Add("nm_col2", typeof(double));//grp wise total

                ph_tbl.Columns.Add("col2_srn", typeof(double));
                ph_tbl.Columns.Add("ch_col2", typeof(string));//mcode
                ph_tbl.Columns.Add("ch_col3", typeof(string));//mname

                ph_tbl.Columns.Add("nm_col3", typeof(double));//subgrp closing
                ph_tbl.Columns.Add("nm_col4", typeof(double));      //grp total  
                dt1 = ph_tbl.Clone();
                dt2 = ph_tbl.Clone();
                header_n = "BALANCE SHEET DETAIL";

                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS m_code,MGNAME AS m_name,acode as sb_code,aname as  sb_name,SUM(CL) AS dramt FROM (select  c.type1 as mgcode, c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,((sum(a.opening)+sum(a.cdr)-sum(a.ccr))*(-1)) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd in (" + mq1 + ") AND SUBSTR(TRIM(A.ACODE),1,1)<'2'  Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + " AND SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange + " AND  SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd) a,famst b,type c where substr(TRIM(A.acode),1,2)=trim(c.type1) and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,c.type1 having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='0'  GROUP BY MGCODE,MGNAME,ACODE,ANAME order by m_code,sb_name";
                dtoutflow = fgen.getdata(frm_qstr, frm_cocd, SQuery); //for liablities 

                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS mcode,MGNAME AS mname,acode AS sbcode,aNAME AS sbname,SUM(CL) as cramt FROM (select  c.type1 as mgcode,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd in (" + mq1 + ") AND SUBSTR(TRIM(A.ACODE),1,1)<'2'  Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + " AND SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange + " AND  SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd) a,famst b,type c where  substr(TRIM(A.acode),1,2)=trim(c.type1)  and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='1'  GROUP BY MGCODE,MGNAME,aCODE,aNAME order by mcode,sbname";
                dtinflow = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                SQuery = "SELECT MGCODE AS mcode,MGNAME AS mname,acode AS sbcode,aNAME AS sbname,SUM(CL) as cramt FROM (select  c.type1 as mgcode,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd in (" + mq1 + ") AND SUBSTR(TRIM(A.ACODE),1,1)<'2'  Union all select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + " AND SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange + " AND  SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd) a,famst b,type c where  substr(TRIM(A.acode),1,2)=trim(c.type1)  and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='1'   and mgcode in ('16') and  cl!='0'  GROUP BY MGCODE,MGNAME,aCODE,aNAME order by mcode,sbname";
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);//dt for only 16 type
                m = dtinflow.Rows.Count; //for assets              
                #region
                int cnt = 0; db = 0; db3 = 0; db5 = 0;
                if (dtoutflow.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtoutflow.Rows)
                    {
                        if (mq1 != dr["m_code"].ToString())
                        {
                            dr1 = ph_tbl.NewRow();
                            if (ph_tbl.Rows.Count > 0)
                            {
                                ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;//for subtotal
                                db5 = 0;
                            }
                            dr1["ch_col0"] = dr["m_code"].ToString().Trim();
                            dr1["ch_col1"] = dr["m_name"].ToString().Trim();
                            ph_tbl.Rows.Add(dr1);
                            mq1 = dr["m_code"].ToString().Trim();
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                            dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                            dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                            db5 += fgen.make_double(dr["dramt"].ToString().Trim());
                            db3 += fgen.make_double(dr["dramt"].ToString().Trim()); //total
                            ph_tbl.Rows.Add(dr1);
                        }
                        else
                        {
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                            dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                            dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                            db5 += fgen.make_double(dr["dramt"].ToString().Trim());
                            db3 += fgen.make_double(dr["dramt"].ToString().Trim());
                            ph_tbl.Rows.Add(dr1);
                        }
                        cnt++;
                    }
                }
                dr1 = ph_tbl.NewRow();

                ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;
                mq1 = "";
                db = 0; cnt = 0; db6 = 0; db4 = 0;
                if (dtinflow.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtinflow.Rows)
                    {
                        if (mq1 != dr["mcode"].ToString())
                        {
                            j = ph_tbl.Rows.Count;
                            if (cnt > 0)
                            {
                                ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col4"] = db6;//for subtotal
                                db6 = 0;
                            }
                            if (cnt >= j)
                            {
                                dr1 = ph_tbl.NewRow();
                                ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col4"] = db6;//for subtotal
                                db6 = 0;
                                dr1["ch_col2"] = dr["mcode"].ToString().Trim();
                                dr1["ch_col3"] = dr["mname"].ToString().Trim();
                                dr1 = ph_tbl.NewRow();
                                mq1 = dr["mcode"].ToString().Trim();
                            }
                            else
                            {
                                ph_tbl.Rows[cnt]["ch_col2"] = dr["mcode"].ToString().Trim();
                                ph_tbl.Rows[cnt]["ch_col3"] = dr["mname"].ToString().Trim();
                                mq1 = dr["mcode"].ToString().Trim();
                            }
                            cnt = cnt + 1;

                            if (cnt >= j)
                            {
                                dr1 = ph_tbl.NewRow();
                                dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                                dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                                dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                                db6 += fgen.make_double(dr["cramt"].ToString().Trim()); //subtotal
                                db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                                ph_tbl.Rows.Add(dr1);
                            }
                            else
                            {
                                ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                                ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                                ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                                db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                                db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                            }
                        }
                        //////
                        else
                        {
                            k = ph_tbl.Rows.Count;
                            if (cnt >= k)
                            {
                                dr1 = ph_tbl.NewRow();
                                dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                                dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                                dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                                db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                                db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                                ph_tbl.Rows.Add(dr1);
                            }
                            else
                            {

                                ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                                ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                                ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                                db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                                db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total

                            }
                        }
                        cnt++;
                    }
                }
                dr1["col2_srn"] = "2";
                a = ph_tbl.Rows.Count;
                m = 0; int n = 0;
                m = dtoutflow.Rows.Count;
                n = dtinflow.Rows.Count;
                if (m > n)
                {
                    ph_tbl.Rows[cnt - 1]["nm_col4"] = db6; //subtotal
                }
                else
                {
                    ph_tbl.Rows[a - 1]["nm_col4"] = db6; //subtotal
                }

                mq2 = "";
                amt = 0;
                cntr = 0;
                db = 0;
                int d = 0;
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);

                db = db4 - db3;//db4 total of assests and db3 total of liab

                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                dr1["ch_col1"] = "PROFIT & LOSS A/C";
                dr1["col1_srn"] = 1;
                dr1["nm_col2"] = db;

                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                dr1["ch_col1"] = "TOTAL";
                dr1["ch_col3"] = "TOTAL";
                dr1["nm_col2"] = db4;
                dr1["nm_col4"] = db4;
                dr1["col1_srn"] = "1";

                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1 + 1);
                #endregion

                ph_tbl.Columns.Add("header");
                ph_tbl.Columns.Add("fromdt");
                ph_tbl.Columns.Add("todt");
                ph_tbl.Rows[0]["header"] = header_n;
                ph_tbl.Rows[0]["fromdt"] = fromdt;
                ph_tbl.Rows[0]["todt"] = todt;
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_BalSheet_detail", "std_BalSheet_detail", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70149": // CHANGES DONE ON 16.5.2018...BY YOGITA
                #region Balance sheet detail
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");   //selected branch value         
                ph_tbl = new DataTable();//add dummy column in \ xthis
                ph_tbl.Columns.Add("ph_srn", typeof(double));
                ph_tbl.Columns.Add("col1_srn", typeof(double));
                ph_tbl.Columns.Add("ch_col0", typeof(string)); //mcode
                ph_tbl.Columns.Add("ch_col1", typeof(string));//mname

                ph_tbl.Columns.Add("nm_col1", typeof(double));//subgrp clos
                ph_tbl.Columns.Add("nm_col2", typeof(double));//grp wise total

                ph_tbl.Columns.Add("col2_srn", typeof(double));
                ph_tbl.Columns.Add("ch_col2", typeof(string));//mcode
                ph_tbl.Columns.Add("ch_col3", typeof(string));//mname

                ph_tbl.Columns.Add("nm_col3", typeof(double));//subgrp closing
                ph_tbl.Columns.Add("nm_col4", typeof(double));      //grp total  
                dt1 = ph_tbl.Clone();
                dt2 = ph_tbl.Clone();
                header_n = "BALANCE SHEET DETAIL";

                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS m_code,MGNAME AS m_name,acode as sb_code,aname as  sb_name,SUM(CL) AS dramt FROM (select  c.type1 as mgcode, c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,((sum(a.opening)+sum(a.cdr)-sum(a.ccr))*(-1)) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd in (" + mq1 + ") AND SUBSTR(TRIM(b.grp),1,1)<'2'  Union all  select a.branchcd,a.acode,sum(a.dramt)-sum(a.cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER a,famst b where trim(a.acode)=trim(B.acode) and a.branchcd in (" + mq1 + ") and a.type like '%' and a.vchdate " + xprdRange1 + " AND SUBSTR(TRIM(b.grp),1,1)<'2' GROUP BY a.ACODE,a.branchcd  union all select a.branchcd,a.acode,0 as op,sum(a.dramt) as cdr,sum(a.cramt) as ccr,0 as clos from VOUCHER a,famst b where trim(A.acode)=trim(B.acode) and a.branchcd in (" + mq1 + ") and a.type like '%' and a.vchdate " + xprdRange + " AND SUBSTR(TRIM(b.grp),1,1)<'2' GROUP BY a.ACODE,a.branchcd) a,famst b,type c where substr(TRIM(b.grp),1,2)=trim(c.type1) and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,c.type1 having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='0'  GROUP BY MGCODE,MGNAME,ACODE,ANAME order by m_code,sb_name";
                dtoutflow = fgen.getdata(frm_qstr, frm_cocd, SQuery); //for liablities 

                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS mcode,MGNAME AS mname,acode AS sbcode,aNAME AS sbname,SUM(CL) as cramt FROM (select  c.type1 as mgcode,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd in (" + mq1 + ") AND SUBSTR(TRIM(b.grp),1,1)<'2'  Union all  select a.branchcd,a.acode,sum(a.dramt)-sum(a.cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd in (" + mq1 + ") and a.type like '%' and a.vchdate " + xprdRange1 + " AND SUBSTR(TRIM(b.grp),1,1)<'2' GROUP BY a.ACODE,a.branchcd  union all select a.branchcd,a.acode,0 as op,sum(a.dramt) as cdr,sum(a.cramt) as ccr,0 as clos from VOUCHER a,famst b where trim(a.acode)=trim(b.acode) and  a.branchcd in (" + mq1 + ") and a.type like '%' and a.vchdate " + xprdRange + " AND SUBSTR(TRIM(b.grp),1,1)<'2' GROUP BY a.ACODE,a.branchcd) a,famst b,type c where  substr(TRIM(b.grp),1,2)=trim(c.type1)  and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='1'  GROUP BY MGCODE,MGNAME,aCODE,aNAME order by mcode,sbname";
                dtinflow = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                SQuery = "SELECT MGCODE AS mcode,MGNAME AS mname,acode AS sbcode,aNAME AS sbname,SUM(CL) as cramt FROM (select  c.type1 as mgcode,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a,famst b where trim(A.acode)=trim(B.acode) and a.branchcd in (" + mq1 + ") AND SUBSTR(TRIM(b.Grp),1,1)<'2' Union all select a.branchcd,a.acode,sum(a.dramt)-sum(a.cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER a,famst b where trim(A.acode)=trim(B.acode) and a.branchcd in (" + mq1 + ") and a.type like '%' and a.vchdate " + xprdRange1 + " AND SUBSTR(TRIM(b.grp),1,1)<'2' GROUP BY a.ACODE,a.branchcd  union all select a.branchcd,a.acode,0 as op,sum(a.dramt) as cdr,sum(a.cramt) as ccr,0 as clos from VOUCHER a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd in (" + mq1 + ") and a.type like '%' and a.vchdate " + xprdRange + " AND  SUBSTR(TRIM(b.grp),1,1)<'2' GROUP BY a.ACODE,a.branchcd) a,famst b,type c where  substr(TRIM(b.grp),1,2)=trim(c.type1)  and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='1'   and mgcode in ('16') and  cl!='0'  GROUP BY MGCODE,MGNAME,aCODE,aNAME order by mcode,sbname";
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);//dt for only 16 type
                m = dtinflow.Rows.Count; //for assets 

                #region
                cnt = 0; db = 0; db3 = 0; db5 = 0;
                if (dtoutflow.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtoutflow.Rows)
                    {
                        if (mq1 != dr["m_code"].ToString())
                        {
                            dr1 = ph_tbl.NewRow();
                            if (ph_tbl.Rows.Count > 0)
                            {
                                ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;//for subtotal
                                db5 = 0;
                            }
                            dr1["ch_col0"] = dr["m_code"].ToString().Trim();
                            dr1["ch_col1"] = dr["m_name"].ToString().Trim();
                            ph_tbl.Rows.Add(dr1);
                            mq1 = dr["m_code"].ToString().Trim();
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                            dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                            dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                            db5 += fgen.make_double(dr["dramt"].ToString().Trim());
                            db3 += fgen.make_double(dr["dramt"].ToString().Trim()); //total
                            ph_tbl.Rows.Add(dr1);
                        }
                        else
                        {
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                            dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                            dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                            db5 += fgen.make_double(dr["dramt"].ToString().Trim());
                            db3 += fgen.make_double(dr["dramt"].ToString().Trim());
                            ph_tbl.Rows.Add(dr1);
                        }
                        cnt++;
                    }
                }
                dr1 = ph_tbl.NewRow();

                ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;
                mq1 = "";
                db = 0; cnt = 0; db6 = 0; db4 = 0;
                if (dtinflow.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtinflow.Rows)
                    {
                        if (mq1 != dr["mcode"].ToString())
                        {
                            j = ph_tbl.Rows.Count;
                            //if (cnt > 0)
                            //{
                            //    ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col4"] = db6;//for subtotal
                            //    db6 = 0;
                            //}
                            if (cnt > 0 && cnt < j)
                            {
                                ph_tbl.Rows[cnt - 1]["nm_col4"] = db6;//for subtotal  
                                db6 = 0;
                            }
                            if (cnt >= j)
                            {
                                ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col4"] = db6;//for subtotal
                                db6 = 0;
                                dr1 = ph_tbl.NewRow();
                                dr1["ch_col2"] = dr["mcode"].ToString().Trim();
                                dr1["ch_col3"] = dr["mname"].ToString().Trim();
                                ph_tbl.Rows.Add(dr1);
                                mq1 = dr["mcode"].ToString().Trim();
                            }
                            else
                            {
                                ph_tbl.Rows[cnt]["ch_col2"] = dr["mcode"].ToString().Trim();
                                ph_tbl.Rows[cnt]["ch_col3"] = dr["mname"].ToString().Trim();
                                mq1 = dr["mcode"].ToString().Trim();
                            }
                            cnt = cnt + 1;

                            if (cnt >= j)
                            {
                                dr1 = ph_tbl.NewRow();
                                dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                                dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                                dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                                db6 += fgen.make_double(dr["cramt"].ToString().Trim()); //subtotal
                                db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                                ph_tbl.Rows.Add(dr1);
                            }
                            else
                            {
                                ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                                ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                                ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                                db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                                db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                            }
                        }
                        //////
                        else
                        {
                            k = ph_tbl.Rows.Count;
                            if (cnt >= k)
                            {
                                dr1 = ph_tbl.NewRow();
                                dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                                dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                                dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                                db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                                db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                                ph_tbl.Rows.Add(dr1);
                            }
                            else
                            {

                                ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                                ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                                ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                                db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                                db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total

                            }
                        }
                        cnt++;
                    }
                }
                dr1["col2_srn"] = "2";
                a = ph_tbl.Rows.Count;
                m = 0; n = 0;
                m = dtoutflow.Rows.Count;
                n = dtinflow.Rows.Count;
                if (m > n)
                {
                    ph_tbl.Rows[cnt - 1]["nm_col4"] = db6; //subtotal
                }
                else
                {
                    ph_tbl.Rows[a - 1]["nm_col4"] = db6; //subtotal
                }
                mq2 = "";
                amt = 0;
                cntr = 0;
                db = 0;
                d = 0;
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                db = db4 - db3;//db4 total of assests and db3 total of liab
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                //dr1["ch_col1"] = "PROFIT & LOSS A/C";
                dr1["ch_col1"] = "PROFIT / LOSS";
                dr1["col1_srn"] = 1;
                dr1["nm_col2"] = db;
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                dr1["ch_col1"] = "TOTAL";
                dr1["ch_col3"] = "TOTAL";
                dr1["nm_col2"] = db4;
                dr1["nm_col4"] = db4;
                dr1["col1_srn"] = "1";
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1 + 1);
                #endregion
                ph_tbl.Columns.Add("header");
                ph_tbl.Columns.Add("fromdt");
                ph_tbl.Columns.Add("todt");
                ph_tbl.Rows[0]["header"] = header_n;
                ph_tbl.Rows[0]["fromdt"] = fromdt;
                ph_tbl.Rows[0]["todt"] = todt;
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_BalSheet_detail", "std_BalSheet_detail", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70148*": // (OLD CODE) ID IS CHANGED WITH * SO THAT OLD CODE BACKUP COPY REMAIN UNCHANGED
                #region BALANCE SHEET SUMMARY
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");   //selected branch value   
                ph_tbl = new DataTable();//add dummy column in \ xthis
                ph_tbl.Columns.Add("ph_srn", typeof(double));
                ph_tbl.Columns.Add("col1_srn", typeof(double));
                ph_tbl.Columns.Add("ch_col0", typeof(string)); //mcode
                ph_tbl.Columns.Add("ch_col1", typeof(string));//mname

                ph_tbl.Columns.Add("nm_col1", typeof(double));//subgrp clos
                ph_tbl.Columns.Add("nm_col2", typeof(double));//grp wise total

                ph_tbl.Columns.Add("col2_srn", typeof(double));
                ph_tbl.Columns.Add("ch_col2", typeof(string));//mcode
                ph_tbl.Columns.Add("ch_col3", typeof(string));//mname

                ph_tbl.Columns.Add("nm_col3", typeof(double));//subgrp closing
                ph_tbl.Columns.Add("nm_col4", typeof(double));      //grp total  
                dt1 = ph_tbl.Clone();
                dt2 = ph_tbl.Clone();
                header_n = "BALANCE SHEET SUMMARY";

                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,MGCODE AS m_code,MGNAME AS m_name,SUBGRPCODE AS sb_code,SGNAME AS sb_name,SUM(CL) AS dramt FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, d.name as SGNAME,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,((sum(a.opening)+sum(a.cdr)-sum(a.ccr))*(-1)) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd in (" + mq1 + ") AND SUBSTR(TRIM(A.ACODE),1,1)<'2'  Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + " AND SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange + " AND  SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd  ) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(A.acode),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='0'  GROUP BY MGCODE,MGNAME,SUBGRPCODE,SGNAME order by m_code";

                dtoutflow = fgen.getdata(frm_qstr, frm_cocd, SQuery); //for liablities 

                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS mcode,MGNAME AS mname,SUBGRPCODE AS sbcode,SGNAME AS sbname,SUM(CL) as cramt FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, d.name as SGNAME,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd in (" + mq1 + ") AND SUBSTR(TRIM(A.ACODE),1,1)<'2'  Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + " AND SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange + " AND  SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd  ) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(A.acode),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='1'  GROUP BY MGCODE,MGNAME,SUBGRPCODE,SGNAME order by mcode";
                dtinflow = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                m = dtinflow.Rows.Count; //for assets 

                #region another way AND RUNNING CODE
                cnt = 0; db = 0; db3 = 0; db5 = 0;
                //if (dtoutflow.Rows.Count > 0)
                //{
                foreach (DataRow dr in dtoutflow.Rows)
                {
                    if (mq1 != dr["m_code"].ToString())
                    {
                        dr1 = ph_tbl.NewRow();
                        if (ph_tbl.Rows.Count > 0)
                        {
                            ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;//for subtotal
                            db5 = 0;
                        }
                        dr1["ch_col0"] = dr["m_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["m_name"].ToString().Trim();
                        ph_tbl.Rows.Add(dr1);
                        mq1 = dr["m_code"].ToString().Trim();
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim());
                        db3 += fgen.make_double(dr["dramt"].ToString().Trim());//total
                        ph_tbl.Rows.Add(dr1);
                    }
                    else
                    {
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim());
                        db3 += fgen.make_double(dr["dramt"].ToString().Trim());
                        ph_tbl.Rows.Add(dr1);
                    }
                    cnt++;
                }

                dr1 = ph_tbl.NewRow();
                // ph_tbl.Rows[0]["nm_col2"] = db; //for total
                ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;
                //}
                mq1 = "";
                db = 0; cnt = 0; db6 = 0; db4 = 0;
                //if (dtinflow.Rows.Count > 0)
                //{
                foreach (DataRow dr in dtinflow.Rows)
                {
                    if (mq1 != dr["mcode"].ToString())
                    {
                        j = ph_tbl.Rows.Count;
                        if (cnt > 0)
                        {
                            ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col4"] = db6;//for subtotal
                            db6 = 0;
                        }
                        if (cnt >= j)
                        {
                            dr1 = ph_tbl.NewRow();
                            ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col4"] = db6;//for subtotal
                            db6 = 0;
                            dr1["ch_col2"] = dr["mcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["mname"].ToString().Trim();
                            dr1 = ph_tbl.NewRow();
                            mq1 = dr["mcode"].ToString().Trim();
                        }
                        else
                        {
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["mcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["mname"].ToString().Trim();
                            mq1 = dr["mcode"].ToString().Trim();
                        }
                        cnt = cnt + 1;

                        if (cnt >= j)
                        {
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                            dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                            db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                            ph_tbl.Rows.Add(dr1);
                        }
                        else
                        {
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                            ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                            db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                        }
                    }
                    //////
                    else
                    {
                        k = ph_tbl.Rows.Count;
                        if (cnt >= k)
                        {
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                            dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                            db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                            ph_tbl.Rows.Add(dr1);
                        }
                        else
                        {
                            //  dr1 = ph_tbl.NewRow();
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                            ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                            db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                            // ph_tbl.Rows.Add(dr1);
                        }
                    }
                    cnt++;
                }

                dr1["col2_srn"] = "2";
                a = ph_tbl.Rows.Count;
                m = 0; n = 0;
                m = dtoutflow.Rows.Count;
                n = dtinflow.Rows.Count;
                if (m > n)
                {
                    ph_tbl.Rows[cnt - 1]["nm_col4"] = db6; //subtotal
                }
                else
                {
                    ph_tbl.Rows[a - 1]["nm_col4"] = db6; //subtotal
                }

                mq2 = "";
                amt = 0;
                cntr = 0;
                db = 0;
                d = 0;
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                db = db4 - db3;//db4 total of assests and db3 total of liab
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                dr1["ch_col1"] = "PROFIT & LOSS A/C";
                dr1["col1_srn"] = 1;
                dr1["nm_col2"] = db;

                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                dr1["ch_col1"] = "TOTAL";
                dr1["ch_col3"] = "TOTAL";
                dr1["nm_col2"] = db4;
                dr1["nm_col4"] = db4;
                dr1["col1_srn"] = "1";
                //   if length(dr1["col1_srn"].ToString()>1)
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1 + 1);
                #endregion
                ph_tbl.Columns.Add("header");
                ph_tbl.Columns.Add("fromdt");
                ph_tbl.Columns.Add("todt");
                ph_tbl.Rows[0]["header"] = header_n;
                ph_tbl.Rows[0]["fromdt"] = fromdt;
                ph_tbl.Rows[0]["todt"] = todt;
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_BalSheet", "std_BalSheet", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70148": // CHANGES DONE ON 16.5.2018...BY YOGITA
                #region BALANCE SHEET SUMMARY

                fgen.execute_cmd(frm_qstr, frm_cocd, "insert into typegrp(branchcd,id,type1,name)(select distinct '00','A',lpad(trim(bssch),4,'0'),'Schedule '||lpad(trim(bssch),4,'0') from famst where trim(bssch) not in (select trim(type1) from typegrp where id='A'))");

                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");   //selected branch value   
                ph_tbl = new DataTable();//add dummy column in \ xthis
                ph_tbl.Columns.Add("ph_srn", typeof(double));
                ph_tbl.Columns.Add("col1_srn", typeof(double));
                ph_tbl.Columns.Add("ch_col0", typeof(string)); //mcode
                ph_tbl.Columns.Add("ch_col1", typeof(string));//mname
                ph_tbl.Columns.Add("nm_col1", typeof(double));//subgrp clos
                ph_tbl.Columns.Add("nm_col2", typeof(double));//grp wise total
                ph_tbl.Columns.Add("col2_srn", typeof(double));
                ph_tbl.Columns.Add("ch_col2", typeof(string));//mcode
                ph_tbl.Columns.Add("ch_col3", typeof(string));//mname
                ph_tbl.Columns.Add("nm_col3", typeof(double));//subgrp closing
                ph_tbl.Columns.Add("nm_col4", typeof(double));//grp total  
                dt1 = ph_tbl.Clone();
                dt2 = ph_tbl.Clone();
                header_n = "BALANCE SHEET SUMMARY";
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,MGCODE AS m_code,MGNAME AS m_name,SUBGRPCODE AS sb_code,SGNAME AS sb_name,SUM(CL) AS dramt FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, d.name as SGNAME,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,((sum(a.opening)+sum(a.cdr)-sum(a.ccr))*(-1)) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd in (" + mq1 + ") AND SUBSTR(TRIM(A.ACODE),1,1)<'2'  Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + " AND SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange + " AND  SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd  ) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(A.acode),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='0'  GROUP BY MGCODE,MGNAME,SUBGRPCODE,SGNAME order by m_code";
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,MGCODE AS m_code,MGNAME AS m_name,SUBGRPCODE AS sb_code,SGNAME AS sb_name,SUM(CL) AS dramt FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, d.name as SGNAME,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,((sum(a.opening)+sum(a.cdr)-sum(a.ccr))*(-1)) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd in (" + mq1 + ") AND SUBSTR(TRIM(A.ACODE),1,1)<'2'  Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + " GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange + "  GROUP BY ACODE,branchcd  ) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(trim(b.grp),1,1)<'2' and trim(b.grp)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='0'  GROUP BY MGCODE,MGNAME,SUBGRPCODE,SGNAME order by m_code";
                dtoutflow = fgen.getdata(frm_qstr, frm_cocd, SQuery); //for liablities 

                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS mcode,MGNAME AS mname,SUBGRPCODE AS sbcode,SGNAME AS sbname,SUM(CL) as cramt FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, d.name as SGNAME,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd in (" + mq1 + ") AND SUBSTR(TRIM(A.ACODE),1,1)<'2'  Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + " AND SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange + " AND  SUBSTR(TRIM(ACODE),1,1)<'2' GROUP BY ACODE,branchcd  ) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(A.acode),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='1'  GROUP BY MGCODE,MGNAME,SUBGRPCODE,SGNAME order by mcode";
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS mcode,MGNAME AS mname,SUBGRPCODE AS sbcode,SGNAME AS sbname,SUM(CL) as cramt FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, d.name as SGNAME,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd in (" + mq1 + ")  Union all select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + " GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd in (" + mq1 + ") and type like '%' and vchdate " + xprdRange + "  GROUP BY ACODE,branchcd  ) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and trim(b.grp)=trim(c.type1) and substr(b.grp,1,1)<'2' and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='1'  GROUP BY MGCODE,MGNAME,SUBGRPCODE,SGNAME order by mcode";
                dtinflow = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                m = dtinflow.Rows.Count; //for assets 

                #region another way AND RUNNING CODE
                cnt = 0; db = 0; db3 = 0; db5 = 0;
                foreach (DataRow dr in dtoutflow.Rows)
                {
                    if (mq1 != dr["m_code"].ToString())
                    {
                        dr1 = ph_tbl.NewRow();
                        if (ph_tbl.Rows.Count > 0)
                        {
                            ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;//for subtotal
                            db5 = 0;
                        }
                        dr1["ch_col0"] = dr["m_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["m_name"].ToString().Trim();
                        ph_tbl.Rows.Add(dr1);
                        mq1 = dr["m_code"].ToString().Trim();
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim());
                        db3 += fgen.make_double(dr["dramt"].ToString().Trim());//total
                        ph_tbl.Rows.Add(dr1);
                    }
                    else
                    {
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim());
                        db3 += fgen.make_double(dr["dramt"].ToString().Trim());
                        ph_tbl.Rows.Add(dr1);
                    }
                    cnt++;
                }
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;
                mq1 = ""; mq3 = "";
                db = 0; cnt = 0; db6 = 0; db4 = 0;
                foreach (DataRow dr in dtinflow.Rows)
                {
                    if (mq1 != dr["mcode"].ToString())
                    {
                        j = ph_tbl.Rows.Count;
                        if (cnt > 0 && cnt < j)
                        {
                            ph_tbl.Rows[cnt - 1]["nm_col4"] = db6;//for subtotal  
                            db6 = 0;
                        }
                        if (cnt >= j)
                        {
                            ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col4"] = db6;
                            db6 = 0;
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col2"] = dr["mcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["mname"].ToString().Trim();
                            ph_tbl.Rows.Add(dr1);
                            mq1 = dr["mcode"].ToString().Trim();
                        }
                        else
                        {
                            db6 = 0;
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["mcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["mname"].ToString().Trim();
                            mq1 = dr["mcode"].ToString().Trim();
                        }
                        cnt = cnt + 1;

                        if (cnt >= j)
                        {
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                            dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                            db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                            ph_tbl.Rows.Add(dr1);
                        }
                        else
                        {
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                            ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                            db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                        }
                    }
                    //////
                    else
                    {
                        k = ph_tbl.Rows.Count;
                        if (cnt >= k)
                        {
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                            dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                            db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                            ph_tbl.Rows.Add(dr1);
                        }
                        else
                        {
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                            ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                            db4 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                        }
                    }
                    cnt++;
                }
                dr1["col2_srn"] = "2";
                a = ph_tbl.Rows.Count;
                m = 0; n = 0;
                m = dtoutflow.Rows.Count;
                n = dtinflow.Rows.Count;
                if (m > n)
                {
                    ph_tbl.Rows[cnt - 1]["nm_col4"] = db6; //subtotal
                }
                else
                {
                    ph_tbl.Rows[a - 1]["nm_col4"] = db6; //subtotal
                }

                mq2 = "";
                amt = 0;
                cntr = 0;
                db = 0;
                d = 0;
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);

                db = db4 - db3;//db4 total of assests and db3 total of liab

                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                // dr1["ch_col1"] = "PROFIT & LOSS A/C";
                dr1["ch_col1"] = "PROFIT / LOSS";
                dr1["col1_srn"] = 1;
                dr1["nm_col2"] = db;

                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                dr1["ch_col1"] = "TOTAL";
                dr1["ch_col3"] = "TOTAL";
                dr1["nm_col2"] = db4;
                dr1["nm_col4"] = db4;
                dr1["col1_srn"] = "1";
                //   if length(dr1["col1_srn"].ToString()>1)

                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1 + 1);

                #endregion

                ph_tbl.Columns.Add("header");
                ph_tbl.Columns.Add("fromdt");
                ph_tbl.Columns.Add("todt");
                ph_tbl.Rows[0]["header"] = header_n;
                ph_tbl.Rows[0]["fromdt"] = fromdt;
                ph_tbl.Rows[0]["todt"] = todt;
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_BalSheet", "std_BalSheet", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70241":
                #region PL Scehdule wise
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");   //selected branch value                                                                               
                ph_tbl = new DataTable();//add dummy column in \ xthis            
                ph_tbl.Columns.Add("col1_srn", typeof(string));
                ph_tbl.Columns.Add("col1_L", typeof(string));
                ph_tbl.Columns.Add("ch_col0", typeof(string)); //mcode
                ph_tbl.Columns.Add("ch_col1", typeof(string));//mname

                ph_tbl.Columns.Add("nm_col1", typeof(double));//subgrp clos
                ph_tbl.Columns.Add("nm_col2", typeof(double));//grp wise total
                //2nd dt
                ph_tbl.Columns.Add("col2_srn", typeof(string));
                ph_tbl.Columns.Add("ch_col2", typeof(string));//mcode
                ph_tbl.Columns.Add("ch_col3", typeof(string));//mname

                ph_tbl.Columns.Add("nm_col3", typeof(double));//subgrp closing
                ph_tbl.Columns.Add("nm_col4", typeof(double));      //grp total  

                dt1 = ph_tbl.Clone();
                dt2 = ph_tbl.Clone();
                header_n = "PROFIT & LOSS A/C";

                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,MGCODE AS m_code,MGNAME AS m_name,SUBGRPCODE AS sb_code,SGNAME AS sb_name,SUM(CL) AS dramt FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, d.name as SGNAME,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd IN (" + mq1 + ")  Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd IN (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + "  GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd IN (" + mq1 + ") and type like '%' and vchdate " + xprdRange + "  GROUP BY ACODE,branchcd  ) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(b.grp),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)-sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='3'  GROUP BY MGCODE,MGNAME,SUBGRPCODE,SGNAME order by m_code,sb_name";//this is for purchase in pl ac
                dtoutflow = fgen.getdata(frm_qstr, frm_cocd, SQuery);  //for left side at top of report

                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS mcode,MGNAME AS mname,SUBGRPCODE AS sbcode,SGNAME AS sbname,SUM(CL)*(-1) as cramt FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, d.name as SGNAME,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd IN (" + mq1 + ")  Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd IN (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + "  GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd IN (" + mq1 + ") and type like '%' and vchdate " + xprdRange + "  GROUP BY ACODE,branchcd  ) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(b.grp),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)-sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='2'  GROUP BY MGCODE,MGNAME,SUBGRPCODE,SGNAME order by mcode,SBNAME"; //// as per mayuri mam changes in this ccr-cdr 
                dtinflow = fgen.getdata(frm_qstr, frm_cocd, SQuery);  //for right side at top of report

                DataTable dtindr = new DataTable();
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS m_code,MGNAME AS m_name,SUBGRPCODE AS sb_code,SGNAME AS sb_name,SUM(CL) as dramt FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, d.name as SGNAME,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd IN (" + mq1 + ")  Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd IN (" + mq1 + ") and type like '%' and vchdate " + xprdRange1 + "  GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd IN (" + mq1 + ") and type like '%' and vchdate " + xprdRange + "  GROUP BY ACODE,branchcd  ) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(b.grp),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having (sum(a.opening)-sum(a.cdr)+sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)>='4'  GROUP BY MGCODE,MGNAME,SUBGRPCODE,SGNAME order by m_code,SB_NAME"; //this is for indirect side in pl account                
                dtindr = fgen.getdata(frm_qstr, frm_cocd, SQuery); //for left side at bottom of report

                m = dtinflow.Rows.Count;
                // another way AND RUNNING CODE
                cnt = 0; db = 0; db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0;
                dr1 = null;
                foreach (DataRow dr in dtoutflow.Rows)
                {
                    if (mq1 != dr["m_code"].ToString())
                    {
                        dr1 = ph_tbl.NewRow();
                        if (ph_tbl.Rows.Count > 0)
                        {
                            ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;//for subtotal
                            db5 = 0;
                        }
                        dr1["ch_col0"] = dr["m_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["m_name"].ToString().Trim();
                        ph_tbl.Rows.Add(dr1);
                        mq1 = dr["m_code"].ToString().Trim();
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db += fgen.make_double(dr["dramt"].ToString().Trim()); //total 
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim());
                        ph_tbl.Rows.Add(dr1);
                    }
                    else
                    {
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db += fgen.make_double(dr["dramt"].ToString().Trim()); //total 
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim());//subtotal                       
                        ph_tbl.Rows.Add(dr1);
                    }
                    cnt++;
                }
                if (dtoutflow.Rows.Count > 0)
                {
                    dr1 = ph_tbl.NewRow();
                    // ph_tbl.Rows[0]["nm_col2"] = db; //for total
                    ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;
                }
                mq1 = "";
                cnt = 0;
                db5 = 0; db6 = 0;

                foreach (DataRow dr in dtinflow.Rows)
                {
                    if (mq1 != dr["mcode"].ToString())
                    {
                        j = ph_tbl.Rows.Count;
                        if (cnt > 0)
                        {
                            //ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col4"] = db6;//for subtotal
                            ph_tbl.Rows[cnt - 1]["nm_col4"] = db6;
                            db6 = 0;
                        }
                        if (cnt >= j)
                        {
                            dr1 = ph_tbl.NewRow();
                            ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col4"] = db6;//for subtotal
                            //ph_tbl.Rows[cnt - 1]["nm_col6"] = db6;
                            db5 = 0;
                            dr1["ch_col2"] = dr["mcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["mname"].ToString().Trim();
                            dr1 = ph_tbl.NewRow();
                            mq1 = dr["mcode"].ToString().Trim();
                        }
                        else
                        {
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["mcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["mname"].ToString().Trim();
                            mq1 = dr["mcode"].ToString().Trim();
                        }
                        cnt = cnt + 1;
                        if (cnt >= j)
                        {
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                            dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                            db1 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                            ph_tbl.Rows.Add(dr1);
                        }
                        else
                        {
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                            ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                            db1 += fgen.make_double(dr["cramt"].ToString().Trim());
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());
                        }
                    }
                    else
                    {
                        k = ph_tbl.Rows.Count;
                        if (cnt >= k)
                        {
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                            dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                            db1 += fgen.make_double(dr["cramt"].ToString().Trim());
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());
                            ph_tbl.Rows.Add(dr1);
                        }
                        else
                        {
                            // dr1 = ph_tbl.NewRow();
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                            ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                            db1 += fgen.make_double(dr["cramt"].ToString().Trim());
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());
                            //ph_tbl.Rows.Add(dr1);
                        }
                    }
                    cnt++;
                }
                dr1["col2_srn"] = "2";
                a = ph_tbl.Rows.Count;
                m = 0; n = 0;
                m = dtoutflow.Rows.Count;
                n = dtinflow.Rows.Count;
                if (m > n)
                {
                    ph_tbl.Rows[cnt - 1]["nm_col4"] = db6; //subtotal
                }
                else
                {
                    ph_tbl.Rows[a - 1]["nm_col4"] = db6; //subtotal
                }
                //  ph_tbl.Rows[0]["nm_col4"] = db1;//total

                d = 0;
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                //ph_tbl.Rows[0]["nm_col4"] = db1;

                db2 = db1 - db;
                if (db1 > db)
                {
                    d = ph_tbl.Rows.Count;
                    dr1 = ph_tbl.NewRow();
                    ph_tbl.Rows.InsertAt(dr1, d + 1);
                    dr1["ch_col1"] = "GROSS PROFIT C/F";
                    dr1["col1_srn"] = 1;
                    dr1["col1_L"] = "L"; //take this field for draw a line into report
                    dr1["nm_col2"] = db2;
                }
                else
                {
                    d = ph_tbl.Rows.Count;
                    dr1 = ph_tbl.NewRow();
                    ph_tbl.Rows.InsertAt(dr1, d + 1);
                    dr1["ch_col1"] = "GROSS LOSS C/F";
                    dr1["col1_srn"] = 1;
                    dr1["col1_L"] = "L";
                    dr1["nm_col2"] = db2;
                }


                //add new row after gross profit/loss
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                dr1["ch_col1"] = "TOTAL";
                dr1["ch_col3"] = "TOTAL";
                dr1["nm_col2"] = db1;
                dr1["nm_col4"] = db1;
                dr1["col1_srn"] = "1";
                dr1["col1_L"] = "L";
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1 + 1);
                ///// 3rd dt another way

                int c = 0;
                foreach (DataRow dr in dtindr.Rows)
                {
                    int j = ph_tbl.Rows.Count;
                    if (mq1 != dr["m_code"].ToString())
                    {
                        dr1 = ph_tbl.NewRow();
                        ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;//for subtotal
                        db5 = 0;
                        dr1["ch_col0"] = dr["m_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["m_name"].ToString().Trim();
                        if (c == 0)
                        {
                            if (db1 > db)
                            {
                                dr1["ch_col3"] = "GROSS PROFIT B/F";
                                dr1["nm_col4"] = db2;
                                //dr1["col1_srn"] = 2;
                            }
                            else
                            {
                                dr1["ch_col3"] = "GROSS LOSS B/F";
                                dr1["nm_col4"] = db2;
                                // dr1["col1_srn"] = 2;
                            }
                        }
                        c++;
                        ph_tbl.Rows.InsertAt(dr1, j + 1);
                        mq1 = dr["m_code"].ToString().Trim();
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db3 += fgen.make_double(dr["dramt"].ToString().Trim()); //total  
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim()); //subtotal
                        ph_tbl.Rows.InsertAt(dr1, j + 1 + 1);
                    }
                    else
                    {
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db3 += fgen.make_double(dr["dramt"].ToString().Trim()); //total                          
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim());//subtotal
                        ph_tbl.Rows.InsertAt(dr1, j + 1);
                    }
                    cnt++;
                }


                ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                // ph_tbl.Rows[0]["nm_col2"] = db3;...need this row add on top of third table
                //db2 is gross profit
                db4 = db2 - db3;
                if (db2 > db3)
                {
                    d = ph_tbl.Rows.Count;
                    dr1 = ph_tbl.NewRow();
                    ph_tbl.Rows.InsertAt(dr1, d + 1);
                    dr1["ch_col1"] = "NET PROFIT";
                    dr1["nm_col2"] = db4;
                    dr1["col1_srn"] = 1;
                    dr1["col1_L"] = "L";
                }
                else
                {
                    d = ph_tbl.Rows.Count;
                    dr1 = ph_tbl.NewRow();
                    ph_tbl.Rows.InsertAt(dr1, d + 1);
                    dr1["ch_col1"] = "NET LOSS";
                    dr1["nm_col2"] = db4;
                    dr1["col1_srn"] = 1;
                    dr1["col1_L"] = "L";
                }
                //add new row after gross profit/loss
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                //ph_tbl.Columns.Add("total", typeof(string));
                //ph_tbl.Rows[0]["total"] = db2; //for alag se total dikhane ke liye
                dr1["ch_col1"] = "TOTAL";
                dr1["nm_col2"] = db2;
                dr1["nm_col4"] = db2;
                dr1["ch_col3"] = "TOTAL";
                dr1["col1_srn"] = "1";
                dr1["col1_L"] = "L";
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1 + 1);

                ph_tbl.Columns.Add("header");
                ph_tbl.Columns.Add("fromdt");
                ph_tbl.Columns.Add("todt");
                ph_tbl.Rows[0]["header"] = header_n;
                ph_tbl.Rows[0]["fromdt"] = fromdt;
                ph_tbl.Rows[0]["todt"] = todt;
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_P_L", "std_P_L", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70242":
                #region PL Details wise
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");   //selected branch value                                                                             
                ph_tbl = new DataTable();//add dummy column in \ xthis            
                ph_tbl.Columns.Add("col1_srn", typeof(string));
                ph_tbl.Columns.Add("col1_L", typeof(string));
                ph_tbl.Columns.Add("ch_col0", typeof(string)); //mcode
                ph_tbl.Columns.Add("ch_col1", typeof(string));//mname

                ph_tbl.Columns.Add("nm_col1", typeof(double));//subgrp clos
                ph_tbl.Columns.Add("nm_col2", typeof(double));//grp wise total
                //2nd dt
                ph_tbl.Columns.Add("col2_srn", typeof(string));
                ph_tbl.Columns.Add("ch_col2", typeof(string));//mcode
                ph_tbl.Columns.Add("ch_col3", typeof(string));//mname

                ph_tbl.Columns.Add("nm_col3", typeof(double));//subgrp closing
                ph_tbl.Columns.Add("nm_col4", typeof(double));      //grp total  

                dt1 = ph_tbl.Clone();
                dt2 = ph_tbl.Clone();
                header_n = "PROFIT & LOSS A/C";

                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS m_code,MGNAME AS m_name,SUM(CL) as dramt,acode as sb_code,aname as sb_name FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd IN (" + mq1 + ")  and 1=2 Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd IN (" + mq1 + ") and type like '%' and 1=2 and vchdate " + xprdRange1 + " GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd  IN (" + mq1 + ") and type like '%' and vchdate " + xprdRange + "  GROUP BY ACODE,branchcd  ) a,famst b,type c where  substr(TRIM(b.grp),1,2)=trim(c.type1)  and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)-sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='3' GROUP BY MGCODE,MGNAME,aname,acode order by m_code,sb_name";
                dtoutflow = fgen.getdata(frm_qstr, frm_cocd, SQuery); //for left side at top of report          

                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS mcode,MGNAME AS mname,SUM(CL)*(-1) as cramt,acode as sbcode,aname as sbname FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd IN (" + mq1 + ")  and 1=2 Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd IN (" + mq1 + ") and type like '%'  and 1=2 and vchdate " + xprdRange1 + " GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd  IN (" + mq1 + ") and type like '%' and vchdate " + xprdRange + "  GROUP BY ACODE,branchcd  ) a,famst b,type c where  substr(TRIM(b.grp),1,2)=trim(c.type1)  and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)-sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1)='2' GROUP BY MGCODE,MGNAME,aname,acode order by mcode,sbname";
                dtinflow = fgen.getdata(frm_qstr, frm_cocd, SQuery); //for right side at top of report

                dtindr = new DataTable();
                SQuery = "SELECT  '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, MGCODE AS m_code,MGNAME AS m_name,SUM(CL) as dramt,acode as sb_code,aname as sb_name FROM (select  b.bssch as subgrpcode,c.type1 as mgcode, c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd IN (" + mq1 + ")  and 1=2 Union all   select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd IN (" + mq1 + ") and type like '%'  and 1=2 and vchdate " + xprdRange1 + " GROUP BY ACODE,branchcd  union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd  IN (" + mq1 + ") and type like '%' and vchdate " + xprdRange + "  GROUP BY ACODE,branchcd  ) a,famst b,type c where  substr(TRIM(b.grp),1,2)=trim(c.type1)  and c.id='Z' and trim(a.acode)=trim(b.acode) group by a.branchcd,trim(a.acode),b.aname,c.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)-sum(a.ccr))!='0' ORDER BY mgcode,aCODE) where substr(trim(mgcode),1,1) in ('4','5','6') GROUP BY MGCODE,MGNAME,aname,acode order by m_code,sb_name";
                dtindr = fgen.getdata(frm_qstr, frm_cocd, SQuery);  //for left side at bottom of report
                m = dtinflow.Rows.Count;


                cnt = 0; db = 0; db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0;
                dr1 = null;

                //foreach (DataRow dr in dtinflow.Rows)
                foreach (DataRow dr in dtoutflow.Rows)
                {
                    if (mq1 != dr["m_code"].ToString())
                    {
                        dr1 = ph_tbl.NewRow();
                        // dr1["nm_col2"] = db5; //for subtotal   
                        if (ph_tbl.Rows.Count > 0)
                        {
                            ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;//for subtotal
                            db5 = 0;
                        }
                        dr1["ch_col0"] = dr["m_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["m_name"].ToString().Trim();
                        ph_tbl.Rows.Add(dr1);
                        mq1 = dr["m_code"].ToString().Trim();
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db += fgen.make_double(dr["dramt"].ToString().Trim()); //total 
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim());
                        ph_tbl.Rows.Add(dr1);
                    }
                    else
                    {
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db += fgen.make_double(dr["dramt"].ToString().Trim()); //total 
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim());//subtotal                       
                        ph_tbl.Rows.Add(dr1);
                    }
                    cnt++;
                    // dr1["col1_srn"] = "1";
                }
                if (dtoutflow.Rows.Count > 0)
                {
                    dr1 = ph_tbl.NewRow();
                    // ph_tbl.Rows[0]["nm_col2"] = db; //for total
                    ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;
                }
                mq1 = "";

                cnt = 0;
                db5 = 0; db6 = 0;
                ///2nd dt
                foreach (DataRow dr in dtinflow.Rows)
                {
                    if (mq1 != dr["mcode"].ToString())
                    {
                        j = ph_tbl.Rows.Count;
                        if (cnt > 0)
                        {
                            //ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col4"] = db6;//for subtotal
                            ph_tbl.Rows[cnt - 1]["nm_col4"] = db6;
                            db6 = 0;
                        }
                        if (cnt >= j)
                        {
                            dr1 = ph_tbl.NewRow();
                            ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col4"] = db6;//for subtotal
                            //ph_tbl.Rows[cnt - 1]["nm_col6"] = db6;
                            db5 = 0;
                            dr1["ch_col2"] = dr["mcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["mname"].ToString().Trim();
                            dr1 = ph_tbl.NewRow();
                            mq1 = dr["mcode"].ToString().Trim();
                        }
                        else
                        {
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["mcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["mname"].ToString().Trim();
                            mq1 = dr["mcode"].ToString().Trim();
                        }
                        cnt = cnt + 1;

                        if (cnt >= j)
                        {
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                            dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                            db1 += fgen.make_double(dr["cramt"].ToString().Trim());//total
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());//subtotal
                            ph_tbl.Rows.Add(dr1);
                        }
                        else
                        {
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                            ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                            db1 += fgen.make_double(dr["cramt"].ToString().Trim());
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());
                        }
                    }
                    //////
                    else
                    {
                        k = ph_tbl.Rows.Count;
                        if (cnt >= k)
                        {
                            dr1 = ph_tbl.NewRow();
                            dr1["ch_col2"] = dr["sbcode"].ToString().Trim();
                            dr1["ch_col3"] = dr["sbname"].ToString().Trim();
                            dr1["nm_col3"] = dr["cramt"].ToString().Trim();
                            db1 += fgen.make_double(dr["cramt"].ToString().Trim());
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());
                            ph_tbl.Rows.Add(dr1);
                        }
                        else
                        {
                            // dr1 = ph_tbl.NewRow();
                            ph_tbl.Rows[cnt]["ch_col2"] = dr["sbcode"].ToString().Trim();
                            ph_tbl.Rows[cnt]["ch_col3"] = dr["sbname"].ToString().Trim();
                            ph_tbl.Rows[cnt]["nm_col3"] = dr["cramt"].ToString().Trim();
                            db1 += fgen.make_double(dr["cramt"].ToString().Trim());
                            db6 += fgen.make_double(dr["cramt"].ToString().Trim());
                            //ph_tbl.Rows.Add(dr1);
                        }
                    }
                    cnt++;
                }
                dr1["col2_srn"] = "2";
                a = ph_tbl.Rows.Count;
                m = 0; n = 0;
                m = dtoutflow.Rows.Count;
                n = dtinflow.Rows.Count;
                if (m > n)
                {
                    ph_tbl.Rows[cnt - 1]["nm_col4"] = db6; //subtotal
                }
                else
                {
                    ph_tbl.Rows[a - 1]["nm_col4"] = db6; //subtotal
                }
                //  ph_tbl.Rows[0]["nm_col4"] = db1;//total

                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                //ph_tbl.Rows[0]["nm_col4"] = db1;

                db2 = db1 - db;
                if (db1 > db)
                {
                    d = ph_tbl.Rows.Count;
                    dr1 = ph_tbl.NewRow();
                    ph_tbl.Rows.InsertAt(dr1, d + 1);
                    dr1["ch_col1"] = "GROSS PROFIT C/F";
                    dr1["col1_srn"] = 1;
                    dr1["col1_L"] = "L"; //take this field for draw a line into report
                    dr1["nm_col2"] = db2;
                }
                else
                {
                    d = ph_tbl.Rows.Count;
                    dr1 = ph_tbl.NewRow();
                    ph_tbl.Rows.InsertAt(dr1, d + 1);
                    dr1["ch_col1"] = "GROSS LOSS C/F";
                    dr1["col1_srn"] = 1;
                    dr1["col1_L"] = "L";
                    dr1["nm_col2"] = db2;
                }
                //add new row after gross profit/loss
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                dr1["ch_col1"] = "TOTAL";
                dr1["ch_col3"] = "TOTAL";
                dr1["nm_col2"] = db1;
                dr1["nm_col4"] = db1;
                dr1["col1_srn"] = "1";
                dr1["col1_L"] = "L";
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1 + 1);
                ///// 3rd dt another way

                c = 0;
                foreach (DataRow dr in dtindr.Rows)
                {
                    int j = ph_tbl.Rows.Count;
                    if (mq1 != dr["m_code"].ToString())
                    {
                        dr1 = ph_tbl.NewRow();
                        ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;//for subtotal
                        db5 = 0;
                        dr1["ch_col0"] = dr["m_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["m_name"].ToString().Trim();
                        if (c == 0)
                        {
                            if (db1 > db)
                            {
                                dr1["ch_col3"] = "GROSS PROFIT B/F";
                                dr1["nm_col4"] = db2;
                                //dr1["col1_srn"] = 2;
                            }
                            else
                            {
                                dr1["ch_col3"] = "GROSS LOSS B/F";
                                dr1["nm_col4"] = db2;
                                // dr1["col1_srn"] = 2;
                            }
                        }
                        c++;
                        ph_tbl.Rows.InsertAt(dr1, j + 1);
                        mq1 = dr["m_code"].ToString().Trim();
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db3 += fgen.make_double(dr["dramt"].ToString().Trim()); //total  
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim()); //subtotal
                        ph_tbl.Rows.InsertAt(dr1, j + 1 + 1);
                    }
                    else
                    {
                        dr1 = ph_tbl.NewRow();
                        dr1["ch_col0"] = dr["sb_code"].ToString().Trim();
                        dr1["ch_col1"] = dr["sb_name"].ToString().Trim();
                        dr1["nm_col1"] = dr["dramt"].ToString().Trim();
                        db3 += fgen.make_double(dr["dramt"].ToString().Trim()); //total                          
                        db5 += fgen.make_double(dr["dramt"].ToString().Trim());//subtotal
                        ph_tbl.Rows.InsertAt(dr1, j + 1);
                    }
                    cnt++;
                }

                ph_tbl.Rows[ph_tbl.Rows.Count - 1]["nm_col2"] = db5;
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                // ph_tbl.Rows[0]["nm_col2"] = db3;...need this row add on top of third table
                //db2 is gross profit
                db4 = db2 - db3;
                if (db2 > db3)
                {
                    d = ph_tbl.Rows.Count;
                    dr1 = ph_tbl.NewRow();
                    ph_tbl.Rows.InsertAt(dr1, d + 1);
                    dr1["ch_col1"] = "NET PROFIT";
                    dr1["nm_col2"] = db4;
                    dr1["col1_srn"] = 1;
                    dr1["col1_L"] = "L";
                }
                else
                {
                    d = ph_tbl.Rows.Count;
                    dr1 = ph_tbl.NewRow();
                    ph_tbl.Rows.InsertAt(dr1, d + 1);
                    dr1["ch_col1"] = "NET LOSS";
                    dr1["nm_col2"] = db4;
                    dr1["col1_srn"] = 1;
                    dr1["col1_L"] = "L";
                }
                //add new row after gross profit/loss
                d = ph_tbl.Rows.Count;
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1);
                //ph_tbl.Columns.Add("total", typeof(string));
                //ph_tbl.Rows[0]["total"] = db2; //for alag se total dikhane ke liye
                dr1["ch_col1"] = "TOTAL";
                dr1["nm_col2"] = db2;
                dr1["nm_col4"] = db2;
                dr1["ch_col3"] = "TOTAL";
                dr1["col1_srn"] = "1";
                dr1["col1_L"] = "L";
                dr1 = ph_tbl.NewRow();
                ph_tbl.Rows.InsertAt(dr1, d + 1 + 1);

                ph_tbl.Columns.Add("header");
                ph_tbl.Columns.Add("fromdt");
                ph_tbl.Columns.Add("todt");
                ph_tbl.Rows[0]["header"] = header_n;
                ph_tbl.Rows[0]["fromdt"] = fromdt;
                ph_tbl.Rows[0]["todt"] = todt;
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_P_L_detail", "std_P_L_detail", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70141":
            case "F70298":
                #region Statement of Account OLD
                //xprd1 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy') -1";
                //cond = "";
                //branch_Cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_BRANCH_CD");
                //if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3").Length > 1) cond = " and trim(acode)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3") + "'";
                //if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3").Length > 1 && fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR4").Length > 1) cond = " and trim(acode) between '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3") + "' and '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR4") + "'";

                //mq0 = "select a.ACODE ,a.email,a.ANAME AS iname,a.ADDR1 AS cpartno,a.ADDR2 AS issu_uom,a.PERSON AS unit,a.GIRNO AS binno,NVL(b.opb,0) as iopqty from FAMST a left outer join (select acode,sum(yr_" + frm_myear + ") as opb from famstbal where " + branch_Cd + " " + cond + " group by acode) b on trim(a.acode)=trim(B.acode) order by a.Acode";
                //mq1 = "select ACODE,sum(nvl(DRAMT,0))-sum(nvl(CRAMT,0)) as obal from voucher where " + branch_Cd + " and VCHDATE " + xprd1 + " " + cond + " GROUP BY ACODE";
                //mq2 = "Select r.Acode,r.iname,r.cpartno,r.unit,r.email as p_email,r.issu_uom,r.binno,r.iopqty,nvl(s.obal,0) as obal from (" + mq0 + ")r left outer join (" + mq1 + ") s on r.Acode=s.Acode ";

                //mq3 = "select A.TYPE,A.VCHNUM,A.VCHDATE,a.ACODE,(case when a.type like '4%' then 'Sale Bill No.'||a.vchnum||' '||a.naration else'Chq.No.'||max(a.invno)||' Dt.'||to_char(A.vchdate,'DD/MM/YYYY')||' '||a.naration end) as naration,nvl(b.aname,'-') Rname,b.email as p_email,A.RCODE,0 AS REJ_RW,(case when sum(A.DRAMT)-sum(A.CRAMT)>0 then ABS(sum(A.DRAMT)-sum(A.CRAMT)) else 0 end) AS IQTYIN,(case when sum(A.DRAMT)-sum(A.CRAMT)>0 then 0 else abs(sum(A.DRAMT)-sum(A.CRAMT)) end) AS IQTYOUT,max(a.invno) as invno,max(a.invdate) as invdate from voucher A ,FAMST B where a.Rcode=b.acode and a." + branch_Cd + " and A.VCHDATE " + xprdRange + " group by A.TYPE,A.VCHNUM,A.VCHDATE,a.ACODE,a.naration,nvl(b.aname,'-'),b.email,A.RCODE,to_char(A.vchdate,'DD/MM/YYYY') ";

                //mq3 = "Select x.TYPE,x.VCHNUM,x.VCHDATE,x.ACODE,X.RCODE,nvl(x.IQTYIN,0) as iqtyin,nvl(x.IQTYOUT,0) as iqtyout,nvl(x.rej_rw,0) as rej_rw,x.naration,x.invno,x.invdate,x.Rname,nvl(y.name,'-') as name,x.p_email from (" + mq3 + ")x left outer join (select type1,name,addr2 from type where id='V') y on x.type=y.type1";
                //mq4 = "select '" + fromdt + "' as frmdate,'" + todt + "' as todate,i.Acode,i.iname,nvl(i.cpartno,'-') as cpartno,nvl(i.issu_uom,'-') as issu_uom,nvl(i.unit,0) as unit,nvl(i.binno,'-') as binno,i.iopqty,i.obal,nvl(v.TYPE,'-') as type,nvl(v.VCHNUM,'-') as vchnum,v.VCHDATE,v.RCODE,nvl(v.iqtyin,0) ";
                //mq5 = "as iqtyin,nvl(v.iqtyout,0) as iqtyout,nvl(v.rej_rw,0) as rej_rw,v.naration,v.invno,v.invdate,nvl(v.Rname,'-') as aname,i.p_email, substr(nvl(v.name,'-'),1,4) as Tname,'" + frm_mbr + "' as bcode,'" + fromdt + "' as cdt1,'" + todt + "' as cdt2 from (" + mq2 + ")";
                //mq6 = " i left outer join (" + mq3 + ") v on i.Acode=v.Acode order by i.Acode,v.vchdate,v.type,v.vchnum";

                //SQuery = mq4 + mq5 + mq6;

                //SQuery = ("select g.* from (" + SQuery + ") g where G.IOPQTY!=0 OR G.OBAL!=0 OR G.IQTYIN!=0 OR G.IQTYOUT!=0  order  by g.Acode,g.vchdate,g.type,g.vchnum ");

                //dt = new DataTable();
                //dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                //if (dt.Rows.Count > 0)
                //{
                //    dt.TableName = "Prepcur";
                //    dsRep.Tables.Add(fgen.mTitle(dt, repCount));

                //    Print_Report_BYDS(frm_cocd, frm_mbr, "stac", "stac", dsRep, header_n);
                //}
                #endregion
                #region Statement of Account And Cross Year Account Ledger
                cond = "";
                string REQ_VAPP = "";
                REQ_VAPP = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT OPT_ENABLE FROM FIN_RSYS_OPT WHERE OPT_ID='W0096'", "OPT_ENABLE");
                //if (fgenMV.Fn_Get_Mvar(Uniq_QSTR, "REQ_APP") == "Y" && voucherType.Left(1) == "5")
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                part_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE");

                if (party_cd.Trim().Length <= 1)
                {
                    party_cd = "%";
                }
                if (part_cd.Trim().Length <= 1)
                {
                    part_cd = "%";
                }
                cond = " and acode like '" + party_cd + "%' and icode like '" + part_cd + "%' ";
                cond1 = " and acode like '" + party_cd + "%'";
                branch_Cd = "branchcd='" + frm_mbr + "'";

                if (part_cd.Contains("'"))
                {
                    cond = " and acode in (" + part_cd + ") and icode like '" + part_cd + "%' ";
                    cond1 = "and acode " + (part_cd.ToString().Length > 2 ? " in (" + part_cd + ")" : "like '%'");
                    if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_VAL1").ToString().Length > 1 && part_cd.Length < 3) cond1 = " and acode like '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_VAL1").ToString() + "%'";
                    if (party_cd.Contains("'"))
                        branch_Cd = "branchcd IN (" + party_cd + ")";
                    else branch_Cd = "branchcd='" + frm_mbr + "'";
                }

                if (iconID == "F70298****")
                {
                    if (party_cd.Contains("'"))
                    {
                        cond = " and acode in (" + party_cd + ")";
                        cond1 = "and acode " + (party_cd.ToString().Length > 2 ? " in (" + party_cd + ")" : "like '%'");
                        if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_VAL1").ToString().Length > 1 && party_cd.Length < 3) cond1 = " and acode like '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_VAL1").ToString() + "%'";
                        branch_Cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_BRANCH_CD");
                    }
                }
                if (iconID == "F70141")
                {
                    if (party_cd.Contains("'"))
                        branch_Cd = "branchcd IN (" + party_cd + ")";
                    else branch_Cd = "branchcd not in ('DD','88')";

                    cond1 = "and acode " + (part_cd.ToString().Length > 2 ? " in (" + part_cd + ")" : "like '%'");
                    //if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_VAL1").ToString().Length > 1 && part_cd.Length < 3) cond1 = " and acode like '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_VAL1").ToString() + "%'";
                }

                //if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3").Length > 1) cond = " and trim(acode)='" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3") + "'";
                //if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3").Length > 1 && fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR4").Length > 1) cond = " and trim(acode) between '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR3") + "' and '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR4") + "'";
                year = frm_cDt1.Substring(6, 4);
                string yr_for_opbal = "";
                if (Convert.ToDateTime(frm_cDt1) > Convert.ToDateTime(fromdt))
                {
                    mq0 = "SELECT to_char(fmdate,'dd/mm/yyyy') As yr_for FROM co WHERE code like '" + frm_cocd + "%' and to_Date('" + fromdt + "','dd/mm/yyyy') between fmdate and todate ";
                    yr_for_opbal = fgen.seek_iname(frm_qstr, frm_cocd, mq0, "yr_for");

                    frm_cDt1 = Convert.ToDateTime(yr_for_opbal).ToString("dd/MM/yyyy");
                    year = frm_cDt1.Substring(6, 4);


                }
                xprd1 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy') -1";
                mq0 = ""; mq1 = ""; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = ""; mq6 = "";
                if (iconID == "F70141")
                {
                    mq0 = "select a.ACODE ,a.email,a.ANAME AS iname,a.ADDR1 AS cpartno,a.ADDR2 AS issu_uom,a.PERSON AS unit,a.GIRNO AS binno,NVL(b.opb,0) as iopqty,'" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_TAXVAR") + " : '||a.gst_no||' Phone No. : '||a.mobile as gstno,a.grp,x.name as grpname from FAMST a left outer join (select acode,sum(nvl(yr_" + frm_myear + ",0)) as opb from famstbal where " + branch_Cd + " " + cond1 + " group by acode) b on trim(a.acode)=trim(B.acode), type x where trim(A.grp)=trim(x.type1) and x.id='Z' order by a.Acode";
                    mq1 = "select ACODE,sum(nvl(DRAMT,0))-sum(nvl(CRAMT,0)) as obal from voucher where " + branch_Cd + " and VCHDATE " + xprdRange1 + " " + cond1 + " GROUP BY ACODE";
                }
                if (iconID == "F70298")
                {
                    xprd1 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy') -1";
                    mq0 = "select a.ACODE ,a.email,a.ANAME AS iname,a.ADDR1 AS cpartno,a.ADDR2 AS issu_uom,a.PERSON AS unit,a.GIRNO AS binno,NVL(b.opb,0) as iopqty,'" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_TAXVAR") + " : '||a.gst_no||' Phone No. : '||a.mobile as gstno,a.grp,x.name as grpname from FAMST a left outer join (select acode,sum(nvl(yr_" + year + ",0)) as opb from famstbal where " + branch_Cd + " " + cond1 + " group by acode) b on trim(a.acode)=trim(B.acode), type x where trim(A.grp)=trim(x.type1) and x.id='Z' order by a.Acode";
                    mq1 = "select ACODE,sum(nvl(DRAMT,0))-sum(nvl(CRAMT,0)) as obal from voucher where " + branch_Cd + " and VCHDATE " + xprd1 + " " + cond1 + " GROUP BY ACODE";


                    //mq0 = "select a.ACODE ,a.email,a.ANAME AS iname,a.ADDR1 AS cpartno,a.ADDR2 AS issu_uom,a.PERSON AS unit,a.GIRNO AS binno,NVL(b.opb,0) as iopqty,'" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_TAXVAR") + " : '||a.gst_no||' Phone No. : '||a.mobile as gstno,a.grp,x.name as grpname from FAMST a left outer join (select acode,sum(yr_" + year + ") as opb from famstbal where " + branch_Cd + " " + cond1 + " group by acode) b on trim(a.acode)=trim(B.acode), type x where trim(A.grp)=trim(x.type1) and x.id='Z' order by a.Acode";
                    //mq1 = "select ACODE,sum(nvl(DRAMT,0))-sum(nvl(CRAMT,0)) as obal from voucher where " + branch_Cd + " and VCHDATE " + xprd1 + " " + cond1 + " GROUP BY ACODE";
                }

                string unApprRemarks = "";
                if (fgen.getOption(frm_qstr, frm_cocd, "W0096", "OPT_ENABLE") == "Y")
                    unApprRemarks = "||(CASE WHEN TRIM(NVL(A.APP_BY,'-'))='-' and ABS(sum(A.DRAMT)-sum(A.CRAMT))=0 THEN ' Un-Approved' else '' end)";

                mq2 = "Select r.Acode,r.iname,r.cpartno,r.unit,r.email as p_email,r.issu_uom,r.gstno,r.grp,r.grpname,r.binno,r.iopqty,nvl(s.obal,0) as obal from (" + mq0 + ")r left outer join (" + mq1 + ") s on r.Acode=s.Acode ";
                mq3 = "select a.branchcd,A.TYPE,A.VCHNUM,A.VCHDATE,a.ACODE,(case when a.type like '4%' then (case when substr(upper(trim(a.naration)),1,8)='SALE INV' then '' else 'Sale Bill No.'||a.vchnum||'  ' end)||trim(a.naration) else (case when a.type like '5%' then (case when substr(upper(trim(a.naration)),1,6)='BILL N' THEN '' else 'Bill No.'||trim(nvl(a.invno,'-'))||' Dt. '||(case when trim(nvl(a.invno,'-')) = '-' then ' ' else to_char(a.invdate,'dd/mm/yyyy') end)||'  ' end)||trim(a.naration) else (case when substr(a.type,1,1) in ('1','2') then (case when trim(nvl(a.REFNUM,'-'))='-' then a.NARATION else 'Chq. No.'||trim(nvl(a.REFNUM,'-'))||' Dt. '||(case when trim(nvl(a.REFNUM,'-')) = '-' then '' else to_char(a.REFdate,'dd/mm/yyyy') end)||'  '||trim(a.naration) end) else (case when 'Y'='" + REQ_VAPP + "' and a.pflag='-' then a.naration else  a.naration end)end)end)end) as naration,trim(nvl(b.aname,'-'))" + unApprRemarks + " Rname,b.email as p_email,A.RCODE,0 AS REJ_RW,(case when sum(A.DRAMT)-sum(A.CRAMT)>0 then ABS(sum(A.DRAMT)-sum(A.CRAMT)) else 0 end) AS IQTYIN,(case when sum(A.DRAMT)-sum(A.CRAMT)>0 then 0 else abs(sum(A.DRAMT)-sum(A.CRAMT)) end) AS IQTYOUT,max(a.invno) as invno,max(a.invdate) as invdate from voucher A ,FAMST B where a.Rcode=b.acode and a." + branch_Cd + " and A.VCHDATE " + xprdRange + " " + cond1.ToUpper().Replace("ACODE", "A.ACODE") + " group by A.TYPE,A.VCHNUM,A.VCHDATE,a.ACODE,a.branchcd,trim(nvl(a.app_by,'-')),(case when a.type like '4%' then (case when substr(upper(trim(a.naration)),1,8)='SALE INV' then '' else 'Sale Bill No.'||a.vchnum||'  ' end)||trim(a.naration) else (case when a.type like '5%' then (case when substr(upper(trim(a.naration)),1,6)='BILL N' THEN '' else 'Bill No.'||trim(nvl(a.invno,'-'))||' Dt. '||(case when trim(nvl(a.invno,'-')) = '-' then ' ' else to_char(a.invdate,'dd/mm/yyyy') end)||'  ' end)||trim(a.naration) else (case when substr(a.type,1,1) in ('1','2') then (case when trim(nvl(a.REFNUM,'-'))='-' then a.naration else 'Chq. No.'||trim(nvl(a.REFNUM,'-'))||' Dt. '||(case when trim(nvl(a.REFNUM,'-')) = '-' then '' else to_char(a.REFdate,'dd/mm/yyyy') end)||'  '||trim(a.naration) end) else (case when 'Y'='" + REQ_VAPP + "' and a.pflag='-' then a.naration else  a.naration end)end)end)end),nvl(b.aname,'-'),b.email,A.RCODE,to_char(A.vchdate,'DD/MM/YYYY') ";
                mq3 = "Select x.branchcd,x.TYPE,x.VCHNUM,x.VCHDATE,x.ACODE,X.RCODE,nvl(x.IQTYIN,0) as iqtyin,nvl(x.IQTYOUT,0) as iqtyout,nvl(x.rej_rw,0) as rej_rw,x.naration,x.invno,x.invdate,x.Rname,nvl(y.name,'-') as name,x.p_email from (" + mq3 + ")x left outer join (select type1,name,addr2 from type where id='V') y on x.type=y.type1";
                mq4 = "select to_Char(to_Date('" + fromdt + "','dd/mm/yyyy'),'DD-Mon-YYYY') as frmdate,to_Char(to_Date('" + todt + "','dd/mm/yyyy'),'DD-Mon-YYYY') as todate,i.Acode,i.iname,i.gstno,i.grp,i.grpname,nvl(i.cpartno,'-') as cpartno,nvl(i.issu_uom,'-') as issu_uom,nvl(i.unit,0) as unit,nvl(i.binno,'-') as binno,i.iopqty,i.obal,nvl(v.TYPE,'-') as type,nvl(v.VCHNUM,'-') as vchnum,v.VCHDATE,v.RCODE,nvl(v.iqtyin,0) ";
                mq5 = "as iqtyin,nvl(v.iqtyout,0) as iqtyout,nvl(v.rej_rw,0) as rej_rw,trim(v.naration) as naration,v.invno,v.invdate,nvl(v.Rname,'-') as aname,i.p_email, substr(nvl(v.name,'-'),1,4) as Tname,v.branchcd as bcode,'" + fromdt + "' as cdt1,'" + todt + "' as cdt2 from (" + mq2 + ")";
                mq6 = " i left outer join (" + mq3 + ") v on i.Acode=v.Acode order by i.Acode,v.vchdate,v.type,v.vchnum";
                //famst
                SQuery = mq4 + mq5 + mq6;
                SQuery = ("select g.* from (" + SQuery + ") g where 1=1 " + cond1.ToUpper().Replace("ACODE", "g.ACODE") + " order by g.Acode,g.vchdate,g.type,g.vchnum ");
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    //pdfView = "N";//THIS IS FOR TESTING DUE TO PDF VIEE IS NOT OPENING
                    Print_Report_BYDS(frm_cocd, frm_mbr, "stac", "stac", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;
            case "F70141I":
                {
                    double tdays = 0;
                    party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                    part_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE");

                    if (party_cd.Trim().Length <= 1)
                    {
                        party_cd = "%";
                    }
                    if (part_cd.Trim().Length <= 1)
                    {
                        part_cd = "%";
                    }
                    double amt_for_int = 0.0;
                    double acintt = 18.00;
                    string last_tran = "";
                    double xrunbal = 0;
                    DataTable dtMain = new DataTable();
                    dtMain.Columns.Add("type");
                    dtMain.Columns.Add("vchnum");
                    dtMain.Columns.Add("bank_Date", typeof(DateTime));
                    dtMain.Columns.Add("vchdate", typeof(DateTime));
                    dtMain.Columns.Add("days", typeof(double));
                    dtMain.Columns.Add("aname");
                    dtMain.Columns.Add("opbal", typeof(double));
                    dtMain.Columns.Add("dramt", typeof(double));
                    dtMain.Columns.Add("cramt", typeof(double));
                    dtMain.Columns.Add("runbal", typeof(double));
                    dtMain.Columns.Add("intpay", typeof(double));
                    dtMain.Columns.Add("intrcv", typeof(double));
                    dtMain.Columns.Add("invno");
                    dtMain.Columns.Add("invdate", typeof(DateTime));
                    dtMain.Columns.Add("REFNUM");
                    dtMain.Columns.Add("REFDATE", typeof(DateTime));
                    dtMain.Columns.Add("NARATION");
                    dtMain.Columns.Add("NAR1");
                    dtMain.Columns.Add("vchr");
                    dtMain.Columns.Add("amount_type");
                    DataRow drMis = null;

                    string con_dtlstat = "", varyear = "", varcdt1 = "";
                    con_dtlstat = "branchcd='" + frm_mbr + "'";
                    int month = Convert.ToInt32(fromdt.Substring(3, 2).ToString());
                    year = fromdt.Substring(6, 4).ToString();

                    varcdt1 = frm_cDt1;


                    string muop_bal = fgen.seek_iname(frm_qstr, frm_cocd, "select sum(" + varyear + ") as op_bals from famstbal where " + con_dtlstat + " and trim(Acode) like '" + party_cd + "%'", "op_bals");
                    string xprdrange = " between to_Date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy')-1 ";
                    string prevp_bal = fgen.seek_iname(frm_qstr, frm_cocd, "select sum(dramt)-sum(Cramt) as prev_bals from voucher where " + con_dtlstat + " and vchdate " + xprdrange + " and trim(Acode) like '" + party_cd + "%'", "prev_bals");
                    xprdrange = " between to_Date('" + fromdt + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy') ";
                    string curr_prd = fgen.seek_iname(frm_qstr, frm_cocd, "select sum(dramt)-sum(Cramt) as prev_bals from voucher where " + con_dtlstat + " and vchdate " + xprdrange + " and trim(Acode) like '" + party_cd + "%'", "prev_bals");
                    string Drill_Caption = "Grouped Ledger for Selected Accounts During " + fromdt + " to " + todt;
                    decimal total = Convert.ToDecimal(Convert.ToDecimal(muop_bal) + Convert.ToDecimal(prevp_bal) + Convert.ToDecimal(curr_prd));
                    string seekSql = "select * from (Select '-' as Doc_no,to_datE('" + fromdt + "','dd/mm/yyyy') As Doc_Dt,'-' as type,'Opening Balance' as Account_name," + muop_bal + prevp_bal + " as Op_Cl_Bal,0 as Debit_amt,0 as Credit_Amt,0 as Cl_Balance,'-' as invno,to_datE('" + fromdt + "','dd/mm/yyyy') As invdate,'-' as naration,'-' as Acode,'-' as Rcode,'-' as TRN,'-' as refnum,to_datE('" + todt + "','dd/mm/yyyy') As refdate,-9999999 as srno,'-' as brcd from dual "
                                + "union all "
                                + " Select a.Vchnum,a.Vchdate,a.type,b.aname,0 as opening,a.dramt,a.cramt,0 as Cl_Balance,a.invno,a.invdate,a.naration,a.Acode,a.rcode,b.gst_no as TRN,a.refnum,a.refdate,1 as srno,a.branchcd from voucher a, famst b where trim(A.rcode)=trim(B.acode) and a." + con_dtlstat + " and a.vchdate " + xprdrange + " and a.acode  like '" + party_cd + "%' union all "
                                + " Select '-' as Vchnum,to_datE('" + fromdt + "','dd/mm/yyyy') As vchdate,'-' as type,'Closing Balance' as aname," + total + " as Opening,0 as dramt,0 as cramt,0 as Cl_Balance,'-' as invno,to_datE('" + todt + "','dd/mm/yyyy') As invdate,'-' as naration,'-' as Acode,'-' as Rcode,'-' as Trn,'-' as refnum,to_datE('" + todt + "','dd/mm/yyyy') As refdate,10000000,'-' from dual) order by srno,doc_Dt,type ";

                    double mybal = 0;
                    mybal = Convert.ToDouble(Convert.ToDecimal(muop_bal) + Convert.ToDecimal(prevp_bal));

                    DataTable SO_TGTVA = new DataTable();
                    SO_TGTVA = fgen.getdata(frm_qstr, frm_cocd, seekSql);

                    string startdt = "";
                    string first_ent = "";
                    string vchdate = "";
                    string vchnum = "";
                    string runbal = "", bank_date = "";
                    int days = 0;
                    int ctr = 1;
                    double opbal = 0.0;
                    double dramt = 0.0;
                    double cramt = 0.0;
                    int rep_Days = 0;
                    string xdays = "";
                    first_ent = "Y";

                    startdt = fromdt.ToString();
                    foreach (DataRow dr in SO_TGTVA.Rows)
                    {
                        drMis = dtMain.NewRow();
                        drMis["vchnum"] = dr["DOC_NO"].ToString().Trim();
                        drMis["vchdate"] = dr["DOC_DT"].ToString().Trim();
                        drMis["aname"] = dr["ACCOUNT_NAME"].ToString().Trim();
                        drMis["opbal"] = dr["OP_CL_BAL"].ToString().Trim();
                        drMis["dramt"] = dr["DEBIT_AMT"].ToString().Trim();
                        drMis["cramt"] = dr["CREDIT_AMT"].ToString().Trim();
                        drMis["runbal"] = dr["CL_BALANCE"].ToString().Trim();

                        last_tran = dr["DOC_DT"].ToString().Trim();
                        rep_Days = Convert.ToInt32((Convert.ToDateTime(todt) - Convert.ToDateTime(fromdt)).TotalDays);




                        vchdate = dr["DOC_DT"].ToString().Trim();
                        vchnum = dr["DOC_NO"].ToString().Trim();
                        opbal = Convert.ToDouble(dr["OP_CL_BAL"].ToString());
                        dramt = Convert.ToDouble(dr["DEBIT_AMT"].ToString());
                        cramt = Convert.ToDouble(dr["CREDIT_AMT"].ToString());
                        runbal = dr["CL_BALANCE"].ToString().Trim();


                        if (rep_Days < 0)
                        {
                            xdays = (Convert.ToInt32((Convert.ToDateTime(vchdate) - Convert.ToDateTime(startdt)).TotalDays) + 1).ToString();
                            drMis["days"] = xdays;
                            // REPL days with (vchdate-startdt)+1;
                        }
                        else
                        {
                            xdays = ((Convert.ToDateTime(vchdate) - Convert.ToDateTime(startdt)).TotalDays).ToString();
                            drMis["days"] = xdays;
                            //REPL days with (vchdate-startdt);
                        }
                        startdt = vchdate;
                        if (ctr == 1)
                        {

                            tdays = fgen.make_double(xdays);
                            tdays = tdays + 1;
                            drMis["opbal"] = mybal.ToString();
                            drMis["days"] = xdays + 1;
                            //REPL opbal with mybal,days with days+1;
                            ctr = ctr + 1;
                        }
                        xrunbal = xrunbal + opbal + dramt - cramt;
                        drMis["runbal"] = xrunbal;
                        //REPL runbal with xrunbal

                        if (xrunbal < 0)
                        {
                            drMis["amount_type"] = " Cr";
                        }
                        else
                        {
                            drMis["amount_type"] = " Dr";
                        }

                        if (first_ent == "Y")
                        {
                            amt_for_int = opbal;
                        }
                        else
                        {
                            amt_for_int = xrunbal - (dramt - cramt);
                        }
                        first_ent = "N";
                        if (Math.Round((acintt / 100) * (xdays.toDouble() / 365) * xrunbal, 2) <= 0)
                        {
                            drMis["intrcv"] = (Math.Round((acintt / 100) * (xdays.toDouble() / 365) * amt_for_int, 2)).ToString();
                            //REPL intpay with round((acintt/100)(days/365)*amt_for_int,2)-1;
                        }
                        else
                        {
                            drMis["intpay"] = (Convert.ToDecimal(Math.Round((acintt / 100) * (xdays.toDouble() / 365) * amt_for_int, 2))).ToString();

                            //REPL intrcv with round((acintt/100)*(days/365)*amt_for_int,2);
                        }
                        drMis["invno"] = dr["INVNO"].ToString().Trim();
                        drMis["invdate"] = dr["INVDATE"].ToString().Trim();
                        drMis["REFNUM"] = dr["REFNUM"].ToString().Trim();
                        drMis["REFDATE"] = fgen.make_def_Date(dr["REFDATE"].ToString().Trim(), System.DateTime.Now.ToString("dd/MM/yyyy"));
                        drMis["NARATION"] = dr["NARATION"].ToString().Trim();
                        drMis["NAR1"] = "-";
                        drMis["vchr"] = "-";
                        dtMain.Rows.Add(drMis);

                        last_tran = dr["DOC_DT"].ToString().Trim();
                    }

                    if (last_tran != todt)
                    {
                        drMis["vchnum"] = "-";
                        drMis["vchdate"] = vchdate;
                        //drMis["bank_Date"] = vchdate;
                        drMis["aname"] = "-";
                        drMis["dramt"] = "0";
                        drMis["cramt"] = "0";
                        drMis["invno"] = "-";
                        drMis["invdate"] = fgen.make_def_Date(vchdate, System.DateTime.Now.ToString("dd/MM/yyyy")); ;
                        drMis["type"] = "-";
                        //  string type = "-";
                        drMis["REFNUM"] = "-";
                        drMis["REFDATE"] = fgen.make_def_Date(vchdate, System.DateTime.Now.ToString("dd/MM/yyyy")); ;
                        drMis["NARATION"] = "Up to Date";
                        drMis["NAR1"] = "-";
                        //REPL vchnum with '-',vchdate with dt2,bank_Date with vchdate,aname with '-',dramt with 0,cramt with 0,invno with '-',invdate with dt2 ,;
                        //type with '-',REFNUM with '-',REFDATE with dt2,NARATION with 'Up to Date',NAR1 with '-'


                        xdays = ((Convert.ToDateTime(todt) - Convert.ToDateTime(last_tran)).TotalDays).ToString();
                        drMis["days"] = xdays;
                        drMis["runbal"] = xrunbal.ToString();
                        //REPL days with (dt2-last_tran)
                        //REPL runbal with xrunbal

                        if (Math.Round((acintt / 100) * (xdays.toDouble() / 365) * xrunbal, 2) <= 0)
                        {
                            drMis["intrcv"] = (Math.Round((acintt / 100) * (xdays.toDouble() / 365) * xrunbal, 2)).ToString();

                            // REPL intpay with round((acintt/100)(days/365)*runbal,2)-1
                        }
                        else
                        {
                            drMis["intpay"] = (Convert.ToDecimal(Math.Round((acintt / 100) * (xdays.toDouble() / 365) * xrunbal, 2))).ToString();
                            // REPL intrcv with round((acintt/100)*(days/365)*runbal,2)
                        }
                    }

                    dsRep = new DataSet();
                    if (dtMain.Rows.Count > 0)
                    {
                        dsRep = new DataSet();
                        dtMain.TableName = "Prepcur";
                        dsRep.Tables.Add(dtMain);
                        //dsRep.Tables.Add(osage2);

                        //fgen.fin_purc_reps(frm_qstr);
                        Print_Report_BYDS(frm_cocd, frm_mbr, "so_intt", "so_intt", dsRep, "Statement of A/c with Intt Compute", "Y");
                    }
                }
                break;
            //by yogita....4.5.2018

            case "F70243":
                #region DETail OF UNSECURED LOAN
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");   //selected branch value        
                //SQuery = "select b.bssch as subgrpcode,c.type1 as mgcode, d.name as sub_grp,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd='" + frm_mbr + "' union all select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  GROUP BY aCODE,branchcd union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + " GROUP BY ACODE,branchcd) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(A.acode),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) AND A.ACODE IN ('" + mq1 + "') group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)-sum(a.ccr))>0 ORDER BY mgcode,aCODE";
                SQuery = "select b.bssch as subgrpcode,c.type1 as mgcode, d.name as sub_grp,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd='" + frm_mbr + "' union all select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  GROUP BY aCODE,branchcd union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + " GROUP BY ACODE,branchcd) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(A.acode),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) AND A.ACODE IN ('" + mq1 + "') group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname  ORDER BY mgcode,aCODE";//WITHPUT HAVING condition so that negetive op bal will also come...if op is negative then inerst will 0 else op is positive then calculation will working
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery); //op bal dt               
                //SQuery = "SELECT a.acode,b.aname, a.VCHNUM,TO_CHAR(a.VCHDATE,'DD/MM/YYYY') AS VCHDATE,TO_CHAR(a.VCHDATE,'YYYYMMDD') AS VDD,a.DRAMT,a.CRAMT  FROM VOUCHER a,famst b WHERE  trim(a.acode)=trim(b.acode) and a.BRANCHCD='" + mbr + "' AND SUBSTR(a.TYPE,1,1) IN ('1','2')  AND  a.VCHDATE " + xprdrange + " AND a.ACODE IN ('" + hfsale.Value + "') ORDER BY vdd";  // Min qry   IN THIS TYPE IS MENTIONED FOR REC AND PAYMENT LIKE 1,2             
                //SQuery = "SELECT a.acode,b.aname, a.VCHNUM,TO_CHAR(a.VCHDATE,'DD/MM/YYYY') AS VCHDATE,TO_CHAR(a.VCHDATE,'YYYYMMDD') AS VDD,sum(a.DRAMT) as dramt,sum(a.CRAMT) as cramt  FROM VOUCHER a,famst b WHERE  trim(a.acode)=trim(b.acode) and a.BRANCHCD='" + mbr + "' AND  a.VCHDATE " + xprdrange + " AND a.ACODE IN ('" + hfsale.Value + "') group by a.acode,b.aname, a.VCHNUM,TO_CHAR(a.VCHDATE,'DD/MM/YYYY') ,TO_CHAR(a.VCHDATE,'YYYYMMDD') ORDER BY vdd";//this is vch and vchdate wise
                SQuery = "SELECT a.acode,b.aname,TO_CHAR(a.VCHDATE,'DD/MM/YYYY') AS VCHDATE,TO_CHAR(a.VCHDATE,'YYYYMMDD') AS VDD,sum(a.DRAMT) as dramt,sum(a.CRAMT) as cramt,b.RATEINT AS RATE  FROM VOUCHER a,famst b WHERE  trim(a.acode)=trim(b.acode) and a.BRANCHCD='" + frm_mbr + "' AND  a.VCHDATE " + xprdRange + " AND a.ACODE IN ('" + mq1 + "') group by a.acode,b.aname,TO_CHAR(a.VCHDATE,'DD/MM/YYYY') ,TO_CHAR(a.VCHDATE,'YYYYMMDD'),b.RATEINT  ORDER BY vdd";

                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                ph_tbl = new DataTable();
                ph_tbl.Columns.Add("fstr", typeof(string));
                ph_tbl.Columns.Add("acode", typeof(string));
                ph_tbl.Columns.Add("aname", typeof(string));
                ph_tbl.Columns.Add("Balance", typeof(string));
                ph_tbl.Columns.Add("fromdt", typeof(string));
                ph_tbl.Columns.Add("todt", typeof(string));
                ph_tbl.Columns.Add("from", typeof(string));
                ph_tbl.Columns.Add("to", typeof(string));
                ph_tbl.Columns.Add("Total Days", typeof(double));
                ph_tbl.Columns.Add("Rate %", typeof(string));
                ph_tbl.Columns.Add("Interest", typeof(double));
                dr1 = null;
                mq1 = ""; db = 0; db1 = 0; db2 = 0; double rate = 0; mq2 = ""; mq3 = ""; mq4 = ""; int g = 0, h = 0; mq5 = ""; mq8 = ""; mq9 = ""; m = 0; n = 0; cnt = 0;
                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i <= dt1.Rows.Count; i++)
                    {
                        #region
                        m = dt1.Rows.Count;
                        n = ph_tbl.Rows.Count;
                        if (m != n)
                        {
                            db4 = 0; mq6 = ""; mq7 = "";
                            dr1 = ph_tbl.NewRow();
                            dr1["acode"] = dt1.Rows[i]["acode"].ToString().Trim();
                            dr1["aname"] = dt1.Rows[i]["aNAME"].ToString().Trim();
                            dr1["fromdt"] = fromdt;
                            dr1["todt"] = todt;
                            rate = fgen.make_double(dt1.Rows[i]["rate"].ToString().Trim());
                            if (mq1 == "")
                            {
                                if (dt.Rows.Count > 0)
                                {
                                    dr1["Balance"] = dt.Rows[0]["opening"].ToString().Trim();
                                    mq1 = "1";
                                    db = fgen.make_double(dt.Rows[0]["opening"].ToString().Trim());
                                }
                                else
                                {
                                    dr1["Balance"] = 0;
                                    mq1 = "1";
                                }
                            }
                            else
                            {
                                if (fgen.make_double(dt1.Rows[i - 1]["dramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim()) == 0)
                                {
                                    dr1["Balance"] = fgen.make_double(ph_tbl.Rows[i - 1]["balance"].ToString().Trim()) + fgen.make_double(dt1.Rows[i - 1]["dramt"].ToString().Trim());
                                }
                                if (fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[i - 1]["dramt"].ToString().Trim()) == 0)
                                {
                                    dr1["Balance"] = fgen.make_double(ph_tbl.Rows[i - 1]["balance"].ToString().Trim()) - fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim());
                                }
                                if (fgen.make_double(dt1.Rows[i - 1]["dramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim()) != 0)
                                {
                                    db1 = fgen.make_double(ph_tbl.Rows[i - 1]["balance"].ToString().Trim()) + fgen.make_double(dt1.Rows[i - 1]["dramt"].ToString().Trim());
                                    db2 = db1 - fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim());
                                    dr1["Balance"] = db2;
                                }
                            }
                            if (mq9 == "")
                            {
                                mq9 = "vch";
                                dr1["from"] = fromdt;
                                mq4 = dt1.Rows[i]["vchdate"].ToString().Trim();
                                mq3 = "select to_Date('" + mq4 + "','dd/mm/yyyy')-1 as dd from dual";
                                mq3 = fgen.seek_iname(frm_qstr, frm_cocd, mq3, "dd");
                                dr1["to"] = Convert.ToDateTime(mq3).ToString("dd/MM/yyyy");
                            }
                            else
                            {
                                mq4 = dt1.Rows[i - 1]["vchdate"].ToString().Trim(); //g-1
                                mq11 = dt1.Rows[i]["vchdate"].ToString().Trim();
                                mq3 = "select to_Date('" + mq11 + "','dd/mm/yyyy')-1 as dd from dual";
                                mq3 = fgen.seek_iname(frm_qstr, frm_cocd, mq3, "dd");
                                dr1["from"] = mq4;
                                dr1["to"] = Convert.ToDateTime(mq3).ToString("dd/MM/yyyy");
                            }
                            mq6 = Convert.ToDateTime(dr1["from"].ToString().Trim()).ToString("dd/MM/yyyy");
                            mq7 = Convert.ToDateTime(dr1["to"].ToString().Trim()).ToString("dd/MM/yyyy");

                            mq5 = "select to_Date('" + mq7 + "','dd/mm/yyyy')-to_date('" + mq6 + "','dd/mm/yyyy')  as dfd from dual";
                            mq5 = fgen.seek_iname(frm_qstr, frm_cocd, mq5, "dfd");
                            dr1["Total Days"] = fgen.make_double(mq5) + 1;
                            //for interest calculation...if year is leap year....jis year me feb aayegi usko divide by 4 krna hai...agar 0 aaya to leap year hua
                            //formula for interest....balance*rate/100*total days/365 if leap year then total days/366
                            //op 0 hai to no calculation...aagar 
                            if (fgen.make_double(dr1["Balance"].ToString().Trim()) < 0)
                            {
                                mq8 = todt.Substring(6, 4);
                                db3 = Convert.ToDouble(mq8) / 4;
                                if (db3 == 0)
                                {
                                    db4 = fgen.make_double(dr1["Balance"].ToString().Trim()) * rate / 100 * fgen.make_double(dr1["Total Days"].ToString().Trim()) / 366 * -1;
                                }
                                else
                                {
                                    db4 = fgen.make_double(dr1["Balance"].ToString().Trim()) * rate / 100 * fgen.make_double(dr1["Total Days"].ToString().Trim()) / 365 * -1;
                                }
                                dr1["Interest"] = Math.Round(db4, 2);
                            }
                            else
                            {
                                dr1["interest"] = 0;
                            }
                            dr1["Rate %"] = rate + "%";
                            ph_tbl.Rows.Add(dr1);
                            g++;
                        }
                        else
                        {
                            if (m == n)
                            {
                                dr1 = ph_tbl.NewRow();
                                dr1["acode"] = dt1.Rows[m - 1]["acode"].ToString().Trim();
                                dr1["aname"] = dt1.Rows[m - 1]["aNAME"].ToString().Trim();
                                dr1["fromdt"] = fromdt;
                                dr1["todt"] = todt;
                                rate = fgen.make_double(dt1.Rows[m - 1]["rate"].ToString().Trim());
                                if (fgen.make_double(dt1.Rows[m - 1]["dramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[m - 1]["cramt"].ToString().Trim()) == 0)
                                {
                                    dr1["Balance"] = fgen.make_double(ph_tbl.Rows[m - 1]["balance"].ToString().Trim()) + fgen.make_double(dt1.Rows[m - 1]["dramt"].ToString().Trim());
                                }
                                if (fgen.make_double(dt1.Rows[m - 1]["cramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[m - 1]["dramt"].ToString().Trim()) == 0)
                                {
                                    dr1["Balance"] = fgen.make_double(ph_tbl.Rows[m - 1]["balance"].ToString().Trim()) - fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim());
                                }
                                if (fgen.make_double(dt1.Rows[m - 1]["dramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[m - 1]["cramt"].ToString().Trim()) != 0)
                                {
                                    db1 = fgen.make_double(ph_tbl.Rows[m - 1]["balance"].ToString().Trim()) + fgen.make_double(dt1.Rows[m - 1]["dramt"].ToString().Trim());
                                    db2 = db1 - fgen.make_double(dt1.Rows[m - 1]["cramt"].ToString().Trim());
                                    dr1["Balance"] = db2;
                                }
                                mq4 = dt1.Rows[m - 1]["vchdate"].ToString().Trim();
                                dr1["from"] = mq4;
                                dr1["to"] = todt;
                                mq6 = Convert.ToDateTime(dr1["from"].ToString().Trim()).ToString("dd/MM/yyyy");
                                mq7 = Convert.ToDateTime(dr1["to"].ToString().Trim()).ToString("dd/MM/yyyy");
                                mq5 = "select to_Date('" + mq7 + "','dd/mm/yyyy')-to_date('" + mq6 + "','dd/mm/yyyy')  as dfd from dual";
                                mq5 = fgen.seek_iname(frm_qstr, frm_cocd, mq5, "dfd");
                                dr1["Total Days"] = Convert.ToInt32(mq5) + 1;
                                //for interest
                                if (fgen.make_double(dr1["Balance"].ToString().Trim()) < 0)
                                {
                                    mq8 = todt.Substring(6, 4);
                                    db3 = Convert.ToDouble(mq8) / 4;
                                    if (db3 == 0)
                                    {
                                        db4 = fgen.make_double(dr1["Balance"].ToString().Trim()) * rate / 100 * fgen.make_double(dr1["Total Days"].ToString().Trim()) / 366 * -1;
                                    }
                                    else
                                    {
                                        db4 = fgen.make_double(dr1["Balance"].ToString().Trim()) * rate / 100 * fgen.make_double(dr1["Total Days"].ToString().Trim()) / 365 * -1;
                                    }
                                    dr1["Interest"] = Math.Round(db4, 2);
                                }
                                else
                                {
                                    dr1["Interest"] = 0;
                                }
                                dr1["Rate %"] = rate + "%";
                            }
                            ph_tbl.Rows.Add(dr1);
                        }
                        #endregion
                    }
                }
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Unsecured_Details", "Unsecured_Details", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70244":
                #region Unsecured Summary
                //SQuery = "select trim(a.acode) as fstr, trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening from (Select A.branchcd,A.acode, a.yr_" + year + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd='" + mbr + "' union all select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd='" + mbr + "' and type like '%' and vchdate " + xprdrange1 + " GROUP BY aCODE,branchcd union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd='" + mbr + "' and type like '%' and vchdate " + xprdrange + " GROUP BY ACODE,branchcd) a,famst b where trim(a.acode)=trim(b.acode) and substr(trim(a.acode),1,2) in ('04') group by trim(a.acode),b.aname,b.aname having (sum(a.opening)+sum(a.cdr)-sum(a.ccr))>0 ORDER BY aCODE";                /////////tria bal query
                dtm = new DataTable();
                dtm.Columns.Add("fstr", typeof(string));
                dtm.Columns.Add("party", typeof(string));
                dtm.Columns.Add("Closing_Bal", typeof(double));
                dtm.Columns.Add("Interest", typeof(double));
                dtm.Columns.Add("Rate", typeof(double));
                dtm.Columns.Add("fromdt", typeof(string));
                dtm.Columns.Add("todt", typeof(string));
                dr1 = null;

                //SQuery = "select b.bssch as subgrpcode,c.type1 as mgcode, d.name as sub_grp,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + year + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd='" + mbr + "' union all select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd='" + mbr + "' and type like '%' and vchdate " + xprdrange1 + "  GROUP BY aCODE,branchcd union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd='" + mbr + "' and type like '%' and vchdate " + xprdrange + " GROUP BY ACODE,branchcd) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(A.acode),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) AND substr(trim(A.ACODE),1,2) IN ('04') group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having (sum(a.opening)+sum(a.cdr)-sum(a.ccr))>0 ORDER BY mgcode,aCODE";//WITH HAVING CONDITION
                SQuery = "select b.bssch as subgrpcode,c.type1 as mgcode, d.name as sub_grp,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening,nvl(sum(a.cdr),0) as drmt,nvl(sum(a.ccr),0) as crmt,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd='" + frm_mbr + "' union all select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  GROUP BY aCODE,branchcd union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + " GROUP BY ACODE,branchcd) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(A.acode),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode) AND substr(trim(A.ACODE),1,2) IN ('04') group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname  ORDER BY mgcode,aCODE"; //WITHOUT HAVING CONDITION
                // SQuery = "select trim(a.acode) as fstr, trim(a.acode) as acode,b.aname,nvl(sum(a.opening),0) as opening from (Select A.branchcd,A.acode, a.yr_" + year + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd='" + mbr + "' union all select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd='" + mbr + "' and type like '%' and vchdate " + xprdrange1 + " GROUP BY aCODE,branchcd union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd='" + mbr + "' and type like '%' and vchdate " + xprdrange + " GROUP BY ACODE,branchcd) a,famst b where trim(a.acode)=trim(b.acode) and substr(trim(a.acode),1,2) in ('04') group by trim(a.acode),b.aname,b.aname having (sum(a.opening)+sum(a.cdr)-sum(a.ccr))>0 ORDER BY aCODE";                /////////tria bal query
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery); //op bal dt
                // SQuery = "SELECT VCHNUM,TO_CHAR(VCHDATE,'DD/MM/YYYY') AS VCHDATE,TO_CHAR(VCHDATE,'YYYYMMDD') AS VDD,DRAMT,CRAMT ,acode FROM VOUCHER WHERE BRANCHCD='" + mbr + "' AND SUBSTR(TYPE,1,1) IN ('1','2') AND VCHDATE " + xprdrange + " AND ACODE IN ('" + hfsale.Value + "') ORDER BY VCHNUM,VDD";  //without joing with famst
                //SQuery = "SELECT a.acode,b.aname, a.VCHNUM,TO_CHAR(a.VCHDATE,'DD/MM/YYYY') AS VCHDATE,TO_CHAR(a.VCHDATE,'YYYYMMDD') AS VDD,a.DRAMT,a.CRAMT  FROM VOUCHER a,famst b WHERE  trim(a.acode)=trim(b.acode) and a.BRANCHCD='" + mbr + "' AND SUBSTR(a.TYPE,1,1) IN ('1','2') AND a.VCHDATE " + xprdrange + " AND substr(trim(a.ACODE),1,2) IN ('04')  ORDER BY vdd";//and a.acode in ('04R001','04M006') FOR MACHING USE THESE TWO ACODE
                SQuery = "SELECT a.acode,b.aname, TO_CHAR(a.VCHDATE,'DD/MM/YYYY') AS VCHDATE,TO_CHAR(a.VCHDATE,'YYYYMMDD') AS VDD,sum(a.DRAMT) as dramt,sum(a.CRAMT) as cramt,b.rateint as rate  FROM VOUCHER a,famst b WHERE  trim(a.acode)=trim(b.acode) and a.BRANCHCD='" + frm_mbr + "' AND a.VCHDATE " + xprdRange + " AND substr(trim(a.ACODE),1,2) IN ('04') group by a.acode,b.aname,TO_CHAR(a.VCHDATE,'DD/MM/YYYY') ,TO_CHAR(a.VCHDATE,'YYYYMMDD'),b.rateint ORDER BY vdd"; //AND SUBSTR(a.TYPE,1,1) IN ('1','2')  ...........for all type
                //SQuery = "SELECT a.acode,b.aname,TO_CHAR(a.VCHDATE,'DD/MM/YYYY') AS VCHDATE,TO_CHAR(a.VCHDATE,'YYYYMMDD') AS VDD,sum(a.DRAMT) as dramt,sum(a.CRAMT) as cramt  FROM VOUCHER a,famst b WHERE  trim(a.acode)=trim(b.acode) and a.BRANCHCD='" + mbr + "' AND  a.VCHDATE " + xprdrange + " AND a.ACODE IN ('" + hfsale.Value + "') group by a.acode,b.aname,TO_CHAR(a.VCHDATE,'DD/MM/YYYY') ,TO_CHAR(a.VCHDATE,'YYYYMMDD') ORDER BY vdd";
                dt2 = new DataTable();
                dt2 = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                if (dt2.Rows.Count > 0)
                {
                    DataView view1im = new DataView(dt2);
                    DataTable dtdrsim = new DataTable();
                    dtdrsim = view1im.ToTable(true, "ACODE"); //MAIN                  
                    foreach (DataRow dr0 in dtdrsim.Rows)
                    {
                        ph_tbl = new DataTable();
                        ph_tbl.Columns.Add("fstr", typeof(string));
                        ph_tbl.Columns.Add("acode", typeof(string));
                        ph_tbl.Columns.Add("aname", typeof(string));
                        ph_tbl.Columns.Add("Balance", typeof(string));
                        ph_tbl.Columns.Add("fromdt", typeof(string));
                        ph_tbl.Columns.Add("todt", typeof(string));
                        ph_tbl.Columns.Add("from", typeof(string));
                        ph_tbl.Columns.Add("to", typeof(string));
                        ph_tbl.Columns.Add("Total Days", typeof(double));
                        ph_tbl.Columns.Add("Rate %", typeof(string));
                        ph_tbl.Columns.Add("Interest", typeof(double));
                        ph_tbl.Columns.Add("Closing", typeof(double));
                        ph_tbl.Columns.Add("tot_intrest", typeof(double));

                        DataView viewim = new DataView(dt2, "ACODE='" + dr0["ACODE"] + "'", "", DataViewRowState.CurrentRows);
                        DataRow dr2 = dtm.NewRow();
                        dt1 = new DataTable();
                        dt1 = viewim.ToTable();
                        mq1 = "";
                        mq1 = ""; db = 0; db1 = 0; db2 = 0; db6 = 0; db7 = 0; rate = 0; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = ""; mq8 = ""; mq9 = ""; m = 0; n = 0; cnt = 0;
                        for (int i = 0; i <= dt1.Rows.Count; i++)
                        {
                            #region
                            m = dt1.Rows.Count;
                            n = ph_tbl.Rows.Count;
                            db4 = 0; mq6 = ""; mq7 = "";
                            if (m != n)
                            {
                                dr1 = ph_tbl.NewRow();
                                dr1["acode"] = dt1.Rows[i]["acode"].ToString().Trim();
                                dr1["aname"] = dt1.Rows[i]["aNAME"].ToString().Trim();
                                dr1["fromdt"] = fromdt;
                                dr1["todt"] = todt;
                                rate = fgen.make_double(dt1.Rows[i]["rate"].ToString().Trim());
                                if (mq1 == "")
                                {
                                    if (dt.Rows.Count > 0)
                                    {
                                        dr1["Balance"] = fgen.seek_iname_dt(dt, "acode='" + dr0["ACODE"].ToString().Trim() + "'", "opening");
                                        mq1 = "1";
                                        db = fgen.make_double(dr1["Balance"].ToString().Trim());
                                    }
                                    else
                                    {
                                        dr1["Balance"] = 0;
                                        mq1 = "1";
                                    }
                                }
                                else
                                {
                                    if (fgen.make_double(dt1.Rows[i - 1]["dramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim()) == 0)
                                    {
                                        dr1["Balance"] = fgen.make_double(ph_tbl.Rows[i - 1]["balance"].ToString().Trim()) + fgen.make_double(dt1.Rows[i - 1]["dramt"].ToString().Trim());
                                    }
                                    if (fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[i - 1]["dramt"].ToString().Trim()) == 0)
                                    {
                                        dr1["Balance"] = fgen.make_double(ph_tbl.Rows[i - 1]["balance"].ToString().Trim()) - fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim());
                                    }
                                    if (fgen.make_double(dt1.Rows[i - 1]["dramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim()) != 0)
                                    {
                                        db1 = fgen.make_double(ph_tbl.Rows[i - 1]["balance"].ToString().Trim()) + fgen.make_double(dt1.Rows[i - 1]["dramt"].ToString().Trim());
                                        db2 = db1 - fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim());
                                        dr1["Balance"] = db2;
                                    }
                                }
                                if (mq9 == "")
                                {
                                    mq9 = "vch";
                                    dr1["from"] = fromdt;
                                    mq4 = dt1.Rows[i]["vchdate"].ToString().Trim();
                                    mq3 = "select to_Date('" + mq4 + "','dd/mm/yyyy')-1 as dd from dual";
                                    mq3 = fgen.seek_iname(frm_qstr, frm_cocd, mq3, "dd");
                                    dr1["to"] = Convert.ToDateTime(mq3).ToString("dd/MM/yyyy");
                                }
                                else
                                {
                                    mq4 = dt1.Rows[i - 1]["vchdate"].ToString().Trim(); //g-1
                                    mq11 = dt1.Rows[i]["vchdate"].ToString().Trim();
                                    mq3 = "select to_Date('" + mq11 + "','dd/mm/yyyy')-1 as dd from dual";
                                    mq3 = fgen.seek_iname(frm_qstr, frm_cocd, mq3, "dd");
                                    dr1["from"] = mq4;
                                    dr1["to"] = Convert.ToDateTime(mq3).ToString("dd/MM/yyyy");
                                }
                                mq6 = Convert.ToDateTime(dr1["from"].ToString().Trim()).ToString("dd/MM/yyyy");
                                mq7 = Convert.ToDateTime(dr1["to"].ToString().Trim()).ToString("dd/MM/yyyy");

                                mq5 = "select to_Date('" + mq7 + "','dd/mm/yyyy')-to_date('" + mq6 + "','dd/mm/yyyy')  as dfd from dual";
                                mq5 = fgen.seek_iname(frm_qstr, frm_cocd, mq5, "dfd");
                                dr1["Total Days"] = fgen.make_double(mq5) + 1;
                                //for interest calculation...if year is leap year....jis year me feb aayegi usko divide by 4 krna hai...agar 0 aaya to leap year hua
                                //formula for interest....balance*rate/100*total days/365 if leap year then total days/366
                                if (fgen.make_double(dr1["Balance"].ToString().Trim()) < 0)
                                {
                                    mq8 = todt.Substring(6, 4);
                                    db3 = fgen.make_double(mq8) / 4;
                                    if (db3 == 0)
                                    {
                                        db4 = fgen.make_double(dr1["Balance"].ToString().Trim()) * rate / 100 * fgen.make_double(dr1["Total Days"].ToString().Trim()) / 366 * -1;
                                    }
                                    else
                                    {
                                        db4 = fgen.make_double(dr1["Balance"].ToString().Trim()) * rate / 100 * fgen.make_double(dr1["Total Days"].ToString().Trim()) / 365 * -1;
                                    }
                                    dr1["Interest"] = Math.Round(db4, 2);
                                }
                                else
                                {
                                    dr1["Interest"] = 0;
                                }
                                db7 += fgen.make_double(dr1["Interest"].ToString().Trim());
                                dr1["Rate %"] = rate + "%";
                                ph_tbl.Rows.Add(dr1);
                                // g++;
                            }
                            else
                            {
                                if (m == n)
                                {
                                    dr1 = ph_tbl.NewRow();
                                    dr1["acode"] = dt1.Rows[m - 1]["acode"].ToString().Trim();
                                    dr1["aname"] = dt1.Rows[m - 1]["aNAME"].ToString().Trim();
                                    dr1["fromdt"] = fromdt;
                                    dr1["todt"] = todt;
                                    rate = fgen.make_double(dt1.Rows[m - 1]["rate"].ToString().Trim());
                                    if (fgen.make_double(dt1.Rows[m - 1]["dramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[m - 1]["cramt"].ToString().Trim()) == 0)
                                    {
                                        dr1["Balance"] = fgen.make_double(ph_tbl.Rows[m - 1]["balance"].ToString().Trim()) + fgen.make_double(dt1.Rows[m - 1]["dramt"].ToString().Trim());
                                    }
                                    if (fgen.make_double(dt1.Rows[m - 1]["cramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[m - 1]["dramt"].ToString().Trim()) == 0)
                                    {
                                        dr1["Balance"] = fgen.make_double(ph_tbl.Rows[m - 1]["balance"].ToString().Trim()) - fgen.make_double(dt1.Rows[i - 1]["cramt"].ToString().Trim());
                                    }
                                    if (fgen.make_double(dt1.Rows[m - 1]["dramt"].ToString().Trim()) != 0 && fgen.make_double(dt1.Rows[m - 1]["cramt"].ToString().Trim()) != 0)
                                    {
                                        db1 = fgen.make_double(ph_tbl.Rows[m - 1]["balance"].ToString().Trim()) + fgen.make_double(dt1.Rows[m - 1]["dramt"].ToString().Trim());
                                        db2 = db1 - fgen.make_double(dt1.Rows[m - 1]["cramt"].ToString().Trim());
                                        dr1["Balance"] = db2;
                                    }
                                    mq4 = dt1.Rows[m - 1]["vchdate"].ToString().Trim();
                                    dr1["from"] = mq4;
                                    dr1["to"] = todt;
                                    mq6 = Convert.ToDateTime(dr1["from"].ToString().Trim()).ToString("dd/MM/yyyy");
                                    mq7 = Convert.ToDateTime(dr1["to"].ToString().Trim()).ToString("dd/MM/yyyy");
                                    mq5 = "select to_Date('" + mq7 + "','dd/mm/yyyy')-to_date('" + mq6 + "','dd/mm/yyyy')  as dfd from dual";
                                    mq5 = fgen.seek_iname(frm_qstr, frm_cocd, mq5, "dfd");
                                    dr1["Total Days"] = fgen.make_double(mq5) + 1;
                                    //for interest
                                    if (fgen.make_double(dr1["Balance"].ToString().Trim()) < 0)
                                    {
                                        mq8 = todt.Substring(6, 4);
                                        db3 = fgen.make_double(mq8) / 4;
                                        if (db3 == 0)
                                        {
                                            db4 = fgen.make_double(dr1["Balance"].ToString().Trim()) * rate / 100 * fgen.make_double(dr1["Total Days"].ToString().Trim()) / 366 * -1;
                                        }
                                        else
                                        {
                                            db4 = fgen.make_double(dr1["Balance"].ToString().Trim()) * rate / 100 * fgen.make_double(dr1["Total Days"].ToString().Trim()) / 365 * -1;
                                        }
                                        dr1["Interest"] = Math.Round(db4, 2);
                                    }
                                    else
                                    {
                                        dr1["Interest"] = 0;
                                    }
                                    db7 += fgen.make_double(dr1["Interest"].ToString().Trim());
                                    dr1["Rate %"] = rate + "%";
                                }
                                db6 = fgen.make_double(dr1["Balance"].ToString().Trim());
                                dr1["Closing"] = db6;
                                dr1["tot_intrest"] = db7;
                                ph_tbl.Rows.Add(dr1);
                                //FOR MAIN DTM
                                dr2["party"] = fgen.seek_iname(frm_qstr, frm_cocd, "select aname from famst where acode='" + dr0["acode"].ToString().Trim() + "'", "aname");
                                dr2["Closing_Bal"] = db6;
                                dr2["Interest"] = db7;
                                dr2["fromdt"] = fromdt;
                                dr2["todt"] = todt;
                                dr2["rate"] = rate;
                            }
                            #endregion
                        }
                        dtm.Rows.Add(dr2);
                        ph_tbl.Dispose();
                    }
                }
                if (dtm.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dtm.TableName = "Prepcur";
                    dsRep.Tables.Add(dtm);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "unsecured_Summary", "unsecured_Summary", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            ////by yogita 5.5.2018
            case "F70223":
                #region Bank Book OLD
                // header_n = "Bank Book";
                //mq0 = "Rcpt";
                //mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Col1");
                //SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,'" + mq0 + "' as typ, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd mon') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,a.naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a,famst b  where  trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type in ('" + mq1 + "') and a.vchdate " + xprdRange + " order BY vdd,vchnum,srno";
                //dt = new DataTable();
                //dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                //if (dt.Rows.Count > 0)
                //{
                //    dt.TableName = "Prepcur";
                //    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                //    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Day_Book", "std_Day_Book", dsRep, header_n);
                //}
                #endregion
                #region Bank Book NEW....DOING CHANGES
                header_n = "Bank Book";
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Col3");
                mq2 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_VTY");
                xprdRange1 = "between to_date('" + frm_cDt1 + "','dd/MM/yyyy') and to_Date('" + fromdt + "','dd/MM/yyyy')-1";
                string my_bank = "";
                my_bank = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT aname FROM famst WHERE trim(Acode)='" + mq2.Trim() + "' ", "aname");

                SQuery = "select '" + mq2.Trim() + "' as bank_code,'" + my_bank.Trim() + "' as bank_name,'" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "(" + mq0 + ")s' as header,(case when substr(a.type,1,1)='1' then 'Rcpt ('||a.type||')' else 'Pymt ('||a.type||')' end) as typ,0 as iopqty,0 as bal, b.aname,a.type,a.vchnum,to_char(a.vchdate,'dd Mon') as date_,to_char(a.vchdate,'yyyymmdd') as vdd,a.acode,a.dramt ,a.cramt,(case when length(nvl(trim(trim(a.refnum)),'-'))>1 then 'Chq No. '||trim(a.refnum)||' Dt. '||to_char(a.refdate,'dd/mm/yyyy')||' '||a.naration else a.naration end) as naration,a.refnum as chqno,to_char(refdate,'dd/mm/yyyy') as chq_dt  from voucher a left outer join famst b  on  trim(a.rcode)=trim(b.acode) where  a.branchcd='" + frm_mbr + "' and a.vchdate " + xprdRange + " and a.acode='" + mq2 + "' order by vdd,vchnum,srno";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                mq1 = "select branchcd,trim(acode) as acode,nvl(sum(opening),0) as IOPQTY,nvl(sum(cdr),0) as qtyin,nvl(sum(ccr),0) as qtyout,sum(opening)+sum(cdr)-sum(ccr) as cl from (Select A.branchcd,A.acode, a.yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal a where a.branchcd='" + frm_mbr + "' union all select branchcd,acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + " GROUP BY acode,branchcd union all select branchcd,acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd='" + frm_mbr + "' and type like '%'  and vchdate " + xprdRange + " GROUP BY acode,branchcd )WHERE ACODE='" + mq2 + "' group by branchcd,trim(acode) ORDER BY acode";
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, mq1);
                ph_tbl = new DataTable();
                ph_tbl = dt.Clone();
                db1 = 0; db2 = 0;
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = ph_tbl.NewRow();
                        dr1["frmdt"] = fromdt;
                        dr1["todt"] = todt;
                        dr1["header"] = header_n;

                        dr1["bank_code"] = dt.Rows[i]["bank_code"].ToString().Trim();
                        dr1["bank_name"] = dt.Rows[i]["bank_name"].ToString().Trim();

                        dr1["typ"] = dt.Rows[i]["typ"].ToString().Trim();
                        dr1["type"] = dt.Rows[i]["type"].ToString().Trim();
                        dr1["vchnum"] = dt.Rows[i]["vchnum"].ToString().Trim();
                        dr1["chq_dt"] = dt.Rows[i]["chq_dt"].ToString().Trim();
                        dr1["acode"] = dt.Rows[i]["acode"].ToString().Trim();
                        dr1["dramt"] = fgen.make_double(dt.Rows[i]["dramt"].ToString().Trim());
                        dr1["cramt"] = fgen.make_double(dt.Rows[i]["cramt"].ToString().Trim());
                        if (i == 0)
                        {
                            if (dt1.Rows.Count > 0)
                            {
                                db1 = fgen.make_double(dt1.Rows[0]["IOPQTY"].ToString().Trim()); //opening
                            }
                            dr1["iopqty"] = db1;
                            db2 = db1 + fgen.make_double(dr1["dramt"].ToString()) - fgen.make_double(dr1["cramt"].ToString());
                        }
                        else
                        {
                            dr1["iopqty"] = db2;
                            db2 = db2 + fgen.make_double(dr1["dramt"].ToString()) - fgen.make_double(dr1["cramt"].ToString());
                        }
                        dr1["bal"] = db2;
                        dr1["naration"] = dt.Rows[i]["naration"].ToString().Trim();
                        dr1["aname"] = dt.Rows[i]["aname"].ToString().Trim();
                        dr1["vdd"] = dt.Rows[i]["vdd"].ToString().Trim();
                        dr1["date_"] = dt.Rows[i]["date_"].ToString().Trim();
                        ph_tbl.Rows.Add(dr1);
                    }
                }
                if (ph_tbl.Rows.Count > 0)
                {
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(ph_tbl, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Cash_Book", "std_Cash_Book", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;


            case "F70246":
                #region Sales Register
                dtDummy = new DataTable();
                m = 0;
                dtDummy.Columns.Add("Invno", typeof(string));
                dtDummy.Columns.Add("Invdate", typeof(string));
                dtDummy.Columns.Add("vdd", typeof(string));
                dtDummy.Columns.Add("Acode", typeof(string));
                dtDummy.Columns.Add("Aname", typeof(string));

                dtDummy.Columns.Add("Z1", typeof(double));
                dtDummy.Columns.Add("Z2", typeof(double));
                dtDummy.Columns.Add("Z3", typeof(double));
                dtDummy.Columns.Add("Z4", typeof(double));
                dtDummy.Columns.Add("Z5", typeof(double));
                dtDummy.Columns.Add("Z6", typeof(double));

                header_n = "";
                mq0 = "";
                frm_vty = fgenMV.Fn_Get_Mvar(frm_qstr, "U_VTY");
                // LAST RUNNING QUERY   mq0 = "select rownum,a.* from (select acode,aname,drtot,crtot from (select sum(a.dramt) As drtot,sum(A.cramt) as crtot,a.acode,b.aname from voucher a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type like '4%' and a.vchdate " + xprdRange + " and a.cramt>0 group by a.acode,b.aname) order by crtot desc)a where substr(acode,1,1) in ('2','3')";
                // mq0 = "select rownum,a.* from (select acode,aname,drtot,crtot from (select sum(a.dramt) As drtot,sum(A.cramt) as crtot,a.acode,b.aname from voucher a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type='" + frm_vty + "' and a.vchdate " + xprdRange + " and a.cramt>0 group by a.acode,b.aname) order by crtot desc)a where substr(acode,1,1)='2'";//old
                mq0 = "select rownum,a.* from (select acode,aname,grp,drtot,crtot from (select sum(a.dramt) As drtot,sum(A.cramt) as crtot,a.acode,b.aname,b.grp from voucher a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type in (" + frm_vty + ") and a.vchdate " + xprdRange + " and a.cramt>0 group by a.acode,b.aname,b.grp) order by crtot desc) a where substr(trim(grp),1,1)='2'";//

                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, mq0);
                int dtcnt = dt.Rows.Count;
                int diff = 6 - dtcnt;
                m = 5; n = 1;
                for (int k = 0; k < dtcnt; k++)
                {
                    dtDummy.Columns[m].ColumnName = "Z" + dt.Rows[k]["acode"].ToString().Trim();
                    m++; n++;
                }
                for (int k = 0; k < diff; k++)
                {
                    dtDummy.Columns[m].ColumnName = "Z" + n;
                    m++; n++;
                }

                // dtDummy.Columns.Add("ZOthers", typeof(double));
                dtDummy.Columns.Add("ZOthers", typeof(double));
                dtDummy.Columns.Add("Y1", typeof(double));
                dtDummy.Columns.Add("Y2", typeof(double));
                dtDummy.Columns.Add("Y3", typeof(double));
                dtDummy.Columns.Add("Y4", typeof(double));
                dtDummy.Columns.Add("Y5", typeof(double));
                dtDummy.Columns.Add("Y6", typeof(double));

                mq1 = "";
                // LAST RUNNING QUERY  mq1 = "select rownum,a.* from (select acode,aname,drtot,crtot from (select sum(a.dramt) As drtot,sum(A.cramt) as crtot,a.acode,b.aname from voucher a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type like '4%' and a.vchdate " + xprdRange + " and a.cramt>0 group by a.acode,b.aname) order by crtot desc)a where substr(acode,1,1) not in ('2','3')";
                // mq1 = "select rownum,a.* from (select acode,aname,drtot,crtot from (select sum(a.dramt) As drtot,sum(A.cramt) as crtot,a.acode,b.aname from voucher a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type='" + frm_vty + "' and a.vchdate " + xprdRange + " and a.cramt>0 group by a.acode,b.aname) order by crtot desc)a where substr(acode,1,1) in ('0','3')";//old
                mq1 = "select rownum,a.* from (select acode,aname,grp,drtot,crtot from (select sum(a.dramt) As drtot,sum(A.cramt) as crtot,a.acode,b.aname,b.grp from voucher a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type in (" + frm_vty + ") and a.vchdate " + xprdRange + " and a.cramt>0 group by a.acode,b.aname,b.grp) order by crtot desc)a where substr(trim(grp),1,1) in ('0','3')";
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, mq1);

                dtcnt = 0; diff = 0; n = 1;
                dtcnt = dt1.Rows.Count;
                diff = 6 - dtcnt;
                m = 12;
                for (int k = 0; k < dtcnt; k++)
                {
                    dtDummy.Columns[m].ColumnName = "Y" + dt1.Rows[k]["acode"].ToString().Trim();
                    m++; n++;
                }
                for (int k = 0; k < diff; k++)
                {
                    dtDummy.Columns[m].ColumnName = "Y" + n;
                    m++; n++;
                }

                dtDummy.Columns.Add("YOthers", typeof(double));
                dtDummy.Columns.Add("TOT", typeof(double));
                dtDummy.Columns.Add("fromdt", typeof(string));
                dtDummy.Columns.Add("todt", typeof(string));
                dtDummy.Columns.Add("HH1", typeof(string));
                dtDummy.Columns.Add("HH2", typeof(string));
                dtDummy.Columns.Add("HH3", typeof(string));
                dtDummy.Columns.Add("HH4", typeof(string));
                dtDummy.Columns.Add("HH5", typeof(string));
                dtDummy.Columns.Add("HH6", typeof(string));
                dtDummy.Columns.Add("HH7", typeof(string));
                dtDummy.Columns.Add("HH8", typeof(string));
                dtDummy.Columns.Add("HH9", typeof(string));
                dtDummy.Columns.Add("HH10", typeof(string));
                dtDummy.Columns.Add("HH11", typeof(string));
                dtDummy.Columns.Add("HH12", typeof(string));

                //  mq2 = "select sum(a.dramt) As drtot,sum(A.cramt) as crtot,a.acode,b.aname,a.rcode,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd from voucher a,famst b where trim(a.rcode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type='"+frm_vty+"' and a.vchdate " + xprdRange + " and a.cramt>0 and  substr(a.acode,1,2) not in ('16')  group by a.acode,a.rcode,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),b.aname,to_char(a.vchdate,'yyyymmdd') order by vchnum";//old
                mq2 = "select sum(a.dramt) As drtot,sum(A.cramt) as crtot,a.acode,b.aname,b.grp,a.rcode,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd from voucher a,famst b where trim(a.Acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type in (" + frm_vty + ") and a.vchdate " + xprdRange + " and a.cramt>0 and  trim(b.grp) not in ('16')  group by a.acode,a.rcode,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),b.aname,b.grp,to_char(a.vchdate,'yyyymmdd') order by vchnum";//new
                dt2 = new DataTable();
                dt2 = fgen.getdata(frm_qstr, frm_cocd, mq2);

                mq3 = "select trim(acode) as acode ,trim(aname) as aname from famst where acode like '16%'";
                dt3 = new DataTable();
                dt3 = fgen.getdata(frm_qstr, frm_cocd, mq3);

                if (dt2.Rows.Count > 0)
                {
                    DataView view1 = new DataView(dt2);
                    dt4 = new DataTable();
                    dt4 = view1.ToTable(true, "vchnum", "vchdate", "rcode");
                    dr1 = null;
                    foreach (DataRow dr2 in dt4.Rows)
                    {
                        DataView view2 = new DataView(dt2, "vchnum='" + dr2["vchnum"].ToString().Trim() + "' and vchdate='" + dr2["vchdate"].ToString().Trim() + "' and rcode='" + dr2["rcode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        dt5 = new DataTable();
                        dt5 = view2.ToTable();

                        dr1 = dtDummy.NewRow();
                        db1 = 0; db2 = 0; db3 = 0;
                        for (int i = 0; i < dt5.Rows.Count; i++)
                        {
                            dr1["INVNO"] = dt5.Rows[i]["vchnum"].ToString();
                            dr1["INVdate"] = dt5.Rows[i]["vchdate"].ToString();
                            dr1["vdd"] = dt5.Rows[i]["vdd"].ToString();
                            dr1["acode"] = dt5.Rows[i]["rcode"].ToString();
                            //  dr1["aname"] = dt5.Rows[i]["aname"].ToString();
                            dr1["aname"] = fgen.seek_iname_dt(dt3, "acode='" + dr1["acode"].ToString().Trim() + "'", "aname");
                            mq4 = dt5.Rows[i]["acode"].ToString().Trim().Substring(0, 1);
                            // ORIGINAL COND  if (mq4.Contains("2") || mq4.Contains("3"))
                            mq6 = dt5.Rows[i]["acode"].ToString().Trim(); //colm name 
                            //===============
                            for (int x1 = 0; x1 < dtDummy.Columns.Count; x1++)
                            {
                                if (dtDummy.Columns[x1].ColumnName.Contains(dt5.Rows[i]["acode"].ToString().Trim()))
                                {
                                    if (mq4.Contains("2"))
                                    {
                                        dr1["Z" + dt5.Rows[i]["acode"].ToString().Trim()] = fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                                        db1 += fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                                        dr1["ZOthers"] = db1;
                                    }
                                    else if (mq4.Contains("0") || mq4.Contains("3")) // ORIGINALLY THERE WAS ONLY ELSE CONDITION
                                    {
                                        dr1["Y" + dt5.Rows[i]["acode"].ToString().Trim()] = fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                                        db2 += fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                                        dr1["YOthers"] = db2;
                                    }
                                    break;
                                }
                            }
                            //db3 += fgen.make_double(dt5.Rows[i]["crtot"].ToString());                        
                            db3 = db1 + db2;
                            #region old
                            //if (mq4.Contains("2"))
                            //{
                            //    try
                            //    {
                            //        dr1["Z" + dt5.Rows[i]["acode"].ToString().Trim()] = fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                            //    }
                            //    catch
                            //    {
                            //        db1 += fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                            //        dr1["ZOthers"] = db1;
                            //    }
                            //    db3 += fgen.make_double(dt5.Rows[i]["crtot"].ToString()); ;
                            //}
                            //else if (mq4.Contains("0") || mq4.Contains("3")) // ORIGINALLY THERE WAS ONLY ELSE CONDITION
                            //{
                            //    try
                            //    {
                            //        dr1["Y" + dt5.Rows[i]["acode"].ToString().Trim()] = fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                            //    }
                            //    catch
                            //    {
                            //        db2 += fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                            //        dr1["YOthers"] = db2;
                            //    }
                            //    db3 += fgen.make_double(dt5.Rows[i]["crtot"].ToString()); ;
                            //}   
                            #endregion
                        }
                        dr1["tot"] = db3;
                        dr1["fromdt"] = fromdt;
                        dr1["todt"] = todt;
                        //==========
                        dtcnt = 0; diff = 0; n = 1;
                        dtcnt = dt.Rows.Count;
                        diff = 6 - dtcnt;
                        for (int k = 0; k < dtcnt; k++)
                        {
                            dr1["HH" + n] = dt.Rows[k]["aname"].ToString().Trim();
                            n++;
                        }
                        for (int k = 0; k < diff; k++)
                        {
                            dr1["HH" + n] = "";
                            n++;
                        }
                        dtcnt = 0; diff = 0; n = 7;
                        dtcnt = dt1.Rows.Count;
                        diff = 6 - dtcnt;
                        for (int k = 0; k < dtcnt; k++)
                        {
                            dr1["HH" + n] = dt1.Rows[k]["aname"].ToString().Trim();
                            n++;
                        }
                        for (int k = 0; k < diff; k++)
                        {
                            dr1["HH" + n] = "";
                            n++;
                        }
                        dtDummy.Rows.Add(dr1);
                    }
                }
                if (dtDummy.Rows.Count > 0)
                {
                    dtDummy.Columns[5].ColumnName = "Z1"; // SALES
                    dtDummy.Columns[6].ColumnName = "Z2";
                    dtDummy.Columns[7].ColumnName = "Z3";
                    dtDummy.Columns[8].ColumnName = "Z4";
                    dtDummy.Columns[9].ColumnName = "Z5";
                    dtDummy.Columns[10].ColumnName = "Z6";

                    dtDummy.Columns[12].ColumnName = "Y1"; // TAX
                    dtDummy.Columns[13].ColumnName = "Y2";
                    dtDummy.Columns[14].ColumnName = "Y3";
                    dtDummy.Columns[15].ColumnName = "Y4";
                    dtDummy.Columns[16].ColumnName = "Y5";
                    dtDummy.Columns[17].ColumnName = "Y6";

                    dtDummy.TableName = "Prepcur";
                    dsRep.Tables.Add(dtDummy);
                    pdfView = "N";
                    Print_Report_BYDS(frm_cocd, frm_mbr, "om_Sale_Reg", "Sale_Reg", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70245":
                #region Purchase Register
                dtDummy = new DataTable();
                dtDummy.Columns.Add("Invno", typeof(string));
                dtDummy.Columns.Add("Invdate", typeof(string));
                dtDummy.Columns.Add("vdd", typeof(string));
                dtDummy.Columns.Add("Acode", typeof(string));
                dtDummy.Columns.Add("Aname", typeof(string));

                dtDummy.Columns.Add("Z1", typeof(double));
                dtDummy.Columns.Add("Z2", typeof(double));
                dtDummy.Columns.Add("Z3", typeof(double));
                dtDummy.Columns.Add("Z4", typeof(double));
                dtDummy.Columns.Add("Z5", typeof(double));
                dtDummy.Columns.Add("Z6", typeof(double));
                header_n = "";
                mq0 = "";

                frm_vty = fgenMV.Fn_Get_Mvar(frm_qstr, "U_VTY");

                mq0 = "select rownum,a.* from (select acode,aname,drtot,crtot from (select sum(a.dramt) As drtot,sum(A.cramt) as crtot,a.acode,b.aname from voucher a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type ='" + frm_vty + "' and a.vchdate " + xprdRange + " and a.dramt>0 group by a.acode,b.aname) order by drtot desc)a where substr(acode,1,1) IN ('1','3') AND SUBSTR(ACODE,1,2)!='17'";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, mq0);

                m = 5;
                for (int k = 0; k < 6; k++)
                {
                    try
                    {
                        dtDummy.Columns[m].ColumnName = "Z" + dt.Rows[k]["acode"].ToString().Trim();
                        m++;
                    }
                    catch { }
                }

                dtDummy.Columns.Add("ZOthers", typeof(double));
                dtDummy.Columns.Add("Y1", typeof(double));
                dtDummy.Columns.Add("Y2", typeof(double));
                dtDummy.Columns.Add("Y3", typeof(double));
                dtDummy.Columns.Add("Y4", typeof(double));
                dtDummy.Columns.Add("Y5", typeof(double));
                dtDummy.Columns.Add("Y6", typeof(double));

                mq1 = "";

                mq1 = "select rownum,a.* from (select acode,aname,drtot,crtot from (select sum(a.dramt) As drtot,sum(A.cramt) as crtot,a.acode,b.aname from voucher a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type ='" + frm_vty + "' and a.vchdate " + xprdRange + " and a.dramt>0 group by a.acode,b.aname) order by drtot desc)a where substr(acode,1,2) IN ('07','17')";
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, mq1);
                m = 12;
                for (int k = 0; k < 6; k++)
                {
                    try
                    {
                        dtDummy.Columns[m].ColumnName = "Y" + dt1.Rows[k]["acode"].ToString().Trim();
                        m++;
                    }
                    catch { }
                }

                dtDummy.Columns.Add("YOthers", typeof(double));
                dtDummy.Columns.Add("TOT", typeof(double));
                dtDummy.Columns.Add("fromdt", typeof(string));
                dtDummy.Columns.Add("todt", typeof(string));
                dtDummy.Columns.Add("HH1", typeof(string));
                dtDummy.Columns.Add("HH2", typeof(string));
                dtDummy.Columns.Add("HH3", typeof(string));
                dtDummy.Columns.Add("HH4", typeof(string));
                dtDummy.Columns.Add("HH5", typeof(string));
                dtDummy.Columns.Add("HH6", typeof(string));
                dtDummy.Columns.Add("HH7", typeof(string));
                dtDummy.Columns.Add("HH8", typeof(string));
                dtDummy.Columns.Add("HH9", typeof(string));
                dtDummy.Columns.Add("HH10", typeof(string));
                dtDummy.Columns.Add("HH11", typeof(string));
                dtDummy.Columns.Add("HH12", typeof(string));
                dtDummy.Columns.Add("MRRNO", typeof(string));
                dtDummy.Columns.Add("MRRDT", typeof(string));
                dtDummy.Columns.Add("INVN", typeof(string));
                dtDummy.Columns.Add("INVDT", typeof(string));

                // LAST ORIGINAL QUERY  mq2 = "select sum(a.dramt)-sum(A.cramt) as crtot, A. INVNO,TO_CHAR(A.INVDATE,'DD/MM/YYYY') AS INVDATE,A.MRNNUM,to_char(A.MRNDATE,'DD/MM/YYYY') AS MRNDATE ,a.acode,b.aname,a.rcode,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd from voucher a,famst b where trim(a.rcode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type ='" + frm_vty + "' and a.vchdate " + xprdRange + " and a.dramt>0 and  substr(a.acode,1,2) not in ('16') group by a.acode,a.rcode,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),A.MRNNUM,A.MRNDATE,b.aname,to_char(a.vchdate,'yyyymmdd') ,A.INVNO,A.INVDATE order by vchnum";
                mq2 = "select sum(a.dramt)-sum(A.cramt) as crtot, A. INVNO,TO_CHAR(A.INVDATE,'DD/MM/YYYY') AS INVDATE,A.MRNNUM,to_char(A.MRNDATE,'DD/MM/YYYY') AS MRNDATE ,a.acode,b.aname,a.rcode,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,to_char(a.vchdate,'yyyymmdd') as vdd from voucher a,famst b where trim(a.rcode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and  a.type ='" + frm_vty + "' and a.vchdate " + xprdRange + " and  substr(a.acode,1,2) not in ('16','06','05') group by a.acode,a.rcode,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),A.MRNNUM,A.MRNDATE,b.aname,to_char(a.vchdate,'yyyymmdd') ,A.INVNO,A.INVDATE order by vchnum";
                dt2 = new DataTable();
                dt2 = fgen.getdata(frm_qstr, frm_cocd, mq2);

                if (dt2.Rows.Count > 0)
                {
                    DataView view1 = new DataView(dt2);
                    dt4 = new DataTable();
                    dt4 = view1.ToTable(true, "vchnum", "vchdate", "rcode");
                    dr1 = null;
                    foreach (DataRow dr2 in dt4.Rows)
                    {
                        DataView view2 = new DataView(dt2, "vchnum='" + dr2["vchnum"].ToString().Trim() + "' and vchdate='" + dr2["vchdate"].ToString().Trim() + "' and rcode='" + dr2["rcode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        dt5 = new DataTable();
                        dt5 = view2.ToTable();

                        dr1 = dtDummy.NewRow();
                        db1 = 0; db2 = 0; db3 = 0;
                        for (int i = 0; i < dt5.Rows.Count; i++)
                        {
                            dr1["INVNO"] = dt5.Rows[i]["vchnum"].ToString();
                            dr1["INVdate"] = dt5.Rows[i]["vchdate"].ToString();
                            dr1["vdd"] = dt5.Rows[i]["vdd"].ToString();
                            dr1["acode"] = dt5.Rows[i]["rcode"].ToString();
                            dr1["aname"] = dt5.Rows[i]["aname"].ToString();
                            dr1["MRRNO"] = dt5.Rows[i]["MRNNUM"].ToString();
                            dr1["MRRDT"] = dt5.Rows[i]["MRNDATE"].ToString();
                            dr1["INVN"] = dt5.Rows[i]["INVNO"].ToString();
                            dr1["INVDT"] = dt5.Rows[i]["INVDATE"].ToString();

                            mq4 = dt5.Rows[i]["acode"].ToString().Trim().Substring(0, 1);
                            mq5 = dt5.Rows[i]["acode"].ToString().Trim().Substring(0, 2);
                            //ORIGINAL COND if (mq4.Contains("2") || mq4.Contains("3"))
                            if (mq5 != "07" && mq5 != "17")
                            {
                                try
                                {
                                    dr1["Z" + dt5.Rows[i]["acode"].ToString().Trim()] = fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                                }
                                catch
                                {
                                    db1 += fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                                    dr1["ZOthers"] = db1;
                                }
                            }
                            else if (mq5.Contains("07") || mq5.Contains("17")) // ORIGINALLY THERE WAS ONLY ELSE CONDITION
                            {
                                try
                                {
                                    dr1["Y" + dt5.Rows[i]["acode"].ToString().Trim()] = fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                                }
                                catch
                                {
                                    db2 += fgen.make_double(dt5.Rows[i]["crtot"].ToString());
                                    dr1["YOthers"] = db2;
                                }
                            }
                            db3 += fgen.make_double(dt5.Rows[i]["crtot"].ToString()); ;
                        }
                        dr1["tot"] = db3;
                        dr1["fromdt"] = fromdt;
                        dr1["todt"] = todt;
                        int l = 1;
                        for (int k = 0; k < 6; k++)
                        {
                            try
                            {
                                dr1["HH" + l] = dt.Rows[k]["aname"].ToString().Trim();
                            }
                            catch { }
                            l++;
                        }

                        for (int k = 0; k < 6; k++)
                        {
                            try
                            {
                                dr1["HH" + l] = dt1.Rows[k]["aname"].ToString().Trim();
                            }
                            catch { }
                            l++;
                        }
                        dtDummy.Rows.Add(dr1);
                    }
                }
                if (dtDummy.Rows.Count > 0)
                {
                    dtDummy.Columns[5].ColumnName = "Z1"; // SALES
                    dtDummy.Columns[6].ColumnName = "Z2";
                    dtDummy.Columns[7].ColumnName = "Z3";
                    dtDummy.Columns[8].ColumnName = "Z4";
                    dtDummy.Columns[9].ColumnName = "Z5";
                    dtDummy.Columns[10].ColumnName = "Z6";

                    dtDummy.Columns[12].ColumnName = "Y1"; // TAX
                    dtDummy.Columns[13].ColumnName = "Y2";
                    dtDummy.Columns[14].ColumnName = "Y3";
                    dtDummy.Columns[15].ColumnName = "Y4";
                    dtDummy.Columns[16].ColumnName = "Y5";
                    dtDummy.Columns[17].ColumnName = "Y6";

                    dtDummy.TableName = "Prepcur";
                    dsRep.Tables.Add(dtDummy);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Purc_Reg", "std_Purc_Reg", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70228": // MADE BY AKSHAY ON 16 MAY 2018...//changed by suman on 14/06/2021 for dynamic months
                header_n = "Expense Trend";

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col2 = col2 + ", sum(" + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + ") as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";
                        col3 = col3 + ", (Case when to_char(vchdate,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then dramt-cramt   else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col2.Length > 2) col2 = col2.TrimStart(',');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                SQuery = "SELECT '" + fromdt + "' as frmdt ,'" + todt + "' as todt,'" + header_n + "' as header, acode, aname AS ACCOUNT  , substr(trim(acode),1,2) as grp ," + col2 + "  from (select a.acode,b.aname ,to_char(a.vchdate,'yyyymm') as vdd," + col3 + " from voucher A, FAMST B  where TRIM(A.ACODE)=TRIM(B.ACODE) AND  A.branchcd='" + frm_mbr + "' and a.type like '%'   and a.vchdate " + xprdRange + "  order by vdd) where SUBSTR(acode,1,2)>='30' group by acode,aname order by grp,ANAME";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Expense_Trend", "Expense_Trend", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70248":
                header_n = "Cash More Than 10,000";
                SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, B.ANAME,A.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate ,to_char(a.vchdate,'yyyymmdd') as vdd ,A.dramt,A.cramt,A.RCODE from voucher A, FAMST B  where TRIM(A.RCODE)=TRIM(B.ACODE) AND  A.branchcd='" + frm_mbr + "' and A.type ='20' and A.cramt >10000 and A.acode='120000' and substr(trim(A.rcode),1,2)!='12' and A.vchdate " + xprdRange + " order by vdd";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Cash_More_Than_10000", "Cash_More_Than_10000", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70249":
            case "F05128":
                header_n = "Top 10 Debtors";
                xprdrange1 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy')-1";
                SQuery = " select  * from (select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, Aname,Acode, to_char(opening,'9999999990.00') as opening , to_char(Debits,'9999999990.00') as  Debits, to_char(Credits,'9999999990.00') as Credits,to_char(closing,'9999999990.00') as closing,Bssch from (select b.BUYCODE,b.aname,a.acode,b.grp,b.bssch,b.addr1,b.addr2, sum(a.opening) as opening , sum(nvl(a.cdr,0)) as  Debits, sum(nvl(a.ccr,0)) as Credits ,sum(a.opening)+sum(nvl(a.cdr,0))-sum(nvl(a.ccr,0)) as Closing  from (Select acode, YR_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal where branchcd  in ('" + frm_mbr + "') and acode between '000000' and 'ZZZZZZ' union all  select acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos from voucher where branchcd  in ('" + frm_mbr + "') and type like '%' and vchdate " + xprdrange1 + " and acode between '000000' and 'ZZZZZZ' GROUP BY aCODE union all select acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from voucher where branchcd  in ('" + frm_mbr + "') and type like '%' and vchdate " + xprdRange + " and acode between '000000' and 'ZZZZZZ' GROUP BY aCODE )a, famst b where trim(A.acode)=trim(B.acodE) group by b.BUYCODE,b.aname,a.acode,b.grp,b.bssch,b.addr1,b.addr2 order by a.acode)  a where  grp like '16%' and closing>0 order by closing desc) where rownum<11 order by aname";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Top_10_Debtors", "Top_10_Debtors", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70250":
            case "F05129":
                header_n = "Top 10 Creditors";
                xprdrange1 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy')-1";
                SQuery = "Select * from (select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, Aname,Acode, to_char(opening,'9999999990.00') as opening , to_char(Debits,'9999999990.00') as  Debits, to_char(Credits,'9999999990.00') as Credits,to_char(closing,'9999999990.00') as closing,Bssch from (select b.BUYCODE,b.aname,a.acode,b.grp,b.bssch,b.addr1,b.addr2, sum(a.opening) as opening , sum(nvl(a.cdr,0)) as  Debits, sum(nvl(a.ccr,0)) as Credits ,sum(a.opening)+sum(nvl(a.cdr,0))-sum(nvl(a.ccr,0)) as Closing  from (Select acode, YR_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal where branchcd  in ('" + frm_mbr + "') and acode between '000000' and 'ZZZZZZ' union all  select acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos from voucher where branchcd  in ('" + frm_mbr + "') and type like '%' and vchdate " + xprdrange1 + " and acode between '000000' and 'ZZZZZZ' GROUP BY aCODE union all select acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from voucher where branchcd  in ('" + frm_mbr + "') and type like '%' and vchdate " + xprdRange + " and acode between '000000' and 'ZZZZZZ' GROUP BY aCODE )a, famst b where trim(A.acode)=trim(B.acodE) group by b.BUYCODE,b.aname,a.acode,b.grp,b.bssch,b.addr1,b.addr2 order by a.acode)  a where  (grp like '05' or grp like '06')  and closing<0 order by closing desc) where rownum<11";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Top_10_Creditors", "Top_10_Creditors", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70251":
            case "F05131":
                header_n = "Creditors with Debit Balance";
                xprdrange1 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy')-1";
                SQuery = " select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, Aname,Acode, to_char(opening,'9999999990.00') as opening , to_char(Debits,'9999999990.00') as  Debits, to_char(Credits,'9999999990.00') as Credits,to_char(closing,'9999999990.00') as closing,Bssch from (select b.BUYCODE,b.aname,a.acode,b.grp,b.bssch,b.addr1,b.addr2, sum(a.opening) as opening , sum(nvl(a.cdr,0)) as  Debits, sum(nvl(a.ccr,0)) as Credits ,sum(a.opening)+sum(nvl(a.cdr,0))-sum(nvl(a.ccr,0)) as Closing  from (Select acode, YR_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal where branchcd  in ('" + frm_mbr + "') and acode between '000000' and 'ZZZZZZ' union all  select acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos from voucher where branchcd  in ('" + frm_mbr + "') and type like '%' and vchdate  " + xprdrange1 + " and acode between '000000' and 'ZZZZZZ' GROUP BY aCODE union all select acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from voucher where branchcd  in ('" + frm_mbr + "') and type like '%' and vchdate " + xprdRange + " and acode between '000000' and 'ZZZZZZ' GROUP BY aCODE )a, famst b where trim(A.acode)=trim(B.acodE) group by b.BUYCODE,b.aname,a.acode,b.grp,b.bssch,b.addr1,b.addr2 order by a.acode)  a where  (grp like '05' or grp like '06')  and closing>0";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Creditors_with_Debit_balance", "Creditors_with_Debit_balance", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70252":///set no printer
            case "F05133":
                header_n = "Sales Trend (In Rs.000)";
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "" + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(vchdate,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then cramt-dramt   else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                    }
                }

                col2 = "(" + h1 + "/1000) as " + h1 + " ,(" + h2 + "/1000) as " + h2 + " ,(" + h3 + "/1000) as " + h3 + ",(" + h4 + "/1000) as " + h4 + ",(" + h5 + "/1000) as " + h5 + " ,(" + h6 + "/1000) as " + h6 + ",(" + h7 + "/1000) as " + h7 + " ,(" + h8 + "/1000) as " + h8 + ",(" + h9 + "/1000) as " + h9 + ",(" + h10 + "/1000) as " + h10 + ",(" + h11 + "/1000) as " + h11 + ",(" + h12 + "/1000) as " + h12 + " ";
                mq1 = "sum(" + h1 + ") as " + h1 + ",sum(" + h2 + ") as " + h2 + ",sum(" + h3 + ") as " + h3 + ",sum(" + h4 + ") as " + h4 + ",sum(" + h5 + ") as " + h5 + ",sum(" + h6 + ") as " + h6 + ",sum(" + h7 + ") as " + h7 + " ,sum(" + h8 + ") as " + h8 + ",sum(" + h9 + ") as " + h9 + ",sum(" + h10 + ") as " + h10 + ",sum(" + h11 + ") as " + h11 + ",sum(" + h12 + ") as " + h12 + "";

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                // ORIGINAL QUERY  SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,  trim(aname) as aname,trim(name) as name,triM(acode) as acode,trim(rcode) as rcode ,round((total/1000),2) as total,round((apr/1000),2) as apr ,round((may/1000),2) as may ,round((jun/1000),2) as jun,round((jul/1000),2) as jul,round((aug/1000),2) as aug ,round((sep/1000),2) as sep,round((oct/1000),2) as oct ,round((nov/1000),2) as nov,round((dec/1000),2) as dec,round((jan/1000),2) as jan,round((feb/1000),2) as feb,round((mar/1000),2) as mar  from (select b.aname,c.aname as name,a.acode,a.rcode,sum(apr+may+jun+jul+aug+sep+oct+nov+dec+jan+feb+mar) as total , sum(apr) as apr,sum(may) as may,sum(jun) as jun,sum(jul) as jul,sum(aug) as aug,sum(sep) as sep,sum(oct) as oct ,sum(nov) as nov,sum(dec) as dec,sum(jan) as jan,sum(feb) as feb,sum(mar) as mar  from(select rcode,acode,(case when to_char(VCHDATE,'mm')='04' then cramt-dramt else 0 end ) as apr,(case when to_char(VCHDATE,'mm')='05' then cramt-dramt else 0 end ) as may,(case when to_char(VCHDATE,'mm')='06' then cramt-dramt else 0 end ) as jun,(case when to_char(VCHDATE,'mm')='07' then cramt-dramt else 0 end ) as jul,(case when to_char(VCHDATE,'mm')='08' then cramt-dramt  else 0 end ) as aug,(case when to_char(VCHDATE,'mm')='09' then cramt-dramt else 0 end ) as sep,(case when to_char(VCHDATE,'mm')='10' then  cramt-dramt  else 0 end ) as oct,(case when to_char(VCHDATE,'mm')='11' then  cramt-dramt else 0 end ) as nov,(case when to_char(VCHDATE,'mm')='12' then  cramt-dramt else 0 end ) as dec,(case when to_char(VCHDATE,'mm')='01' then  cramt-dramt  else 0 end ) as jan,(case when to_char(VCHDATE,'mm')='02' then  cramt-dramt  else 0 end ) as feb,(case when to_char(VCHDATE,'mm')='03' then cramt-dramt else 0 end ) as mar from voucher where branchcd='" + frm_mbr + "' and type like '4%' AND VCHDATE " + xprdRange + " ) a, famst b , famst c where trim(a.acode)=trim(b.acode) and trim (a.rcode)=trim(c.acode) AND A.aCODE IN(" + mq0 + ")  group by b.aname,c.aname,a.acode,a.rcode) order by total desc";
                SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,  trim(aname) as aname,trim(name) as name,triM(acode) as acode,trim(rcode) as rcode ,(total/1000) as total,(apr/1000) as apr ,(may/1000) as may ,(jun/1000) as jun,(jul/1000) as jul,(aug/1000) as aug ,(sep/1000) as sep,(oct/1000) as oct ,(nov/1000) as nov,(dec/1000) as dec,(jan/1000) as jan,(feb/1000) as feb,(mar/1000) as mar  from (select b.aname,c.aname as name,a.acode,a.rcode,sum(apr+may+jun+jul+aug+sep+oct+nov+dec+jan+feb+mar) as total , sum(apr) as apr,sum(may) as may,sum(jun) as jun,sum(jul) as jul,sum(aug) as aug,sum(sep) as sep,sum(oct) as oct ,sum(nov) as nov,sum(dec) as dec,sum(jan) as jan,sum(feb) as feb,sum(mar) as mar  from(select rcode,acode,(case when to_char(VCHDATE,'mm')='04' then cramt-dramt else 0 end ) as apr,(case when to_char(VCHDATE,'mm')='05' then cramt-dramt else 0 end ) as may,(case when to_char(VCHDATE,'mm')='06' then cramt-dramt else 0 end ) as jun,(case when to_char(VCHDATE,'mm')='07' then cramt-dramt else 0 end ) as jul,(case when to_char(VCHDATE,'mm')='08' then cramt-dramt  else 0 end ) as aug,(case when to_char(VCHDATE,'mm')='09' then cramt-dramt else 0 end ) as sep,(case when to_char(VCHDATE,'mm')='10' then  cramt-dramt  else 0 end ) as oct,(case when to_char(VCHDATE,'mm')='11' then  cramt-dramt else 0 end ) as nov,(case when to_char(VCHDATE,'mm')='12' then  cramt-dramt else 0 end ) as dec,(case when to_char(VCHDATE,'mm')='01' then  cramt-dramt  else 0 end ) as jan,(case when to_char(VCHDATE,'mm')='02' then  cramt-dramt  else 0 end ) as feb,(case when to_char(VCHDATE,'mm')='03' then cramt-dramt else 0 end ) as mar from voucher where branchcd='" + frm_mbr + "' and type like '4%' AND VCHDATE " + xprdRange + " AND aCODE IN(" + mq0 + ")) a, famst b , famst c where trim(a.acode)=trim(b.acode) and trim (a.rcode)=trim(c.acode) group by b.aname,c.aname,a.acode,a.rcode) order by total desc";
                // SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, b.aname,c.aname as name,a.acode,a.rcode,sum(apr+may+jun+jul+aug+sep+oct+nov+dec+jan+feb+mar) as total , sum(apr) as apr,sum(may) as may,sum(jun) as jun,sum(jul) as jul,sum(aug) as aug,sum(sep) as sep,sum(oct) as oct ,sum(nov) as nov,sum(dec) as dec,sum(jan) as jan,sum(feb) as feb,sum(mar) as mar  from(select rcode,acode,(case when to_char(VCHDATE,'mm')='04' then dramt-cramt else 0 end ) as apr,(case when to_char(VCHDATE,'mm')='05' then dramt-cramt else 0 end ) as may,(case when to_char(VCHDATE,'mm')='06' then dramt-cramt else 0 end ) as jun,(case when to_char(VCHDATE,'mm')='07' then dramt-cramt  else 0 end ) as jul,(case when to_char(VCHDATE,'mm')='08' then dramt-cramt  else 0 end ) as aug,(case when to_char(VCHDATE,'mm')='09' then dramt-cramt else 0 end ) as sep,(case when to_char(VCHDATE,'mm')='10' then  dramt-cramt  else 0 end ) as oct,(case when to_char(VCHDATE,'mm')='11' then  dramt-cramt  else 0 end ) as nov,(case when to_char(VCHDATE,'mm')='12' then  dramt-cramt  else 0 end ) as dec,(case when to_char(VCHDATE,'mm')='01' then  dramt-cramt  else 0 end ) as jan,(case when to_char(VCHDATE,'mm')='02' then  dramt-cramt  else 0 end ) as feb,(case when to_char(VCHDATE,'mm')='03' then dramt-cramt  else 0 end ) as mar from voucher where branchcd='" + frm_mbr + "' and type like '4%' AND VCHDATE " + xprdRange + " ) a, famst b , famst c where trim(a.acode)=trim(b.acode) and trim (a.rcode)=trim(c.acode) AND A.RCODE='" + mq0 + "'  group by b.aname,c.aname,a.acode,a.rcode";                
                SQuery = "select 'Sales Trend (In '||Currency||')' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, Currency, trim(aname) as aname,trim(name) as name,triM(acode) as acode,trim(rcode) as rcode ,(total/1000) as total,(apr/1000) as apr ,(may/1000) as may ,(jun/1000) as jun,(jul/1000) as jul,(aug/1000) as aug ,(sep/1000) as sep,(oct/1000) as oct ,(nov/1000) as nov,(dec/1000) as dec,(jan/1000) as jan,(feb/1000) as feb,(mar/1000) as mar  from (select d.BR_CURREN as Currency, b.aname,c.aname as name,a.acode,a.rcode,sum(apr+may+jun+jul+aug+sep+oct+nov+dec+jan+feb+mar) as total , sum(apr) as apr,sum(may) as may,sum(jun) as jun,sum(jul) as jul,sum(aug) as aug,sum(sep) as sep,sum(oct) as oct ,sum(nov) as nov,sum(dec) as dec,sum(jan) as jan,sum(feb) as feb,sum(mar) as mar  from(select branchcd, rcode,acode,(case when to_char(VCHDATE,'mm')='04' then cramt-dramt else 0 end ) as apr,(case when to_char(VCHDATE,'mm')='05' then cramt-dramt else 0 end ) as may,(case when to_char(VCHDATE,'mm')='06' then cramt-dramt else 0 end ) as jun,(case when to_char(VCHDATE,'mm')='07' then cramt-dramt else 0 end ) as jul,(case when to_char(VCHDATE,'mm')='08' then cramt-dramt  else 0 end ) as aug,(case when to_char(VCHDATE,'mm')='09' then cramt-dramt else 0 end ) as sep,(case when to_char(VCHDATE,'mm')='10' then  cramt-dramt  else 0 end ) as oct,(case when to_char(VCHDATE,'mm')='11' then  cramt-dramt else 0 end ) as nov,(case when to_char(VCHDATE,'mm')='12' then  cramt-dramt else 0 end ) as dec,(case when to_char(VCHDATE,'mm')='01' then  cramt-dramt  else 0 end ) as jan,(case when to_char(VCHDATE,'mm')='02' then  cramt-dramt  else 0 end ) as feb,(case when to_char(VCHDATE,'mm')='03' then cramt-dramt else 0 end ) as mar from voucher where branchcd='" + frm_mbr + "' and type like '4%' AND VCHDATE " + xprdRange + " AND aCODE IN(" + mq0 + ")) a, famst b , famst c,type d  where trim(a.acode)=trim(b.acode) and trim (a.rcode)=trim(c.acode) and trim(a.branchcd)=trim(d.type1) and d.id='B' group by b.aname,c.aname,a.acode,a.rcode,d.BR_CURREN) order by total desc"; //currency pic from branch
                SQuery = "select 'Sales Trend (In '||Currency||')' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, Currency, trim(aname) as aname,trim(name) as name,triM(acode) as acode,trim(rcode) as rcode ,(total/1000) as total," + col2 + "  from (select d.BR_CURREN as Currency, b.aname,c.aname as name,a.acode,a.rcode,sum(" + col1 + ") as total , " + mq1 + "  from(select branchcd, rcode,acode," + col3 + " from voucher where branchcd='" + frm_mbr + "' and type like '4%' AND VCHDATE " + xprdRange + " AND aCODE IN(" + mq0 + ")) a, famst b , famst c,type d  where trim(a.acode)=trim(b.acode) and trim (a.rcode)=trim(c.acode) and trim(a.branchcd)=trim(d.type1) and d.id='B' group by b.aname,c.aname,a.acode,a.rcode,d.BR_CURREN) order by total desc"; //currency pic from branch with dynamic months
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Sales_Trend_Party_Wise", "Sales_Trend_Party_Wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70253":
            case "F05134":
                header_n = "12 Month Trend of Purchase as per A/c";

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "" + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(vchdate,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then dramt-cramt   else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                col2 = "round((total/1000),2) as total,round((" + h1 + "/1000),2) as " + h1 + " ,round((" + h2 + "/1000),2) as " + h2 + " ,round((" + h3 + "/1000),2) as " + h3 + ",round((" + h4 + "/1000),2) as " + h4 + ",round((" + h5 + "/1000),2) as " + h5 + " ,round((" + h6 + "/1000),2) as " + h6 + ",round((" + h7 + "/1000),2) as " + h7 + " ,round((" + h8 + "/1000),2) as " + h8 + ",round((" + h9 + "/1000),2) as " + h9 + ",round((" + h10 + "/1000),2) as " + h10 + ",round((" + h11 + "/1000),2) as " + h11 + ",round((" + h12 + "/1000),2) as " + h12 + " ";
                mq2 = "sum(" + h1 + ") as " + h1 + ",sum(" + h2 + ") as " + h2 + ",sum(" + h3 + ") as " + h3 + ",sum(" + h4 + ") as " + h4 + ",sum(" + h5 + ") as " + h5 + ",sum(" + h6 + ") as " + h6 + ",sum(" + h7 + ") as " + h7 + " ,sum(" + h8 + ") as " + h8 + ",sum(" + h9 + ") as " + h9 + ",sum(" + h10 + ") as " + h10 + ",sum(" + h11 + ") as " + h11 + ",sum(" + h12 + ") as " + h12 + "";
                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                SQuery = " select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, trim(aname) as aname,trim(name) as name,trim(acode) as acode,trim(rcode) as rcode," + col2 + "  from (select b.aname,c.aname as name,a.acode,a.rcode,sum(" + col1 + ") as total , " + mq2 + "  from(select rcode,acode," + col3 + " from voucher where branchcd='" + frm_mbr + "' and type like '5%' AND VCHDATE " + xprdRange + " ) a, famst b , famst c where trim(a.acode)=trim(b.acode) and trim (a.rcode)=trim(c.acode) AND A.aCODE in (" + mq0 + ")  group by b.aname,c.aname,a.acode,a.rcode) order by name";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Purchase_Trend_Party_Wise", "Purchase_Trend_Party_Wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            //chq print
            case "F70555":
            case "F70555CHQ":
                string fixcd = "";
                if (iconID == "F70555CHQ")
                {
                    fixcd = fgen.seek_iname(frm_qstr, frm_cocd, "select acode from type where id='V' and type1='" + frm_vty + "'", "acode");
                    SQuery = "select a.type,a.vchnum,a.vchdate,a.invno,a.invdate,a.refnum,a.refdate,a.acode,a.rcode,a.dramt,a.cramt,a.naration,a.ent_by,a.costcd,(case when trim(nvl(a.costcd,'-'))='-' then b.aname else x.name end) as aname from voucher a left outer join typegrp x on trim(nvl(a.costcd,'-'))=trim(x.type1) and x.id='AC' and x.branchcd!='DD' ,famst b where trim(a.acode)=trim(B.acode) and SUBSTR(b.grp,1,2) IN ('03','12') and a.acode<>'120000' and trim(a.rcode)<>'" + fixcd + "' and a.branchcd||a.type||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') in (" + barCode + ")  order by a.vchnum ";
                }
                else
                {
                    fixcd = fgen.seek_iname(frm_qstr, frm_cocd, "select acode from type where id='V' and type1='" + frm_vty + "'", "acode");
                    SQuery = "select a.type,a.vchnum,a.vchdate,a.invno,a.invdate,a.refnum,a.refdate,a.acode,a.rcode,a.dramt,a.cramt,a.naration,a.ent_by,a.costcd,(case when trim(nvl(a.costcd,'-'))='-' " +
                        "then b.aname else x.name end) as aname from voucher a left outer join typegrp x on trim(nvl(a.costcd,'-'))=trim(x.type1) and x.id='AC' and x.branchcd!='DD' ,famst b where" +
                        " trim(a.acode)=trim(B.acode) and SUBSTR(b.grp,1,2) IN ('03','12') and a.acode<>'120000' and trim(a.rcode)<>'" + fixcd + "' and a.branchcd='" + frm_mbr + "' " +
                        "and a.type='" + frm_vty + "' and trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy') in (" + barCode + ")  order by a.vchnum ";
                }

                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dsRep = new DataSet();

                if (dt.Rows.Count > 0)
                {
                    dt.Columns.Add("amttoword");

                    dt1 = new DataTable();
                    dt1 = dt.Clone();
                    DataRow chqrow;
                    chqrow = dt1.NewRow();
                    double drtot = 0;
                    string nametoPrint = "";
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (i == 0)
                        {
                            chqrow["type"] = dt.Rows[0]["type"].ToString();
                            chqrow["vchnum"] = dt.Rows[0]["vchnum"].ToString();
                            chqrow["vchdate"] = dt.Rows[0]["vchdate"].ToString();
                            chqrow["invno"] = dt.Rows[0]["invno"].ToString();
                            chqrow["invdate"] = fgen.make_def_Date(dt.Rows[0]["invdate"].ToString(), DateTime.Now.ToString("dd/MM/yyyy"));
                            chqrow["refnum"] = dt.Rows[0]["refnum"].ToString();
                            chqrow["refdate"] = fgen.make_def_Date(dt.Rows[0]["refdate"].ToString(), DateTime.Now.ToString("dd/MM/yyyy"));
                            chqrow["acode"] = dt.Rows[0]["acode"].ToString();
                            chqrow["rcode"] = dt.Rows[0]["rcode"].ToString();
                            chqrow["naration"] = dt.Rows[0]["naration"].ToString();
                            chqrow["ent_by"] = dt.Rows[0]["ent_by"].ToString();
                            chqrow["costcd"] = dt.Rows[0]["costcd"].ToString();
                            chqrow["aname"] = dt.Rows[0]["aname"].ToString();
                            nametoPrint = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT (CASE WHEN LENGTH(TRIM(NVL(PNAME,'-')))>2 THEN PNAME ELSE ANAME END) AS ANAME FROM FAMST WHERE TRIM(ACODE)='" + dt.Rows[0]["RCODE"].ToString().Trim() + "'", "aname");

                        }
                        if (dt.Rows[i]["costcd"].ToString().Trim().Length > 1)
                        {
                            mhd = "";
                            mhd = fgen.seek_iname(frm_qstr, frm_cocd, "Select name from typegrp where id='AC' and type1='" + dt.Rows[0]["costcd"].ToString().Trim() + "'", "name");
                            if (mhd.Length > 2)
                                nametoPrint = mhd;
                        }
                        drtot += dt.Rows[i]["cramt"].ToString().toDouble() - dt.Rows[i]["dramt"].ToString().toDouble();
                    }
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        chqrow["aname"] = nametoPrint;
                    }
                    chqrow["dramt"] = drtot;
                    chqrow["cramt"] = drtot;

                    chqrow["amttoword"] = fgen.ConvertNumbertoWords(drtot.ToString());

                    dt1.Rows.Add(chqrow);
                    dsRep.Tables.Add(dt1);
                }

                if (dsRep.Tables[0].Rows.Count > 0)
                {
                    dsRep.Tables[0].TableName = "Prepcur";
                    Print_Chq_BYDS(frm_cocd, frm_mbr, "chq", "chq", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                break;

            ///merged by yogita on 23 may 2018

            case "F70254":
                #region GST Voucher (Purchase Other Than 50 Series)
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                header_n = "GST Voucher (Purchase Other Than 50 Series)";
                SQuery = "SELECT '" + header_n + "' as header_n, d.name as header,b.aname as party,B.STATEN,b.staffcd,B.GRP,b.addr1,b.addr2,b.addr3,b.gst_no as gst,b.girno as pann,c.iname, A.* FROM IVOUCHER A,famst b,item c,type d WHERE trim(a.acode)=trim(b.acode) and trim(a.icode)=trim(c.icode)  and trim(a.type)=trim(d.type1) and d.id='V' and TRIM(A.BRANCHCD)||TRIM(a.TYPE)||TRIM(A.VCHNUM)||TO_CHAR(A.VCHDATE,'DD/MM/YYYY')||TRIM(A.ACODE)='" + mq0 + "'";//
                //SQuery = "SELECT '" + header_n + "' as header_n d.name as header,b.aname as party,B.STATEN,b.staffcd,B.GRP,b.addr1,b.addr2,b.addr3,b.gst_no as gst,b.girno as pann,c.iname, A.* FROM IVOUCHER A,famst b,item c,type d WHERE trim(a.acode)=trim(b.acode) and trim(a.icode)=trim(c.icode)  and trim(a.type)=trim(d.type1) and d.id='V' and TRIM(A.BRANCHCD)||TRIM(a.TYPE)||TRIM(A.VCHNUM)||TO_CHAR(A.VCHDATE,'DD/MM/YYYY')||TRIM(A.ACODE)='" + mq0 + "'";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Pur_Voucher", "std_Pur_Voucher", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70255":
                #region Purchase Voucher
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                header_n = "Purchase Voucher";
                SQuery = "select '" + header_n + "' as header,'" + frm_cDt1 + "' as fromdt,'" + frm_cDt2 + "' as todt,a.branchcd, C.NAME,a.type,b.aname,A.vchnum,to_char(A.vchdate,'dd/mm/yyyy') as vchdate,to_char(A.refdate,'dd/mm/yyyy') as refdate ,A.acode,A.dramt,A.cramt,a.refnum,a.invno,TO_CHAR(A.INVDATE,'DD/MM/YYYY') AS INVDATE,a.mrnnum,to_char(a.mrndate,'dd/mm/yyyy') as mrrdt,A.naration as remarks,A.ENT_BY,to_char(a.ent_date,'dd/mm/yyyy') as ent_dt from voucher A, famst b,TYPE C   where trim(a.acode)=trim (b.acode) AND TRIM(A.TYPE)=TRIM(C.TYPE1) AND C.ID='V'  and trim(A.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy')='" + mq0 + "'  order by vchnum ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt1 = new DataTable();
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    mq4 = "select a.branchcd,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,substr(a.COL27,1,6)  as mrr_no,substr(a.col27,7,10) as mrr_Dt,a.col27, a.ICODE,a.COL1 AS INAME,a.COL2 AS RCV_QTY,a.COL3 AS PO_RATE,a.col4 as pasrate,a.COL5 AS INV_RATE ,a.COL6 AS BASIC,a.col7 as rcv_wt,a.col8 as potype,a.col9 as basis,a.col34 as tax_rt,a.COL19 AS TAX_aMT,a.col40,a.remarks as rmk,a.num13 as swf ,a.num12 as ed,a.num11 as bcd,a.num2 as comp_cess,a.num3 as imp_tax,a.num4 as tool,a.col46 as partno,b.hscode from scratch a,item b where trim(a.icode)=trim(b.icode) and a.BRANCHCD='" + frm_mbr + "' AND a.type='VC' AND trim(a.vchnum) ='" + dt.Rows[0]["vchnum"].ToString().Trim() + "' and to_char(a.vchdate,'dd/mm/yyyy')='" + dt.Rows[0]["vchdate"].ToString().Trim() + "'";
                    dt1 = fgen.getdata(frm_qstr, frm_cocd, mq4);
                    dt1.TableName = "SUB";
                    dsRep.Tables.Add(dt1);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Pur_Voucher_old", "Pur_Voucher_old", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F25168": // MADE BY YOGITA , MERGE BY MADHVI ON 25 MAY 2018 
                header_n = "RM Closing Stock Details";
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Col1");
                if (mq1 == "63") { cond = "and substr(a.icode,1,2) in ('10')"; header_n = "Component Store"; val = mq1; }
                else if (mq1 == "6F") { cond = "and substr(a.icode,1,2) in ('20','25','30','35','40','45','50','55','56')"; header_n = "General Store"; val = mq1; }
                else if (mq1 == "6E") { cond = "and substr(a.icode,1,2) in ('15')"; header_n = "Raw Material"; val = mq1; }
                else
                {
                    val = "";
                    if (mq1.Length > 2) cond = "and substr(a.icode,1,2) in (" + mq1 + ")";
                    // else cond = "and substr(a.icode,1,2) in ('" + mq1 + "')"; header_n = "";
                    else cond = "trim(a.icode) like '%'"; header_n = "";
                }
                Gen_stk_pl(todt, cond);
                dsRep = new DataSet();
                if (mrs.Rows.Count > 0)
                {
                    mrs.TableName = "Prepcur";
                    dsRep.Tables.Add(mrs);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "cl_detail", "cl_detail", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F25167":  // MADE BY YOGITA , MERGE BY MADHVI ON 25 MAY 2018
            case "F25135":
                header_n = "RM Closing Stock Summary";
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Col1");
                if (mq1 == "63") { cond = "and substr(a.icode,1,2) in ('10')"; header_n = "Component Store"; val = mq1; }
                else if (mq1 == "6F") { cond = "and substr(a.icode,1,2) in ('20','25','30','35','40','45','50','55','56')"; header_n = "General Store"; val = mq1; }
                else if (mq1 == "6E") { cond = "and substr(a.icode,1,2) in ('15')"; header_n = "Raw Material"; val = mq1; }
                else
                {
                    val = "";
                    if (mq1.Length > 2) cond = "substr(a.icode,1,2) in (" + mq1 + ")";
                    //else cond = "and substr(a.icode,1,2) in ('" + mq1 + "')"; header_n = "";
                    else cond = "trim(a.icode) like '%'"; header_n = "";
                }
                Gen_stk_pl_S(todt, cond);
                dsRep = new DataSet();
                if (ph_tbl.Rows.Count > 0)
                {
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "CL_Smry", "CL_Smry", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F25147": // INVN REPS ICON ID MADE BY AKSHAY , MERGE BY MADHVI ON 26 MAY 2018
                header_n = "Item Wise FG Stock Summary";
                xprdrange1 = " between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_Date('" + fromdt + "','dd/mm/yyyy')-1 ";
                SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, b.iname,b.hscode,sum(a.opening) as Op_Bal,sum(a.cdr) as Inw_Qty,sum(a.ccr) as Outw_Qty,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as Closing_qty,b.unit,b.cpartno,a.icode from (Select icode, YR_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where branchcd='" + frm_mbr + "' union all  select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate  " + xprdrange1 + " and store='Y' GROUP BY ICODE union all select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + " and store='Y' GROUP BY ICODE )a, item b where trim(A.icode)=trim(B.icode) and trim(A.icode) between '90000000' and '99999999' group by b.iname,b.cpartno,b.hscode,b.unit,a.icode having sum(a.opening)+sum(a.cdr)-sum(a.ccr)<>0 order by iname ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Item_Fg_Stock_Summ", "std_Item_Fg_Stock_Summ", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70152": // MADE BY AKSHAY , MERGE BY MADHVI ON 26 MAY 2018
            case "F25148": // INVN REPS ICON ID
                header_n = "HSN Wise FG Stock Summary";
                xprdrange1 = " between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_Date('" + fromdt + "','dd/mm/yyyy')-1 ";
                SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, hscode,unit,sum(Op_Bal) as Op_Bal,sum(Inw_Qty) as Inw_Qty,sum(Outw_Qty) as Outw_Qty,sum(Closing_qty) as Closing_qty FROM (select b.iname,b.hscode,sum(opening) as Op_Bal,sum(a.cdr) as Inw_Qty,sum(a.ccr) as Outw_Qty,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as Closing_qty,b.unit,b.cpartno,a.icode from (Select icode, YR_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where branchcd='" + frm_mbr + "' union all  select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdrange1 + " and store='Y' GROUP BY ICODE union all select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + " and store='Y' GROUP BY ICODE )a, item b where trim(A.icode)=trim(B.icode) and trim(A.icode) between '90000000' and '99999999' group by b.iname,b.cpartno,b.hscode,b.unit,a.icode having sum(a.opening)+sum(a.cdr)-sum(a.ccr)<>0)GROUP BY hscode,unit ORDER BY hscode,unit ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_Hsn_Fg_Stock_Summ", "std_Hsn_Fg_Stock_Summ", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70270":
            case "F77209":
                #region Debtors Ageing Detailed Report
                SQuery = ""; cond = "";

                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");

                if (party_cd.Trim().Length <= 1)
                {
                    mq0 = " and m.GRP like '16%'";
                }
                else
                {
                    if (party_cd.Contains("'"))
                    {
                        mq0 = " and m.acode in (" + party_cd + ")";
                    }
                    else
                    {
                        mq0 = " and m.acode like '" + party_cd + "%'";
                    }
                }
                if (frm_ulvl == "M") cond = "and trim(m.acode) like '" + frm_uname.Trim() + "%'";
                if (mktggrp.Length < 2) mktggrp = fgenMV.Fn_Get_Mvar(frm_qstr, "U_III").Left(4);
                if (mktggrp.Length > 2)
                {
                    mq0 += " and substr(m.mktggrp,1,4)='" + mktggrp + "' ";
                }
                branch_Cd = "BRANCHCD NOT IN ('DD','88')";
                SQuery = "select 'Debtor Ageing As on Date " + todt + " with Transaction summary' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.total) as Total_Outstanding,sum(n.slab1) as Current_Os,sum(n.slab2) as OVER_30_60,sum(n.slab3) as OVER_61_90,sum(n.slab4) as OVER_90_180,sum(n.slab5) as OVER_181,n.acode,m.ADDR1 as Address,(case when x.BR_PAYNUM is null then is_number(m.Payment) else x.BR_PAYNUM end) as P_days,(case when x.BR_CLIMIT is null then m.Climit else x.BR_CLIMIT end) as Cr_limit,M.MKTGGRP,x.balop from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  ,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 31 AND 60) THEN dramt-cramt END) as slab2,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 61 AND 90) THEN dramt-cramt END) as slab3,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 91 AND 180) THEN dramt-cramt END) as slab4,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate > 181) THEN dramt-cramt END) as slab5 from  RecDataW_" + frm_mbr + " where branchcd='" + frm_mbr + "' ) n left outer join famstbal x on trim(n.acode)=trim(x.acode) and x.branchcd='" + frm_mbr + "' ,famst m where trim(n.acode)=trim(m.acode) " + mq0 + " " + cond + " group by m.aname,n.invno,m.addr1,(case when x.BR_PAYNUM is null then is_number(m.Payment) else x.BR_PAYNUM end),(case when x.BR_CLIMIT is null then m.Climit else x.BR_CLIMIT end),n.acode,m.zcode,n.invdate,M.MKTGGRP,x.balop order by m.aname,vdd,n.invno";
                // added dramt cramt field to be exported in excel - vv - 15/01/2022
                SQuery = "select 'Debtor Ageing As on Date " + todt + " with Transaction summary' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.dramt) as dramt,sum(n.cramt) as cramt,sum(n.total) as Total_Outstanding,sum(n.slab1) as Current_Os,sum(n.slab2) as OVER_30_60,sum(n.slab3) as OVER_61_90,sum(n.slab4) as OVER_90_180,sum(n.slab5) as OVER_181,n.acode,m.ADDR1 as Address,(case when nvl(x.BR_PAYNUM,0)=0 then is_number(m.Payment) else x.BR_PAYNUM end) as P_days,(case when nvl(x.BR_CLIMIT,0) is null then m.Climit else x.BR_CLIMIT end) as Cr_limit,M.MKTGGRP,x.balop from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  ,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 31 AND 60) THEN dramt-cramt END) as slab2,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 61 AND 90) THEN dramt-cramt END) as slab3,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 91 AND 180) THEN dramt-cramt END) as slab4,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate > 181) THEN dramt-cramt END) as slab5,dramt,cramt from RecDataW_all where " + branch_Cd + " ) n left outer join famstbal x on trim(n.acode)=trim(x.acode) and x.branchcd='" + frm_mbr + "' ,famst m where trim(n.acode)=trim(m.acode) " + mq0 + " " + cond + " group by m.aname,n.invno,m.addr1,(case when nvl(x.BR_PAYNUM,0)=0 then is_number(m.Payment) else x.BR_PAYNUM end),(case when nvl(x.BR_CLIMIT,0) is null then m.Climit else x.BR_CLIMIT end),n.acode,m.zcode,n.invdate,M.MKTGGRP,x.balop order by m.aname,vdd,n.invno";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "deb_age_d", "deb_age_d", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70271":
                #region Creditors Ageing Detailed Report
                SQuery = "";
                cond = "";
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");

                if (party_cd.Trim().Length <= 1)
                {

                    mq0 = "and substr(trim(grp),1,2) in ('05','06')";
                }
                else
                {
                    if (party_cd.Contains("'"))
                    {
                        mq0 = " and acode in (" + party_cd + ")";
                    }
                    else
                    {
                        mq0 = " and acode like '" + party_cd + "%'";
                    }
                }
                //  if (hfcode.Value.Length > 1) cond = "and trim(acode) like '" + hfcode.Value.Trim() + "%'";
                if (frm_ulvl == "M") cond = "and trim(acode) like '" + frm_uname.Trim() + "%'";

                if (frm_cocd == "SGRP" || frm_cocd == "UATS") //pymt terms from famstbal
                {
                    SQuery = "select 'Creditors Ageing As on Date " + todt + " with Transaction summary' as header,'" + todt + "' as todt,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.total) as Total_Outstanding,sum(n.slab1) as Current_Os,sum(n.slab2) as OVER_30_60,sum(n.slab3) as OVER_61_90,sum(n.slab4) as OVER_90_180,sum(n.slab5) as OVER_181,n.acode,m.ADDR1 as Addresss,(case when x.BR_PAYNUM is null then is_number(m.Payment) else x.BR_PAYNUM end) as P_days,(case when x.BR_CLIMIT is null then m.Climit else x.BR_CLIMIT end) as Cr_limit,M.MKTGGRP,x.balop from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  ,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 31 AND 60) THEN dramt-cramt END) as slab2,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 61 AND 90) THEN dramt-cramt END) as slab3,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 91 AND 180) THEN dramt-cramt END) as slab4,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate > 181) THEN dramt-cramt END) as slab5 from  recdataw_" + frm_mbr + " where branchcd='" + frm_mbr + "' " + mq0 + " " + cond + ") n left outer join famstbal x on trim(n.acode)=trim(x.acode) and x.branchcd='" + frm_mbr + "',famst m where trim(n.acode)=trim(m.acode) group by m.aname,n.invno,m.addr1,(case when x.BR_PAYNUM is null then is_number(m.Payment) else x.BR_PAYNUM end),(case when x.BR_CLIMIT is null then m.Climit else x.BR_CLIMIT end),n.acode,m.zcode,n.invdate,M.MKTGGRP,x.balop,m.climit,m.payment,n.acode,m.zcode,n.invdate,M.MKTGGRP /*having sum(n.total)!=0*/ order by m.aname,vdd,n.invno";
                }
                else
                {

                    SQuery = "select 'Creditors Ageing As on Date " + todt + " with Transaction summary' as header,'" + todt + "' as todt,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.total) as Total_Outstanding,sum(n.slab1) as Current_Os,sum(n.slab2) as OVER_30_60,sum(n.slab3) as OVER_61_90,sum(n.slab4) as OVER_90_180,sum(n.slab5) as OVER_181,n.acode,m.ADDR1 as Addresss,nvl(m.PAY_NUM,0) as P_days,m.Climit as Cr_limit,M.MKTGGRP,m.balop from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  ,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 31 AND 60) THEN dramt-cramt END) as slab2,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 61 AND 90) THEN dramt-cramt END) as slab3,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 91 AND 180) THEN dramt-cramt END) as slab4,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate > 181) THEN dramt-cramt END) as slab5 from  recdataw_" + frm_mbr + " where branchcd='" + frm_mbr + "' " + mq0 + " " + cond + ") n ,famst m where trim(n.acode)=trim(m.acode) group by m.aname,n.invno,m.addr1,nvl(m.PAY_NUM,0),m.Climit,n.acode,m.zcode,n.invdate,M.MKTGGRP,m.balop,m.climit,m.payment,n.acode,m.zcode,n.invdate,M.MKTGGRP /*having sum(n.total)!=0*/ order by m.aname,vdd,n.invno";
                }


                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "deb_age_d", "deb_age_d", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70144":
                header_n = "Debtors Ageing Summary Report";
                //SQuery = ""; if (ulvl == "M") cond = "and trim(x.acode) like '" + uname.Trim() + "%'";
                cond = "";
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                if (party_cd.Trim().Length <= 1)
                {

                    mq5 = "and trim(x.grp) in ('16')";
                }
                else
                {
                    if (party_cd.Contains("'"))
                    {
                        mq5 = " and x.acode in (" + party_cd + ")";
                    }
                    else
                    {
                        mq5 = " and x.acode like '" + party_cd + "%'";
                    }
                }
                if (mktggrp.Length > 2)
                {
                    mq5 += " and substr(x.mktggrp,1,4)='" + mktggrp + "' ";
                }

                branch_Cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_BRANCH_CD");
                m1 = fgen.seek_iname(frm_qstr, frm_cocd, "select params from controls where id='R01'", "params");
                xprdrange1 = "between to_Date('01/" + todt.Substring(3, 7).Trim() + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')";

                mq0 = "Select 0 as Total_Outstanding, 0 as Current_Os,0 as OVER_30_60,0 as OVER_61_90,0 as OVER_90_180,0 as OVER_181,TRIM(acode) AS ACODE,0 AS CL,0 AS BILL_TOT,sum(cramt-dramt) as mtd from voucher where " + branch_Cd + " and SUBSTR(TYPE,1,1) in ('1','3') and substr(acode,1,2) in ('16') and VCHDATE " + xprdrange1 + " group by TRIM(acode) UNION ALL ";
                mq1 = "select 0 as Total_Outstanding, 0 as Current_Os,0 as OVER_30_60,0 as OVER_61_90,0 as OVER_90_180,0 as OVER_181,TRIM(acode) AS ACODE,0 AS CL,sum(bill_tot) as bill_tot,0 AS MTD from sale where " + branch_Cd + " and type like '4%' and type<>'47' and vchdate " + xprdrange1 + " and substr(acode,1,2)='16'  group by TRIM(acode) UNION ALL ";
                mq2 = "select sum(n.total) as Total_Outstanding, sum(n.slab1) as Current_Os, sum(n.slab2) as OVER_30_60, sum(n.slab3) as OVER_61_90, sum(n.slab4) as OVER_90_180, sum(n.slab5) as OVER_181,TRIM(n.acode) AS ACODE,0 AS CL,0 AS BILL_TOT,0 AS MTD from (SELECT TRIM(acode) AS ACODE,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  ,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 31 AND 60) THEN dramt-cramt END) as slab2,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 61 AND 90) THEN dramt-cramt END) as slab3,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 91 AND 180) THEN dramt-cramt END) as slab4,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate > 181) THEN dramt-cramt END) as slab5 from  recdataw_" + frm_mbr + " where " + branch_Cd + ") n where substr(n.acode,1,2) in ('16') and n.total!=0 group by TRIM(n.acode) UNION ALL ";
                mq3 = "select 0 as Total_Outstanding, 0 as Current_Os,0 as OVER_30_60,0 as OVER_61_90,0 as OVER_90_180,0 as OVER_181,TRIM(acode) AS ACODE,sum(opb)+sum(curr) as CL,0 as bill_tot,0 AS MTD from (select TRIM(acode) AS ACODE, yr_" + frm_myear + " as opb, 0 as curr from famstbal where " + branch_Cd + " union all select TRIM(acode) AS ACODE, 0 as opb, sum(dramt)-sum(cramt) as curr from voucher where BRANCHCD='" + frm_mbr + "' and vchdate " + xprdRange + " group by TRIM(acode)) group by TRIM(acode) ";

                SQuery = "SELECT * FROM (SELECT 'Debtor Ageing As on Date " + todt + " with Transaction summary' as header,x.pay_num,x.aname as party,x.Climit,sum(Z.TOTAL_OUTSTANDING) as TOTAL_OUTSTANDING,sum(Z.CURRENT_OS) as CURRENT_OS,sum(Z.OVER_30_60) as OVER_30_60,sum(Z.OVER_61_90) as OVER_61_90,sum(Z.OVER_90_180) as OVER_90_180,sum(Z.OVER_181) as OVER_181,TRIM(Z.ACODE) AS ACODE,sum(Z.CL) as cl,sum(Z.BILL_TOT) as BILL_TOT,sum(Z.MTD) as mtd FROM ( " + mq0 + mq1 + mq2 + mq3 + ") Z,famst x where trim(z.acode)=trim(x.acode)  " + mq5 + " " + cond + " group by trim(z.acode),x.aname,x.Climit,x.pay_num) WHERE (TOTAL_OUTSTANDING+CURRENT_OS+OVER_30_60+OVER_61_90+OVER_90_180+OVER_181+CL+BILL_TOT+MTD)<> 0 order by party";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "ageing_deb", "ageing_deb", dsRep, header_n);
                    //if (frm_cocd == "MCIL") fgen.Print_Report(frm_cocd, frm_mbr, SQuery, "brpl_da", "brpl_dawcr");
                    //else fgen.Print_Report(frm_cocd, frm_mbr, SQuery, "brpl_da", "brpl_da");
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70146":
                #region Creditors Summary Ageing Report
                //SQuery = ""; if (ulvl == "M") cond = "and trim(x.acode) like '" + uname.Trim() + "%'";
                cond = "";
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                if (party_cd.Trim().Length <= 1)
                {

                    mq5 = "and substr(x.Acode,1,2) in ('05','06')";
                }
                else
                {
                    if (party_cd.Contains("'"))
                    {
                        mq5 = " and x.acode in (" + party_cd + ")";
                    }
                    else
                    {
                        mq5 = " and x.acode like '" + party_cd + "%'";
                    }
                }
                xprdRange1 = "between to_Date('01/" + todt.Substring(3, 7).Trim() + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')";

                mq0 = "Select 0 as Total_Outstanding, 0 as Current_Os,0 as OVER_30_60,0 as OVER_61_90,0 as OVER_90_180,0 as OVER_181,TRIM(acode) AS ACODE,0 AS CL,0 AS BILL_TOT,sum(cramt-dramt) as mtd from voucher where BRANCHCD='" + frm_mbr + "' and SUBSTR(TYPE,1,1) in ('2','3') and substr(acode,1,2) in ('05','06') and VCHDATE " + xprdRange1 + " group by TRIM(acode) UNION ALL ";
                mq1 = "select 0 as Total_Outstanding, 0 as Current_Os,0 as OVER_30_60,0 as OVER_61_90,0 as OVER_90_180,0 as OVER_181,TRIM(acode) AS ACODE,0 AS CL,sum(bill_tot) as bill_tot,0 AS MTD from sale where BRANCHCD='" + frm_mbr + "' and type like '4%' and type<>'47' and vchdate " + xprdRange1 + " and substr(acode,1,2) IN ('05','06')  group by TRIM(acode) UNION ALL ";
                mq2 = "select sum(n.total) as Total_Outstanding, sum(n.slab1) as Current_Os, sum(n.slab2) as OVER_30_60, sum(n.slab3) as OVER_61_90, sum(n.slab4) as OVER_90_180, sum(n.slab5) as OVER_181,TRIM(n.acode) AS ACODE,0 AS CL,0 AS BILL_TOT,0 AS MTD from (SELECT TRIM(acode) AS ACODE,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  ,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 31 AND 60) THEN dramt-cramt END) as slab2,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 61 AND 90) THEN dramt-cramt END) as slab3,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 91 AND 180) THEN dramt-cramt END) as slab4,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate > 181) THEN dramt-cramt END) as slab5 from  recdataw_" + frm_mbr + " where BRANCHCD='" + frm_mbr + "') n where substr(n.acode,1,2) in ('05','06') and n.total!=0 group by TRIM(n.acode) UNION ALL ";
                mq3 = "select 0 as Total_Outstanding, 0 as Current_Os,0 as OVER_30_60,0 as OVER_61_90,0 as OVER_90_180,0 as OVER_181,TRIM(acode) AS ACODE,sum(opb)+sum(curr) as CL,0 as bill_tot,0 AS MTD from (select TRIM(acode) AS ACODE, yr_" + frm_myear + " as opb, 0 as curr from famstbal where BRANCHCD='" + frm_mbr + "' union all select TRIM(acode) AS ACODE, 0 as opb, sum(dramt)-sum(cramt) as curr from voucher where BRANCHCD='" + frm_mbr + "' and vchdate " + xprdRange + " group by TRIM(acode)) group by TRIM(acode) ";

                #region
                //if (frm_cocd == "NEOP")
                //{
                //    if (ulvl != "0")
                //    {
                //        value1 = ""; value2 = "";
                //        value1 = fgen.seek_iname(frm_cocd, "Select trim(smsopts) as icons from evas where trim(upper(username))='" + uname + "'", "icons");
                //        if (value1.Length > 1)
                //        {
                //            string[] word = value1.Split(',');
                //            foreach (string vp in word)
                //            {
                //                if (value2.Length > 0) value2 = value2 + "," + "'" + vp.ToString().Trim() + "'";
                //                else value2 = "'" + vp.ToString().Trim() + "'";
                //        }
                //            if (value1 != "0") SQuery = "SELECT * FROM (SELECT 'Debtor Ageing As on Date " + todt + " with Transaction summary    For " + uname + "' as header,x.aname as party,sum(Z.TOTAL_OUTSTANDING) as TOTAL_OUTSTANDING,sum(Z.CURRENT_OS) as CURRENT_OS,sum(Z.OVER_30_60) as OVER_30_60,sum(Z.OVER_61_90) as OVER_61_90,sum(Z.OVER_90_180) as OVER_90_180,sum(Z.OVER_181) as OVER_181,TRIM(Z.ACODE) AS ACODE,sum(Z.CL) as cl,sum(Z.BILL_TOT) as BILL_TOT,sum(Z.MTD) as mtd FROM ( " + mq0 + mq1 + mq2 + mq3 + ") Z,famst x where trim(z.acode)=trim(x.acode) and substr(x.acode,1,2)='16' and trim(x.bssch) in (" + value2 + ") group by trim(z.acode),x.aname) WHERE (TOTAL_OUTSTANDING+CURRENT_OS+OVER_30_60+OVER_61_90+OVER_90_180+OVER_181+CL+BILL_TOT+MTD)!=0 order by party";
                //        }
                //    }
                //    else SQuery = "SELECT * FROM (SELECT 'Debtor Ageing As on Date " + todt + " with Transaction summary' as header,x.aname as party,sum(Z.TOTAL_OUTSTANDING) as TOTAL_OUTSTANDING,sum(Z.CURRENT_OS) as CURRENT_OS,sum(Z.OVER_30_60) as OVER_30_60,sum(Z.OVER_61_90) as OVER_61_90,sum(Z.OVER_90_180) as OVER_90_180,sum(Z.OVER_181) as OVER_181,TRIM(Z.ACODE) AS ACODE,sum(Z.CL) as cl,sum(Z.BILL_TOT) as BILL_TOT,sum(Z.MTD) as mtd FROM ( " + mq0 + mq1 + mq2 + mq3 + ") Z,famst x where trim(z.acode)=trim(x.acode) and substr(x.acode,1,2)='16' group by trim(z.acode),x.aname) WHERE (TOTAL_OUTSTANDING+CURRENT_OS+OVER_30_60+OVER_61_90+OVER_90_180+OVER_181+CL+BILL_TOT+MTD)!=0 order by party";
                //}
                //else 
                #endregion

                //SQuery = "SELECT * FROM (SELECT 'Creditors Summary Ageing As on Date " + todt + " with Transaction summary' as header,'" + todt + "' as todt,x.pay_num,x.aname as party,x.Climit,sum(Z.TOTAL_OUTSTANDING) as TOTAL_OUTSTANDING,sum(Z.CURRENT_OS) as CURRENT_OS,sum(Z.OVER_30_60) as OVER_30_60,sum(Z.OVER_61_90) as OVER_61_90,sum(Z.OVER_90_180) as OVER_90_180,sum(Z.OVER_181) as OVER_181,TRIM(Z.ACODE) AS ACODE,sum(Z.CL) as cl,sum(Z.BILL_TOT) as BILL_TOT,sum(Z.MTD) as mtd FROM ( " + mq0 + mq1 + mq2 + mq3 + ") Z,famst x where trim(z.acode)=trim(x.acode) and substr(x.acode,1,2) IN ('05','06') " + cond + " group by trim(z.acode),x.aname,x.Climit,x.pay_num) WHERE (TOTAL_OUTSTANDING+CURRENT_OS+OVER_30_60+OVER_61_90+OVER_90_180+OVER_181+CL+BILL_TOT+MTD)!=0 order by party";
                SQuery = "SELECT * FROM (SELECT 'Creditors Summary Ageing As on Date " + todt + " with Transaction summary' as header,'" + todt + "' as todt,x.pay_num,x.aname as party,x.Climit,sum(Z.TOTAL_OUTSTANDING) as TOTAL_OUTSTANDING,sum(Z.CURRENT_OS) as CURRENT_OS,sum(Z.OVER_30_60) as OVER_30_60,sum(Z.OVER_61_90) as OVER_61_90,sum(Z.OVER_90_180) as OVER_90_180,sum(Z.OVER_181) as OVER_181,TRIM(Z.ACODE) AS ACODE,sum(Z.CL) as cl,sum(Z.BILL_TOT) as BILL_TOT,sum(Z.MTD) as mtd FROM ( " + mq0 + mq1 + mq2 + mq3 + ") Z,famst x where trim(z.acode)=trim(x.acode) " + mq5 + " " + cond + " group by trim(z.acode),x.aname,x.Climit,x.pay_num) WHERE (TOTAL_OUTSTANDING+CURRENT_OS+OVER_30_60+OVER_61_90+OVER_90_180+OVER_181+CL+BILL_TOT+MTD)!=0 order by party";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "ageing_Cred", "ageing_Cred", dsRep, header_n);
                    //if (frm_cocd == "MCIL") fgen.Print_Report(frm_cocd, frm_mbr, SQuery, "brpl_da", "brpl_dawcr");
                    //else fgen.Print_Report(frm_cocd, frm_mbr, SQuery, "brpl_da", "brpl_da");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            ///COW  2.6.2018....BY YOGITA
            case "F70280": //DETAILED outstanding balance REPORT
                #region creditors Ageing detailed report with On Ac Column
                ph_tbl = new DataTable();
                ph_tbl.Columns.Add("header", typeof(string));
                ph_tbl.Columns.Add("todt", typeof(string));
                ph_tbl.Columns.Add("party", typeof(string));
                ph_tbl.Columns.Add("invno", typeof(string));
                ph_tbl.Columns.Add("invdate", typeof(string));
                ph_tbl.Columns.Add("vdd", typeof(string));
                ph_tbl.Columns.Add("total_outstanding", typeof(double));
                ph_tbl.Columns.Add("current_os", typeof(double));
                ph_tbl.Columns.Add("over_30_60", typeof(double));
                ph_tbl.Columns.Add("over_61_90", typeof(double));
                ph_tbl.Columns.Add("over_90_180", typeof(double));
                ph_tbl.Columns.Add("over_181", typeof(double));
                ph_tbl.Columns.Add("acode", typeof(string));
                ph_tbl.Columns.Add("address", typeof(string));
                ph_tbl.Columns.Add("p_days", typeof(string));
                ph_tbl.Columns.Add("cr_limit", typeof(double));
                ph_tbl.Columns.Add("on_acc", typeof(double));

                //  if (hfcode.Value.Length > 1) cond = "and trim(acode) like '" + hfcode.Value.Trim() + "%'";
                cond = "";
                if (frm_ulvl == "M") cond = "and trim(acode) like '" + frm_uname.Trim() + "%'";

                SQuery = "select 'Creditors Ageing As on Date " + todt + " with Transaction summary' as header,'" + todt + "' as todt,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.total) as Total_Outstanding,sum(n.slab1) as Current_Os,sum(n.slab2) as OVER_30_60,sum(n.slab3) as OVER_61_90,sum(n.slab4) as OVER_90_180,sum(n.slab5) as OVER_181,n.acode,m.ADDR1 as Address,m.Payment as P_days,m.Climit  as Cr_limit from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  ,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 31 AND 60) THEN dramt-cramt END) as slab2,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 61 AND 90) THEN dramt-cramt END) as slab3,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 91 AND 180) THEN dramt-cramt END) as slab4,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate > 181) THEN dramt-cramt END) as slab5 from  recdataw_" + frm_mbr + " where branchcd='" + frm_mbr + "' and substr(trim(acode),1,2) in ('05','06') " + cond + ") n ,famst m where trim(n.acode)=trim(m.acode) group by m.aname,n.invno,m.addr1,m.climit,m.payment,n.acode,m.zcode,n.invdate /*having sum(n.total)!=0*/ order by m.aname,vdd,n.invno";

                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        db1 = 0; db2 = 0; db3 = 0;
                        dr1 = ph_tbl.NewRow();
                        dr1["header"] = dt.Rows[i]["header"].ToString().Trim();
                        dr1["todt"] = dt.Rows[i]["todt"].ToString().Trim();
                        dr1["party"] = dt.Rows[i]["party"].ToString().Trim();
                        dr1["invno"] = dt.Rows[i]["invno"].ToString().Trim();
                        dr1["invdate"] = dt.Rows[i]["invdate"].ToString().Trim();
                        dr1["vdd"] = dt.Rows[i]["vdd"].ToString().Trim();
                        dr1["total_outstanding"] = fgen.make_double(dt.Rows[i]["total_outstanding"].ToString().Trim());
                        db = fgen.make_double(dt.Rows[i]["total_outstanding"].ToString().Trim());
                        dr1["current_os"] = fgen.make_double(dt.Rows[i]["current_os"].ToString().Trim());
                        dr1["over_30_60"] = fgen.make_double(dt.Rows[i]["over_30_60"].ToString().Trim());
                        dr1["over_61_90"] = fgen.make_double(dt.Rows[i]["over_61_90"].ToString().Trim());
                        db3 = fgen.make_double(dt.Rows[i]["over_61_90"].ToString().Trim());
                        dr1["over_181"] = fgen.make_double(dt.Rows[i]["over_181"].ToString().Trim());
                        dr1["acode"] = dt.Rows[i]["acode"].ToString().Trim();
                        dr1["address"] = dt.Rows[i]["address"].ToString().Trim();
                        dr1["p_days"] = dt.Rows[i]["p_days"].ToString().Trim();
                        dr1["cr_limit"] = fgen.make_double(dt.Rows[i]["cr_limit"].ToString().Trim());
                        if (db < 0) //if value is negative
                        {
                            if (db3 == 0)
                            {
                                dr1["over_90_180"] = db;
                            }
                        }
                        else //if value is positive
                        {
                            dr1["on_acc"] = db;
                        }

                        ph_tbl.Rows.Add(dr1);
                    }
                }
                /////////////////////
                if (ph_tbl.Rows.Count > 0)
                {
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "cred_age_d_acc", "cred_age_d_acc", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                // else fgen.msg("-", "AMSG", "No Data Exist");
                #endregion
                break;

            case "F70281": //DETAILED REPORT with on ac column.......
                #region debtor detailed report with On Ac column
                SQuery = "";
                ph_tbl = new DataTable();
                ph_tbl.Columns.Add("header", typeof(string));
                ph_tbl.Columns.Add("todt", typeof(string));
                ph_tbl.Columns.Add("party", typeof(string));
                ph_tbl.Columns.Add("invno", typeof(string));
                ph_tbl.Columns.Add("invdate", typeof(string));
                ph_tbl.Columns.Add("vdd", typeof(string));
                ph_tbl.Columns.Add("total_outstanding", typeof(double));
                ph_tbl.Columns.Add("current_os", typeof(double));
                ph_tbl.Columns.Add("over_30_60", typeof(double));
                ph_tbl.Columns.Add("over_61_90", typeof(double));
                ph_tbl.Columns.Add("over_90_180", typeof(double));
                ph_tbl.Columns.Add("over_181", typeof(double));
                ph_tbl.Columns.Add("acode", typeof(string));
                ph_tbl.Columns.Add("address", typeof(string));
                ph_tbl.Columns.Add("p_days", typeof(string));
                ph_tbl.Columns.Add("cr_limit", typeof(double));
                ph_tbl.Columns.Add("on_acc", typeof(double));
                //  if (hfcode.Value.Length > 1) cond = "and trim(acode) like '" + hfcode.Value.Trim() + "%'";
                cond = "";

                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                if (mq0.Trim().Length > 2)
                {
                    cond = " AND M.BSSCH='" + mq0.Trim() + "'";
                }
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                if (party_cd.Length > 3)
                {
                    cond = " AND M.acode in ('" + mq0.Trim() + "')";
                }

                if (frm_ulvl == "M") cond = "and trim(acode) like '" + frm_uname.Trim() + "%'";
                m1 = fgen.seek_iname(frm_qstr, frm_cocd, "select params from controls where id='R01'", "params");

                if (mktggrp.Length > 2)
                {
                    cond += " and substr(m.mktggrp,1,4)='" + mktggrp + "' ";
                }

                SQuery = "select 'Debtor Ageing As on Date " + todt + " with Transaction summary' as header,'" + todt + "' as todt,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.total) as Total_Outstanding,sum(n.slab1) as  Current_Os,sum(n.slab2) as OVER_30_60,sum(n.slab3) as OVER_61_90,sum(n.slab4) as OVER_90_180,sum(n.slab5) as OVER_181,n.acode,m.ADDR1 as Address,m.Payment as P_days,m.Climit  as Cr_limit from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  ,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 31 AND 60) THEN dramt-cramt END) as slab2,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 61 AND 90) THEN dramt-cramt END) as slab3,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 91 AND 180) THEN dramt-cramt END) as slab4,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate > 181) THEN dramt-cramt END) as slab5 from  recdataw_" + frm_mbr + " where branchcd='" + frm_mbr + "' and acode like '16%') n ,famst m where trim(n.acode)=trim(m.acode) " + cond + " group by m.aname,n.invno,m.addr1,m.climit,m.payment,n.acode,m.zcode,n.invdate order by m.aname,vdd,n.invno";
                if (SQuery.Length > 0)
                    dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                #region      /////cursor
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        db1 = 0; db2 = 0; db3 = 0;
                        dr1 = ph_tbl.NewRow();
                        dr1["header"] = dt.Rows[i]["header"].ToString().Trim();
                        dr1["todt"] = dt.Rows[i]["todt"].ToString().Trim();
                        dr1["party"] = dt.Rows[i]["party"].ToString().Trim();
                        dr1["invno"] = dt.Rows[i]["invno"].ToString().Trim();
                        dr1["invdate"] = dt.Rows[i]["invdate"].ToString().Trim();
                        dr1["vdd"] = dt.Rows[i]["vdd"].ToString().Trim();
                        dr1["total_outstanding"] = fgen.make_double(dt.Rows[i]["total_outstanding"].ToString().Trim());
                        db = fgen.make_double(dt.Rows[i]["total_outstanding"].ToString().Trim());
                        dr1["current_os"] = fgen.make_double(dt.Rows[i]["current_os"].ToString().Trim());
                        dr1["over_30_60"] = fgen.make_double(dt.Rows[i]["over_30_60"].ToString().Trim());
                        dr1["over_61_90"] = fgen.make_double(dt.Rows[i]["over_61_90"].ToString().Trim());
                        db3 = fgen.make_double(dt.Rows[i]["over_61_90"].ToString().Trim());
                        dr1["over_181"] = fgen.make_double(dt.Rows[i]["over_181"].ToString().Trim());
                        dr1["acode"] = dt.Rows[i]["acode"].ToString().Trim();
                        dr1["address"] = dt.Rows[i]["address"].ToString().Trim();
                        dr1["p_days"] = dt.Rows[i]["p_days"].ToString().Trim();
                        dr1["cr_limit"] = fgen.make_double(dt.Rows[i]["cr_limit"].ToString().Trim());
                        if (db > 0) //if value positive
                        {
                            if (db3 == 0) //agar 61-90 col me value fill ho gyi to yha na ho
                            {
                                dr1["over_90_180"] = db;
                            }
                        }
                        else //if value is negative
                        {
                            dr1["on_acc"] = db;
                        }
                        ph_tbl.Rows.Add(dr1);
                    }
                }
                #endregion
                if (ph_tbl.Rows.Count > 0)
                {
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "deb_age_d_OnAc", "deb_age_d_OnAc", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                //else fgen.msg("-", "AMSG", "No Data Exist");
                #endregion
                break;

            case "F70132":
                header_n = "Rcpt Register";
                frm_vty = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                if (frm_vty.Contains("%"))
                {
                    SQuery = "select '" + header_n + "' as header,'" + fromdt + "' AS FROMDT,'" + todt + "' AS TODT, a.branchcd,a.type,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,trim(a.acode) as Acode,b.aname ,trim(a.rcode) as Rcode,c.aname as Rname ,sum(a.dramt) as dr_Amt,sum(a.cramt) as cr_Amt,a.invno,a.ent_by,a.vchdate as vdd from voucher a,famst b,famst c where trim(a.acodE)=trim(b.acodE) and trim(a.rcode)=trim(c.acode) and a.branchcd='" + frm_mbr + "' and  type like '1%' and a.vchdate  " + xprdRange + " and a.dramt>0  and substr(trim(b.grp),1,2) in ('03','12') group by trim(a.acode),b.aname,c.aname,trim(a.rcode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.invno,a.type,a.ent_by,a.branchcd,a.vchdate order by vdd, a.type,a.vchnum";
                }
                else
                {
                    SQuery = "select '" + header_n + "' as header,'" + fromdt + "' AS FROMDT,'" + todt + "' AS TODT, a.branchcd,a.type,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,trim(a.acode) as Acode,b.aname ,trim(a.rcode) as Rcode,c.aname as Rname ,sum(a.dramt) as dr_Amt,sum(a.cramt) as cr_Amt,a.invno,a.ent_by,a.vchdate as vdd from voucher a,famst b,famst c where trim(a.acodE)=trim(b.acodE) and trim(a.rcode)=trim(c.acode) and a.branchcd='" + frm_mbr + "' and  type in (" + frm_vty + ") and a.vchdate  " + xprdRange + " and a.dramt>0  and substr(trim(b.grp),1,2) in ('03','12') group by trim(a.acode),b.aname,c.aname,trim(a.rcode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.invno,a.type,a.ent_by,a.branchcd,a.vchdate order by vdd,a.type,a.vchnum";
                }
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "RCPT_REG", "RCPT_REG", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70133":
                header_n = "Payment Register";
                frm_vty = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                if (frm_vty.Contains("%"))
                {
                    SQuery = "select '" + header_n + "' as header,'" + fromdt + "' AS FROMDT,'" + todt + "' AS TODT, a.branchcd,a.type,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,trim(a.acode) as Acode,b.aname ,trim(a.rcode) as Rcode,c.aname as Rname ,sum(a.dramt) as dr_Amt,sum(a.cramt) as cr_Amt,a.invno,a.ent_by,a.vchdate as vdd from voucher a,famst b,famst c where trim(a.acodE)=trim(b.acodE) and trim(a.rcode)=trim(c.acode) and a.branchcd='" + frm_mbr + "' and  type like '2%' and a.vchdate " + xprdRange + "  and a.dramt>0 and substr(trim(c.grp),1,2) in ('03','12') group by trim(a.acode),b.aname,c.aname,trim(a.rcode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.invno,a.type,a.ent_by,a.branchcd,a.vchdate order by vdd,a.type,a.vchnum";
                }
                else
                {
                    SQuery = "select '" + header_n + "' as header,'" + fromdt + "' AS FROMDT,'" + todt + "' AS TODT, a.branchcd,a.type,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,trim(a.acode) as Acode,b.aname ,trim(a.rcode) as Rcode,c.aname as Rname ,sum(a.dramt) as dr_Amt,sum(a.cramt) as cr_Amt,a.invno,a.ent_by,a.vchdate as vdd from voucher a,famst b,famst c where trim(a.acodE)=trim(b.acodE) and trim(a.rcode)=trim(c.acode) and a.branchcd='" + frm_mbr + "' and  type in (" + frm_vty + ") and a.vchdate " + xprdRange + "  and a.dramt>0 and substr(trim(c.grp),1,2) in ('03','12') group by trim(a.acode),b.aname,c.aname,trim(a.rcode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.invno,a.type,a.ent_by,a.branchcd,a.vchdate order by vdd,a.type,a.vchnum";
                }
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "RCPT_REG", "RCPT_REG", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70259":
                //Collection Report -graph             
                header_n = "Collection Trend Report (In Rs.00000)";
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                SQuery = " select '" + header_n + "' as header,'" + frm_cDt1 + "' as fromdt,'" + frm_cDt2 + "' as todt,  to_char(vchdate,'yyyymm') as vdd , to_char(vchdate,'MON-YY') as datee, round((sum(cramt)-sum(dramt))/100000,2) as dr  from voucher where branchcd='" + frm_mbr + "' and substr(type,1,1)='1' and substr(acode,1,2) in('16') and vchdate " + xprdRange + " group by to_char(vchdate,'MON-YY'),to_char(vchdate,'yyyymm') order by vdd";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Collection_Graph", "Collection_Graph", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70260":
                //Collection Report party wise -graph             
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                header_n = "Collection Trend Report Party Wise  (In Rs.00000)";
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                SQuery = " select '" + header_n + "' as header,'" + frm_cDt1 + "' as fromdt,'" + frm_cDt2 + "' as todt, to_char(a.vchdate,'yyyymm') as vdd,to_char(a.vchdate,'MON-yy') as vchdate,trim(a.acode) as Acode,b.aname ,trim(a.rcode) as Rcode,c.aname as Rname ,round((sum(dramt)-sum(cramt))/100000,2) as dr_Amt from voucher a,famst b,famst c where trim(a.acodE)=trim(b.acodE) and trim(a.rcode)=trim(c.acode) and a.branchcd='" + frm_mbr + "' and substr(a.type,1,1)='1' and substr(a.acode,1,2) in('16') and a.vchdate " + xprdRange + " and a.dramt>0 and a.acode='" + mq0 + "' group by trim(a.acode),b.aname,c.aname,trim(a.rcode),to_char(a.vchdate,'yyyymm'),to_char(a.vchdate,'MON-yy') order by vdd ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Collection_Party_Graph", "Collection_Party_Graph", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70261":
                //Purchase Report  -graph             
                header_n = "Purchase Trend Report (In Rs.00000)";
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                SQuery = " select '" + header_n + "' as header,'" + frm_cDt1 + "' as fromdt,'" + frm_cDt2 + "' as todt, to_char(vchdate,'yyyymm') as vdd,to_char(vchdate,'MON-YY') AS DATEE , round(sum(dramt )/100000,2) as Cr from voucher where branchcd='" + frm_mbr + "' and type like '5%' AND VCHDATE " + xprdRange + " and substr(acode,1,1) >= '3' GROUP BY to_char(vchdate,'MON-YY') ,to_char(vchdate,'yyyymm') ORDER BY VDD";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Purchase_Trend_Graph", "Purchase_Trend_Graph", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70264":
                //Sales Report party wise -graph             
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                header_n = "Sales Trend Report Party Wise  (In Rs.00000)";
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                SQuery = "select '" + header_n + "' as header,'" + frm_cDt1 + "' as fromdt,'" + frm_cDt2 + "' as todt, a.acode,b.aname,to_char(a.vchdate,'MON-yy') as datee, to_char(a.vchdate,'yyyymm') as vdd,round(sum(a.dramt )/100000,2) as dr  from voucher a , famst b  where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type like '4%' AND a.VCHDATE " + xprdRange + " and substr(trim(a.acode),1,1)= '2'and a.rcode='" + mq0 + "' group by a.acode, to_char(a.vchdate,'MON-yy'),to_char(a.vchdate,'yyyymm'),b.aname order by vdd,datee";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Sales_Trend_Party_Graph", "Sales_Trend_Party_Graph", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70263":
                //Sales trend -graph             
                header_n = "Sales Trend Report (In Rs.00000)";
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                SQuery = "select '" + header_n + "' as header,'" + frm_cDt1 + "' as fromdt,'" + frm_cDt2 + "' as todt, to_char(vchdate,'MON-yy') as datee, to_char(vchdate,'yyyymm') as vdd,round(sum(cramt )/100000,2) as dr  from voucher where branchcd='" + frm_mbr + "' and type like '4%' and substr(acode,1,1) >= '2' AND VCHDATE " + xprdRange + "  group by to_char(vchdate,'MON-yy'),to_char(vchdate,'yyyymm') order by vdd,datee";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Sales_Trend_Graph", "Sales_Trend_Graph", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70265":
                // EXPENSE TREND- graph
                header_n = "Expenses Graph (In Rs.00000)";
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                SQuery = " select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, to_char(vchdate,'yyyymm') as vdd, to_char(vchdate,'MON-yy') as vchdate, round(sum(dramt- cramt)/100000,2)  as dr from voucher  where branchcd='" + frm_mbr + "' and type like '%'   and vchdate " + xprdRange + " and SUBSTR(acode,1,2)>='30' group by to_char(vchdate,'yyyymm') , to_char(vchdate,'MON-yy') order by vdd";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Expense_Trend_Graph", "Expense_Trend_Graph", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70266":
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                header_n = "Expenses Account Wise Graph (In Rs.00000)";
                xprdRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                SQuery = " select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, to_char(a.vchdate,'yyyymm') as vdd, to_char(a.vchdate,'MON-yy') as vchdate,a.acode,b.aname, round(sum(a.dramt-a.cramt)/100000,2)  as dr from voucher A, famst B   where trim(a.acode)=trim(b.acode) and  a.branchcd='" + frm_mbr + "' and a.type like '%'   and a.vchdate " + xprdRange + " and a.acode='" + mq0 + "' group by to_char(a.vchdate,'yyyymm') , to_char(a.vchdate,'MON-yy'), b.aname,a.acode order by vdd";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Expense_Trend_Acc_Graph", "Expense_Trend_Acc_Graph", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;
            //header_n = "Payment Graph (In Rs.00000)";
            //SQuery = " select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, to_char(vchdate,'yyyymm') as vdd, to_char(vchdate,'MON-yy') as vchdate, round(sum(cramt)/100000,2) as cr from voucher where branchcd='" + frm_mbr + "' and type like '2%' and vchdate " + xprdRange + " group by to_char(vchdate,'yyyymm') , to_char(vchdate,'MON-yy') order by vdd";
            //dt = new DataTable();
            //dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
            //if (dt.Rows.Count > 0)
            //{
            //    dt.TableName = "Prepcur";
            //    dsRep.Tables.Add(dt);
            //    Print_Report_BYDS(frm_cocd, frm_mbr, "Payment_Graph", "Payment_Graph", dsRep, header_n);
            //}
            //break;

            case "F70269":
                #region Account Ledger======finance-reports-accounts book-ledger
                ph_tbl = new DataTable();
                ph_tbl.Columns.Add("fromdt", typeof(string));
                ph_tbl.Columns.Add("todt", typeof(string));
                ph_tbl.Columns.Add("header", typeof(string));
                ph_tbl.Columns.Add("mcode", typeof(string));
                ph_tbl.Columns.Add("branchcd", typeof(string));
                ph_tbl.Columns.Add("type", typeof(string));
                ph_tbl.Columns.Add("vchnum", typeof(string));
                ph_tbl.Columns.Add("vchd", typeof(string));
                ph_tbl.Columns.Add("vchdate", typeof(string));
                ph_tbl.Columns.Add("vdd", typeof(string));
                ph_tbl.Columns.Add("month_", typeof(string));
                ph_tbl.Columns.Add("ACODE", typeof(string));
                ph_tbl.Columns.Add("addr1", typeof(string));
                ph_tbl.Columns.Add("addr2", typeof(string));
                ph_tbl.Columns.Add("addr3", typeof(string));
                ph_tbl.Columns.Add("ANAME", typeof(string));
                ph_tbl.Columns.Add("rcode", typeof(string));
                ph_tbl.Columns.Add("rNAME", typeof(string));
                ph_tbl.Columns.Add("iopqty", typeof(double));
                ph_tbl.Columns.Add("iqtyin", typeof(double));
                ph_tbl.Columns.Add("closing", typeof(double));
                ph_tbl.Columns.Add("cl_tot", typeof(double));
                ph_tbl.Columns.Add("iqtyout", typeof(double));
                ph_tbl.Columns.Add("desc_", typeof(string));
                ph_tbl.Columns.Add("mname", typeof(string));
                ph_tbl.Columns.Add("grp", typeof(string));
                header_n = "Accounts Ledger";
                xprdRange1 = "between to_Date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy')-1";
                cond = "";
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                cond = " and B.GRP IN ('" + mq0 + "')";
                SQuery = "SELECT A.*,B.ANAME,B.ADDR1,B.ADDR2,B.ADDR3,C.NAME AS MNAME,d.aname as rname,to_Char(A.vchd,'dd-Mon') as vchdate,to_Char(a.vchd,'yyyymmdd') as vdd,to_char(a.vchd,'MM') as month_  FROM (select substr(a.acode,1,2) as mcode,a.branchcd,a.type,a.vchnum,a.vchdate as vchd,a.acode ,sum(a.cdr) as iqtyin,sum(a.ccr) as iqtyout,a.desc_,rcode from  (select branchcd,type,vchnum,vchdate,trim(acode) as acode,rcode,(dramt)-(cramt) as op,0 as cdr,0 as ccr ,naration as desc_ FROM VOUCHER where branchcd='" + frm_mbr + "' and TYPE LIKE '%'  AND VCHDATE " + xprdRange1 + "  " + cond + " union all select branchcd,type,vchnum,vchdate,trim(acode) as acode,rcode,0 as op,(dramt) as cdr,(cramt) as ccr,naration as desc_ from VOUCHER where branchcd='" + frm_mbr + "' and TYPE LIKE '%' AND VCHDATE  " + xprdRange + " " + cond + " )  a where (a.cdr+a.ccr)>0 group by substr(a.acode,1,2),a.branchcd,a.type,a.vchnum,a.vchdate,a.acode,a.desc_,rcode ) A,FAMST B,TYPE C,famst d WHERE TRIM(A.ACODE)=TRIM(B.ACODE) AND trim(a.rcode)=trim(d.acode) and SUBSTR(TRIM(A.ACODE),1,2)=TRIM(C.TYPE1) AND C.ID='Z' ORDER BY B.ANAME,vdd ASC";
                SQuery = "SELECT A.*,B.ANAME,B.ADDR1,B.ADDR2,B.ADDR3,C.NAME AS MNAME,d.aname as rname,to_Char(A.vchd,'dd-Mon') as vchdate,to_Char(a.vchd,'yyyymmdd') as vdd,to_char(a.vchd,'MM') as month_  FROM (select A.GRP as mcode,a.branchcd,a.type,a.vchnum,a.vchdate as vchd,a.acode ,sum(a.cdr) as iqtyin,sum(a.ccr) as iqtyout,a.desc_,rcode from  (select a.branchcd,a.type,a.vchnum,a.vchdate,trim(a.acode) as acode,a.rcode,(a.dramt)-(a.cramt) as op,0 as cdr,0 as ccr ,a.naration as desc_,B.GRP FROM VOUCHER A,FAMST B where TRIM(A.ACODE)=TRIM(B.ACODE) AND A.branchcd='" + frm_mbr + "' and A.TYPE LIKE '%' AND A.VCHDATE " + xprdRange1 + "  " + cond + " union all select A.branchcd,A.type,A.vchnum,A.vchdate,trim(A.acode) as acode,A.rcode,0 as op,(A.dramt) as cdr,(A.cramt) as ccr,A.naration as desc_,B.GRP from VOUCHER A,FAMST B where TRIM(A.ACODE)=TRIM(b.ACODE) AND A.branchcd='" + frm_mbr + "' and A.TYPE LIKE '%' AND A.VCHDATE  " + xprdRange + " " + cond + " )  a where (a.cdr+a.ccr)>0 group by A.grp,a.branchcd,a.type,a.vchnum,a.vchdate,a.acode,a.desc_,rcode ) A,FAMST B,TYPE C,famst d WHERE TRIM(A.ACODE)=TRIM(B.ACODE) AND trim(a.rcode)=trim(d.acode) and A.mcode=TRIM(C.TYPE1) AND C.ID='Z' ORDER BY B.ANAME,vdd ASC";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                SQuery = "select trim(b.aname)||trim(A.ACODE) as grp,a.branchcd,trim(a.Acode) as Acode,b.aname,nvl(sum(a.opening),0) as IOPQTY,nvl(sum(a.cdr),0) as qtyin,nvl(sum(a.ccr),0) as qtyout,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as cl from (Select branchcd,Acode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from famstbal  where branchcd='" + frm_mbr + "' union all select branchcd,Acode,sum(dramt)-sum(cramt) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  GROUP BY ACODE,branchcd union all select branchcd,Acode,0 as op,sum(dramt) as cdr,sum(cramt) as ccr,0 as clos from VOUCHER where branchcd='" + frm_mbr + "' and type like '%'  and vchdate " + xprdRange + " GROUP BY ACODE,branchcd ) A,FAMST B WHERE TRIM(A.ACODE)=TRIM(B.ACODE) " + cond + " group by A.branchcd,trim(A.Acode),B.ANAME having (sum(opening)!=0 or sum(cdr)<>0 or sum(ccr)<>0) ORDER BY aname";//VOUCHER STOCK
                dt1 = new DataTable(); //stock dt
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                if (dt1.Rows.Count > 0)
                {
                    DataView view1im = new DataView(dt1); //VIEW OF MAIN DT
                    dt2 = new DataTable();
                    dt2 = view1im.ToTable(true, "branchcd", "aCODE", "aname", "iopqty", "cl", "grp");

                    foreach (DataRow dr0 in dt2.Rows) //view wali main dt
                    {
                        DataTable dticode = new DataTable();
                        if (dt.Rows.Count > 0)
                        {
                            DataView viewim = new DataView(dt, "aCODE='" + dr0["aCODE"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                            dticode = viewim.ToTable();
                        }
                        db1 = 0; db2 = 0; m = 0;
                        //if (Convert.ToDouble(dr0["iopqty"].ToString().Trim()) != 0 && Convert.ToDouble(dr0["CL"].ToString().Trim()) != 0)
                        //{
                        if (dticode.Rows.Count > 0)
                        {
                            for (int i = 0; i < dticode.Rows.Count; i++)
                            {
                                m = dticode.Rows.Count - 1;
                                #region
                                dr1 = ph_tbl.NewRow();
                                dr1["fromdt"] = fromdt;
                                dr1["todt"] = todt;
                                dr1["header"] = header_n;
                                dr1["mcode"] = dticode.Rows[i]["mcode"].ToString().Trim();
                                dr1["branchcd"] = dr0["branchcd"].ToString().Trim();
                                dr1["type"] = dticode.Rows[i]["type"].ToString().Trim();
                                dr1["vchnum"] = dticode.Rows[i]["vchnum"].ToString().Trim();
                                dr1["vchd"] = dticode.Rows[i]["vchd"].ToString().Trim();
                                dr1["iqtyin"] = dticode.Rows[i]["iqtyin"].ToString().Trim();
                                dr1["iqtyout"] = dticode.Rows[i]["iqtyout"].ToString().Trim();
                                if (i == 0)
                                {
                                    if (dt1.Rows.Count > 0)
                                    {
                                        db1 = fgen.make_double(dr0["IOPQTY"].ToString().Trim()); //opening
                                    }
                                    dr1["iopqty"] = db1;
                                    db2 = db1 + fgen.make_double(dr1["iqtyin"].ToString()) - fgen.make_double(dr1["iqtyout"].ToString());
                                }
                                else
                                {
                                    //dr1["iopqty"] = db2;
                                    db2 = db2 + fgen.make_double(dr1["iqtyin"].ToString()) - fgen.make_double(dr1["iqtyout"].ToString());
                                }
                                if (i != 0)
                                {
                                    dr1["iopqty"] = db1;
                                }
                                if (i == m)
                                {
                                    dr1["cl_tot"] = db2;
                                }

                                dr1["closing"] = db2;
                                dr1["acode"] = dr0["acode"].ToString().Trim();
                                dr1["ANAME"] = dr0["ANAME"].ToString().Trim();
                                dr1["grp"] = dr0["grp"].ToString().Trim();
                                dr1["rcode"] = dticode.Rows[i]["rcode"].ToString().Trim();
                                dr1["rNAME"] = dticode.Rows[i]["rname"].ToString().Trim();
                                dr1["addr1"] = dticode.Rows[i]["addr1"].ToString().Trim();
                                dr1["addr2"] = dticode.Rows[i]["addr2"].ToString().Trim();
                                dr1["addr3"] = dticode.Rows[i]["addr3"].ToString().Trim();
                                dr1["desc_"] = dticode.Rows[i]["desc_"].ToString().Trim();
                                dr1["mname"] = dticode.Rows[i]["mname"].ToString().Trim();
                                dr1["vchdate"] = dticode.Rows[i]["vchdate"].ToString().Trim();
                                dr1["vdd"] = dticode.Rows[i]["vdd"].ToString().Trim();
                                dr1["month_"] = dticode.Rows[i]["month_"].ToString().Trim();
                                ph_tbl.Rows.Add(dr1);
                                #endregion
                            }
                        }
                        else
                        {
                            dr1 = ph_tbl.NewRow();
                            dr1["fromdt"] = fromdt;
                            dr1["todt"] = todt;
                            dr1["iopqty"] = dr0["IOPQTY"].ToString().Trim(); //opening
                            dr1["closing"] = dr0["CL"].ToString().Trim(); //opening
                            dr1["acode"] = dr0["acode"].ToString().Trim();
                            dr1["ANAME"] = dr0["ANAME"].ToString().Trim();
                            dr1["grp"] = dr0["grp"].ToString().Trim();
                            ph_tbl.Rows.Add(dr1);
                        }
                        //}
                    }
                }
                dsRep = new DataSet();
                if (ph_tbl.Rows.Count > 0)
                {
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "acclgr", "acclgr", dsRep, header_n);      //AccLedger  is old format
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70272":
                header_n = "Net Sales Report";

                brcon = fgenMV.Fn_Get_Mvar(frm_qstr, "U_BRANCH_CD");
                if (brcon.Contains("88"))
                {
                    SQuery = " select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,SUBSTR(A.TYPE,1,1) AS TYPE,'Consolidated' as NAME,B.ANAME,SUM(A.CRAMT) AS CR ,SUM(A.DRAMT) AS DR , SUM(A.CRAMT)- SUM(A.DRAMT) as Net_amt FROM VOUCHER A, FAMST B , TYPE C  WHERE TRIM(A.ACODE)=TRIM(B.ACODE) AND TRIM(A.BRANCHCD)=TRIM(C.TYPE1) AND C.ID='B' AND a." + brcon + " AND B.GRP LIKE '20%' AND A.VCHDATE " + xprdRange + " GROUP BY SUBSTR(A.TYPE,1,1),B.ANAME order by TYPE,aname";
                    rep_titles = " (All Plant)";
                }
                else
                {
                    SQuery = " select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,SUBSTR(A.TYPE,1,1) AS TYPE,c.name as NAME,B.ANAME,SUM(A.CRAMT) AS CR ,SUM(A.DRAMT) AS DR , SUM(A.CRAMT)- SUM(A.DRAMT) as Net_amt FROM VOUCHER A, FAMST B , TYPE C  WHERE TRIM(A.ACODE)=TRIM(B.ACODE) AND TRIM(A.BRANCHCD)=TRIM(C.TYPE1) AND C.ID='B' AND a." + brcon + " AND B.GRP LIKE '20%' AND A.VCHDATE " + xprdRange + " GROUP BY SUBSTR(A.TYPE,1,1),B.ANAME,C.NAME order by TYPE,aname";
                    rep_titles = " (Current Plant)";
                }


                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Net_Sales_Report", "Net_Sales_Report", dsRep, header_n + rep_titles);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70274":

                header_n = "Net Purchase Report";
                brcon = fgenMV.Fn_Get_Mvar(frm_qstr, "U_BRANCH_CD");
                if (brcon.Contains("88"))
                {
                    SQuery = " select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,SUBSTR(A.TYPE,1,1) AS TYPE,'Consolidated' as NAME,B.ANAME,SUM(A.DRAMT) AS CR ,SUM(A.CRAMT) AS DR , SUM(A.DRAMT)- SUM(A.CRAMT) as Net_amt FROM VOUCHER A, FAMST B , TYPE C  WHERE TRIM(A.ACODE)=TRIM(B.ACODE) AND TRIM(A.BRANCHCD)=TRIM(C.TYPE1) AND C.ID='B' AND a." + brcon + " AND B.GRP LIKE '30%' AND A.VCHDATE " + xprdRange + " GROUP BY SUBSTR(A.TYPE,1,1),B.ANAME order by TYPE,aname";
                    rep_titles = " (All Plant)";
                }
                else
                {
                    SQuery = " select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,SUBSTR(A.TYPE,1,1) AS TYPE,c.name as NAME,B.ANAME,SUM(A.DRAMT) AS CR ,SUM(A.CRAMT) AS DR , SUM(A.DRAMT)- SUM(A.CRAMT) as Net_amt FROM VOUCHER A, FAMST B , TYPE C  WHERE TRIM(A.ACODE)=TRIM(B.ACODE) AND TRIM(A.BRANCHCD)=TRIM(C.TYPE1) AND C.ID='B' AND a." + brcon + " AND B.GRP LIKE '30%' AND A.VCHDATE " + xprdRange + " GROUP BY SUBSTR(A.TYPE,1,1),B.ANAME,C.NAME order by TYPE,aname";
                    rep_titles = " (Current Plant)";
                }


                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Net_Purchase_Report", "Net_Purchase_Report", dsRep, header_n + rep_titles);
                }
                else
                {
                    data_found = "N";
                }
                break;

            ////header_n = "Net Purchase Report";
            ////SQuery = " select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,SUBSTR(A.TYPE,1,1) AS TYPE,C.NAME,B.ANAME,SUM(A.dRAMT) AS CR ,SUM(A.CRAMT) AS DR ,SUM(A.dRAMT)- SUM(A.cRAMT) as Net_amt FROM VOUCHER A, FAMST B , TYPE C  WHERE TRIM(A.ACODE)=TRIM(B.ACODE) AND TRIM(A.BRANCHCD)=TRIM(C.TYPE1) AND A.BRANCHCD='" + frm_mbr + "' AND A.ACODE LIKE '30%' and c.id='B' AND A.VCHDATE " + xprdRange + " GROUP BY SUBSTR(A.TYPE,1,1),B.ANAME,C.NAME order by TYPE,aname";
            ////dt = new DataTable();
            ////dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
            ////if (dt.Rows.Count > 0)
            ////{
            ////    dt.TableName = "Prepcur";
            ////    dsRep.Tables.Add(dt);
            ////    Print_Report_BYDS(frm_cocd, frm_mbr, "Net_Purchase_Report", "Net_Purchase_Report", dsRep, header_n);
            ////}
            ////else
            ////{
            ////    data_found = "N";
            ////}
            ////break;

            case "F70299": // BY AKSHAY
                header_n = "Sales With Debit Credit Notes Summary";
                SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, a.branchcd,a.acode,B.ANAME,SUM(A.SALES) AS SALES,SUM(A.DEBIT_NOTE) AS DEBIT, SUM(A.CREDIT_NOTE) AS CREDIT ,((SUM(A.SALES)+SUM(A.DEBIT_NOTE))-SUM(A.CREDIT_NOTE)) AS TOTAL FROM (select branchcd,acode,dramt as sales, 0 as debit_note , 0 as credit_note from voucher where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and vchdate " + xprdRange + " and substr(rcode,1,2)='20' UNION ALL select branchcd,acode,0 as sales,dramt as debit_note , 0 as credit_note  from voucher where branchcd='" + frm_mbr + "' and type ='59' and vchdate " + xprdRange + " and substr(rcode,1,2)='20' UNION ALL select branchcd, acode, 0 as sales,0 as debit_note ,cramt as credit_note from voucher where branchcd='" + frm_mbr + "' and type ='58' and vchdate " + xprdRange + " and substr(rcode,1,2)='20') A , FAMST B WHERE TRIM(A.ACODE) =TRIM(B.ACODE) GROUP BY A.ACODE,B.ANAME,a.branchcd ORDER BY acode,ANAME";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Sales_Report_Summ", "Sales_Report_Summ", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70300": // BY AKSHAY
                header_n = "Sales With Debit Credit Notes Detailed";
                SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header, a.branchcd,A.acode,A.rcode,a.type,B.ANAME,A.vchnum,A.vchDATE, SUM(A.SALES) AS SALES,SUM(A.DEBIT_NOTE) AS DEBIT, SUM(A.CREDIT_NOTE) AS CREDIT ,((SUM(A.SALES)+SUM(A.DEBIT_NOTE))-SUM(A.CREDIT_NOTE)) AS TOTAL  FROM (select branchcd,acode,rcode,type,dramt as sales,vchnum ,to_char(vchdate,'dd/mm/yyyy') as vchdate, 0 as debit_note , 0 as credit_note from voucher where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and vchdate " + xprdRange + " and substr(rcode,1,2)='20'  UNION ALL select branchcd,acode,rcode,type, 0 as sales, vchnum ,to_char(vchdate,'dd/mm/yyyy')as vchdate, dramt as debit_note , 0 as credit_note  from voucher where branchcd='" + frm_mbr + "' and type ='59' and vchdate " + xprdRange + " and substr(rcode,1,2)='20' UNION ALL select branchcd,acode,rcode, type,0 as sales, vchnum , to_char(vchDATE,'dd/mm/yyyy') as vchdate,0 as debit_note , cramt as credit_note from voucher where branchcd='" + frm_mbr + "' and type ='58' and vchdate " + xprdRange + " and substr(rcode,1,2)='20') A , FAMST B WHERE TRIM(A.ACODE) =TRIM(B.ACODE)  GROUP BY a.branchcd,A.ACODE, A.RCODE,A.vchnum,A.vchDATE,B.ANAME,a.type ORDER BY ANAME,type ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Sales_Report_Detailed", "Sales_Report_Detailed", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            #region Outward / Sales GST Trend Reports
            case "F70301": // SALES TREND (HSN QTY WISE SUMMARY)
                //header_n = "Outward Supply Trend Qty Report(HS Code) Summary";
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Sales Trend (HSN Qty Wise) Summary (Excl. Type 47)";
                }
                else
                {
                    header_n = "Sales Trend (HSN Qty Wise) Summary (Post GST Period and Excl. Type 47)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then iqtyout else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select icode,(Case when to_char(VCHDATE,'mm')='04' then iqtyout else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then iqtyout else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then iqtyout  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then iqtyout else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then iqtyout else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then iqtyout else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then iqtyout else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then iqtyout else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then iqtyout  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then iqtyout  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then iqtyout  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then iqtyout  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE  " + DateRange + ") a,TYPEGRP b,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode ORDER BY d.hscode";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(" + col1 + ") as total," + col2 + " from (select icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE  " + DateRange + ") a,TYPEGRP b,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode ORDER BY d.hscode";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supply_trend_summary_hscode_wise", "outward_supply_trend_summary_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70302": // SALES TREND HSN VALUE WISE SUMMARY
                //header_n = "Outward Supply Trend Value Report(HS Code) Summary";
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Sales Trend (HSN Value Wise) Summary (Excl. Type 47)";
                }
                else
                {
                    header_n = "Sales Trend (HSN Value Wise) Summary (Post GST Period and Excl. Type 47)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IAMOUNT else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(" + col1 + ") as total," + col2 + " from (select icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE  " + DateRange + " ) a,TYPEGRP b,item d  where B.ID='T1'  AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode ORDER BY d.hscode";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supply_trend_summary_hscode_wise", "outward_supply_trend_summary_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70303":
                #region Sales Trend HSN Qty Wise Detailed
                header_n = "Outward Supply Trend Qty Report(HS Code) Party wise";
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Sales Trend (HSN Qty Wise) Detailed (Excl. Type 47)";
                }
                else
                {
                    header_n = "Sales Trend (HSN Qty Wise) Detailed (Post GST Period and Excl. Type 47)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IQTYOUT else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //if (mq0.Length == 2)
                //{
                //    SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IQTYOUT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IQTYOUT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IQTYOUT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IQTYOUT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IQTYOUT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IQTYOUT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IQTYOUT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IQTYOUT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IQTYOUT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IQTYOUT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IQTYOUT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IQTYOUT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and VCHDATE  " + DateRange + " ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND substr(TRIM(d.hscode),1,2)=TRIM(B.ACREF) and trim(a.icode)=trim(d.icode) AND substr(TRIM(d.hscode),1,2)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,c.gst_no,d.hscode ORDER BY A.ACODE";
                //}
                //if (mq0.Length == 4)
                //{
                //    SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IQTYOUT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IQTYOUT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IQTYOUT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IQTYOUT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IQTYOUT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IQTYOUT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IQTYOUT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IQTYOUT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IQTYOUT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IQTYOUT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IQTYOUT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IQTYOUT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and VCHDATE  " + DateRange + " ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND substr(TRIM(d.hscode),1,4)=TRIM(B.ACREF) and trim(a.icode)=trim(d.icode) AND substr(TRIM(d.hscode),1,4)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,c.gst_no,d.hscode ORDER BY A.ACODE";
                //}
                //if (mq0.Length == 6)
                //{
                //    SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IQTYOUT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IQTYOUT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IQTYOUT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IQTYOUT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IQTYOUT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IQTYOUT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IQTYOUT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IQTYOUT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IQTYOUT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IQTYOUT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IQTYOUT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IQTYOUT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and VCHDATE  " + DateRange + " ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND substr(TRIM(d.hscode),1,6)=TRIM(B.ACREF) and trim(a.icode)=trim(d.icode) AND substr(TRIM(d.hscode),1,6)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,c.gst_no,d.hscode ORDER BY A.ACODE";
                //}
                //if (mq0.Length == 8)
                //{
                //    SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IQTYOUT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IQTYOUT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IQTYOUT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IQTYOUT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IQTYOUT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IQTYOUT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IQTYOUT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IQTYOUT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IQTYOUT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IQTYOUT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IQTYOUT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IQTYOUT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and VCHDATE  " + DateRange + " ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND TRIM(d.hscode)=TRIM(B.ACREF) and trim(a.icode)=trim(d.icode) AND TRIM(d.hscode)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,c.gst_no,d.hscode ORDER BY A.ACODE";
                //}
                //CHANGED ON 15/06/2021-SUMAN-MONTHS DYNAMIC
                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IQTYOUT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IQTYOUT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IQTYOUT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IQTYOUT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IQTYOUT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IQTYOUT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IQTYOUT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IQTYOUT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IQTYOUT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IQTYOUT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IQTYOUT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IQTYOUT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE  " + DateRange + ") a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND TRIM(d.hscode)=TRIM(b.acref) and trim(a.icode)=trim(d.icode) AND TRIM(d.hscode)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,c.gst_no,d.hscode ORDER BY A.ACODE";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(" + col1 + ") as total," + col2 + " from (select ACODE,icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE  " + DateRange + ") a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND TRIM(d.hscode)=TRIM(b.acref) and trim(a.icode)=trim(d.icode) AND TRIM(d.hscode)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,c.gst_no,d.hscode ORDER BY A.ACODE";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supply_trend_details_hscode_wise", "outward_supply_trend_details_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70304":
                #region Sales Trend HSN Value Wise Detailed
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                // header_n = "Outward Supply Trend Value Report(HS Code) Party wise";
                mq1 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq1 == "Y")
                {
                    header_n = "Sales Trend (HSN Value Wise) Detailed (Excl. Type 47)";
                }
                else
                {
                    header_n = "Sales Trend (HSN Value Wise) Detailed (Post GST Period and Excl. Type 47)";
                }
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IAMOUNT else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //if (mq0.Length == 2)
                //{
                //    SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IAMOUNT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IAMOUNT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IAMOUNT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IAMOUNT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IAMOUNT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IAMOUNT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IAMOUNT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IAMOUNT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IAMOUNT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IAMOUNT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IAMOUNT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IAMOUNT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and VCHDATE  " + DateRange + " ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND substr(TRIM(d.hscode),1,2)=TRIM(B.ACREF) and trim(a.icode)=trim(d.icode) AND substr(TRIM(d.hscode),1,2)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,d.hscode ORDER BY A.ACODE";
                //}
                //if (mq0.Length == 4)
                //{
                //    SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IAMOUNT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IAMOUNT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IAMOUNT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IAMOUNT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IAMOUNT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IAMOUNT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IAMOUNT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IAMOUNT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IAMOUNT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IAMOUNT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IAMOUNT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IAMOUNT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and VCHDATE  " + DateRange + " ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND substr(TRIM(d.hscode),1,4)=TRIM(B.ACREF) and trim(a.icode)=trim(d.icode) AND substr(TRIM(d.hscode),1,4)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,d.hscode ORDER BY A.ACODE";
                //}
                //if (mq0.Length == 6)
                //{
                //    SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IAMOUNT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IAMOUNT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IAMOUNT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IAMOUNT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IAMOUNT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IAMOUNT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IAMOUNT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IAMOUNT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IAMOUNT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IAMOUNT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IAMOUNT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IAMOUNT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and VCHDATE  " + DateRange + " ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND substr(TRIM(d.hscode),1,6)=TRIM(B.ACREF) and trim(a.icode)=trim(d.icode) AND substr(TRIM(d.hscode),1,6)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,d.hscode ORDER BY A.ACODE";
                //}
                //if (mq0.Length == 8)
                //{
                //    SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IAMOUNT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IAMOUNT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IAMOUNT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IAMOUNT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IAMOUNT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IAMOUNT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IAMOUNT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IAMOUNT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IAMOUNT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IAMOUNT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IAMOUNT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IAMOUNT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and VCHDATE  " + DateRange + " ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND TRIM(d.hscode)=TRIM(B.ACREF) and trim(a.icode)=trim(d.icode) AND TRIM(d.hscode)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,d.hscode ORDER BY A.ACODE";
                //}
                //OLD QUERY
                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IAMOUNT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IAMOUNT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IAMOUNT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IAMOUNT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IAMOUNT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IAMOUNT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IAMOUNT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IAMOUNT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IAMOUNT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IAMOUNT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IAMOUNT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IAMOUNT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE  " + DateRange + ") a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND TRIM(d.hscode)=TRIM(b.acref) and trim(a.icode)=trim(d.icode) AND TRIM(d.hscode)='" + mq0 + "' group by A.ACODE,C.ANAME,c.gst_no,d.hscode,b.NAME ORDER BY A.ACODE";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(" + col1 + ") as total," + col2 + "  from (select ACODE,icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE  " + DateRange + ") a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND TRIM(d.hscode)=TRIM(b.acref) and trim(a.icode)=trim(d.icode) AND TRIM(d.hscode)='" + mq0 + "' group by A.ACODE,C.ANAME,c.gst_no,d.hscode,b.NAME ORDER BY A.ACODE";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supply_trend_details_hscode_wise", "outward_supply_trend_details_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70305": // Sales Trend HSN,Type Qty Wise Summary.......set no printer
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Sales Trend (HSN,Type Qty Wise) Summary (Excl. Type 47)";
                }
                else
                {
                    header_n = "Sales Trend (HSN,Type Qty Wise) Summary (Post GST Period and Excl. Type 47)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IQTYOUT else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,a.type,C.NAME AS TYPE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select type,icode,(Case when to_char(VCHDATE,'mm')='04' then iqtyout else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then iqtyout else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then iqtyout  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then iqtyout else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then iqtyout else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then iqtyout else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then iqtyout else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then iqtyout else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then iqtyout  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then iqtyout  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then iqtyout  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then iqtyout  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE " + DateRange + ") a,TYPEGRP b,type c,item d  where B.ID='T1' and c.id='M' AND TRIM(A.TYPE)=TRIM(C.TYPE1) AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,a.type,C.NAME ORDER BY a.type";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,a.type,C.NAME AS TYPE_NAME,sum(" + col1 + ") as total," + col2 + " from (select type,icode," + col3 + " from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE " + DateRange + ") a,TYPEGRP b,type c,item d  where B.ID='T1' and c.id='M' AND TRIM(A.TYPE)=TRIM(C.TYPE1) AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,a.type,C.NAME ORDER BY a.type";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));
                dt.TableName = "Prepcur";
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supp_trndQty_type_wise__wise", "outward_supp_trndQty_type_wise__wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70306": // Sales Trend HSN,Type Values Wise Summary
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Sales Trend (HSN,Type Value Wise) Summary (Excl. Type 47)";
                }
                else
                {
                    header_n = "Sales Trend (HSN,Type Value Wise) Summary (Post GST Period and Excl. Type 47)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IAMOUNT else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,a.type,C.NAME AS TYPE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select type,icode,(Case when to_char(VCHDATE,'mm')='04' then IAMOUNT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IAMOUNT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IAMOUNT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IAMOUNT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IAMOUNT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IAMOUNT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IAMOUNT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IAMOUNT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IAMOUNT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IAMOUNT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IAMOUNT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IAMOUNT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE " + DateRange + ") a,TYPEGRP b,type c,item d  where B.ID='T1' and c.id='M' AND TRIM(A.TYPE)=TRIM(C.TYPE1) AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,a.type,C.NAME ORDER BY a.type";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,a.type,C.NAME AS TYPE_NAME,sum(" + col1 + ") as total," + col2 + "  from (select type,icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE " + DateRange + ") a,TYPEGRP b,type c,item d  where B.ID='T1' and c.id='M' AND TRIM(A.TYPE)=TRIM(C.TYPE1) AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,a.type,C.NAME ORDER BY a.type";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supp_trndQty_type_wise__wise", "outward_supp_trndQty_type_wise__wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70307": // Sales Trend HSN,Party Qty Wise Summary.....set no printer
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Sales Trend (HSN,Party Qty Wise) Summary (Excl. Type 47)";
                }
                else
                {
                    header_n = "Sales Trend (HSN,Party Qty Wise) Summary (Post GST Period and Excl. Type 47)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then iqtyout else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,A.ICODE,D.INAME,d.unit,b.NAME AS HSCODE_NAME,A.ACODE,C.ANAME AS PARTY_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from  (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then iqtyout else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then iqtyout else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then iqtyout  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then iqtyout else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then iqtyout else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then iqtyout else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then iqtyout else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then iqtyout else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then iqtyout  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then iqtyout  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then iqtyout  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then iqtyout  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE  " + DateRange + ") a,TYPEGRP b,FAMST c,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and TRIM(A.ACODE)=TRIM(C.ACODE) AND  trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,A.ICODE,D.INAME,d.unit,a.ACODE,C.ANAME ORDER BY a.ACODE";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,A.ICODE,D.INAME,d.unit,b.NAME AS HSCODE_NAME,A.ACODE,C.ANAME AS PARTY_NAME,sum(" + col1 + ") as total," + col2 + "  from  (select ACODE,icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE  " + DateRange + ") a,TYPEGRP b,FAMST c,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and TRIM(A.ACODE)=TRIM(C.ACODE) AND  trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,A.ICODE,D.INAME,d.unit,a.ACODE,C.ANAME ORDER BY a.ACODE";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outInw_Supp_party_item_hscode_wise", "outInw_Supp_party_item_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70308": // Sales Trend HSN,Party Value Wise Summary
                //header_n = "Outward Supply Trend Value Report(HS Code),Party/Item Wise Summary";
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Sales Trend (HSN,Party Value Wise) Summary (Excl. Type 47)";
                }
                else
                {
                    header_n = "Sales Trend (HSN,Party Value Wise) Summary (Post GST Period and Excl. Type 47)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IAMOUNT else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,A.ICODE,D.INAME,d.unit,b.NAME AS HSCODE_NAME,A.ACODE,C.ANAME AS PARTY_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from  (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then iamount else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then iamount else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then iamount  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then iamount else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then iamount else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then iamount else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then iamount else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then iamount else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then iamount  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then iamount  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then iamount  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then iamount  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE  " + DateRange + ") a,TYPEGRP b,FAMST c,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and TRIM(A.ACODE)=TRIM(C.ACODE) AND  trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,A.ICODE,D.INAME,d.unit,a.ACODE,C.ANAME ORDER BY a.ACODE";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,A.ICODE,D.INAME,d.unit,b.NAME AS HSCODE_NAME,A.ACODE,C.ANAME AS PARTY_NAME,sum(" + col1 + ") as total," + col2 + " from  (select ACODE,icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '4%' and type!='47' and VCHDATE  " + DateRange + ") a,TYPEGRP b,FAMST c,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and TRIM(A.ACODE)=TRIM(C.ACODE) AND  trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,A.ICODE,D.INAME,d.unit,a.ACODE,C.ANAME ORDER BY a.ACODE";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outInw_Supp_party_item_hscode_wise", "outInw_Supp_party_item_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;
            #endregion

            #region Inward GST Trend Reports
            case "F70309": // Purchase Trend HSN Qty Wise Summary
                //header_n = "Inward Supply Trend Qty Report(HS Code) Summary";
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Purchase Trend (HSN Qty Wise) Summary (Excl. Type 04)";
                }
                else
                {
                    header_n = "Purchase Trend (HSN Qty Wise) Summary (Post GST Period and Excl. Type 04)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IQTYIN else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select icode,(Case when to_char(VCHDATE,'mm')='04' then IQTYIN else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IQTYIN else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IQTYIN  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IQTYIN else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IQTYIN else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IQTYIN else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IQTYIN else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IQTYIN else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IQTYIN  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IQTYIN  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IQTYIN  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IQTYIN  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE " + DateRange + " and substr(trim(acode),1,2)!='16' ) a,TYPEGRP b,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode ORDER BY d.hscode";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(" + col1 + ") as total," + col2 + "  from (select icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE " + DateRange + " and substr(trim(acode),1,2)!='16' ) a,TYPEGRP b,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode ORDER BY d.hscode";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supply_trend_summary_hscode_wise", "outward_supply_trend_summary_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70310": // Purchase Trend HSN Value Wise Summary
                header_n = "Inward Supply Trend Value Report(HS Code) Summary";
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Purchase Trend (HSN Value Wise) Detailed (Excl. Type 04)";
                }
                else
                {
                    header_n = "Purchase Trend (HSN Value Wise) Summary (Post GST Period and Excl. Type 04)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IAMOUNT else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select icode,(Case when to_char(VCHDATE,'mm')='04' then IAMOUNT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IAMOUNT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IAMOUNT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IAMOUNT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IAMOUNT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IAMOUNT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IAMOUNT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IAMOUNT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IAMOUNT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IAMOUNT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IAMOUNT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IAMOUNT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE  " + DateRange + " and substr(trim(acode),1,2)!='16') a,TYPEGRP b,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))='" + mq0 + "' group by B.NAME,d.hscode ORDER BY d.hscode";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(" + col1 + ") as total," + col2 + "  from (select icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE  " + DateRange + " and substr(trim(acode),1,2)!='16') a,TYPEGRP b,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))='" + mq0 + "' group by B.NAME,d.hscode ORDER BY d.hscode";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supply_trend_summary_hscode_wise", "outward_supply_trend_summary_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70311": // Purchase Trend HSN Qty Wise Detailed
                #region Inward Supply Trend Qty Report(Hscode) Party wise Details
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Purchase Trend HSN Qty Wise Detailed (Excl. Type 04)";
                }
                else
                {
                    header_n = "Purchase Trend HSN Qty Wise Detailed (Post GST Period and Excl. Type 04)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IQTYIN else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,d.unit,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IQTYIN else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IQTYIN else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IQTYIN  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IQTYIN else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IQTYIN else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IQTYIN else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IQTYIN else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IQTYIN else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IQTYIN  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IQTYIN  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IQTYIN  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IQTYIN  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE  " + DateRange + " and substr(trim(acode),1,2)!='16' ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND TRIM(d.hscode)=TRIM(b.acref) and trim(a.icode)=trim(d.icode) AND TRIM(d.hscode)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,d.hscode,d.unit,c.gst_no ORDER BY A.ACODE";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,d.unit,b.NAME AS HSCODE_NAME,sum(" + col1 + ") as total," + col2 + "  from (select ACODE,icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE  " + DateRange + " and substr(trim(acode),1,2)!='16' ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND TRIM(d.hscode)=TRIM(b.acref) and trim(a.icode)=trim(d.icode) AND TRIM(d.hscode)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,d.hscode,d.unit,c.gst_no ORDER BY A.ACODE";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supply_trend_details_hscode_wise", "outward_supply_trend_details_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70312": // Purchase Trend HSN Value Wise Detailed doubt
                #region  Inward Supply Trend Value Report(HS Code) Party wise
                // header_n = "Inward Supply Trend Value Report(HS Code) Party wise";
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Purchase Trend (HSN Value Wise) Detailed (Excl. Type 04)";
                }
                else
                {
                    header_n = "Purchase Trend (HSN Value Wise) Detailed (Post GST Period and Excl. Type 04)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IAMOUNT else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IAMOUNT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IAMOUNT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IAMOUNT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IAMOUNT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IAMOUNT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IAMOUNT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IAMOUNT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IAMOUNT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IAMOUNT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IAMOUNT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IAMOUNT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IAMOUNT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE  " + DateRange + " and substr(trim(acode),1,2)!='16' ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND TRIM(d.hscode)=TRIM(B.ACREF) and trim(a.icode)=trim(d.icode) AND TRIM(d.hscode)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,d.hscode,c.gst_no ORDER BY A.ACODE";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, A.ACODE,C.ANAME,c.gst_no,d.hscode as HSCODE,b.NAME AS HSCODE_NAME,sum(" + col1 + ") as total," + col2 + "  from (select ACODE,icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE  " + DateRange + " and substr(trim(acode),1,2)!='16' ) a,TYPEGRP b,FAMST C,item d  where B.ID='T1'  AND TRIM(A.ACODE)=TRIM(C.ACODE) AND TRIM(d.hscode)=TRIM(B.ACREF) and trim(a.icode)=trim(d.icode) AND TRIM(d.hscode)='" + mq0 + "' group by B.NAME,A.ACODE,C.ANAME,d.hscode,c.gst_no ORDER BY A.ACODE";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supply_trend_details_hscode_wise", "outward_supply_trend_details_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70313": // Purchase Trend HSN,Type Qty Wise Summary
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Purchase Trend (HSN,Type Qty Wise) Summary (Excl. Type 04)";
                }
                else
                {
                    header_n = "Purchase Trend (HSN,Type Qty Wise) Summary (Post GST Period and Excl. Type 04)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IQTYIN else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,a.type,C.NAME AS TYPE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select type,icode,(Case when to_char(VCHDATE,'mm')='04' then IQTYIN else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IQTYIN else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IQTYIN  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IQTYIN else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IQTYIN else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IQTYIN else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IQTYIN else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IQTYIN else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IQTYIN  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IQTYIN  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IQTYIN  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IQTYIN  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE " + DateRange + "  and substr(trim(acode),1,2)!='16') a,TYPEGRP b,type c,item d  where B.ID='T1' and c.id='M' AND TRIM(A.TYPE)=TRIM(C.TYPE1) AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))='" + mq0 + "' group by B.NAME,d.hscode,a.type,C.NAME ORDER BY a.type";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,a.type,C.NAME AS TYPE_NAME,sum(" + col1 + ") as total," + col2 + "  from (select type,icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE " + DateRange + "  and substr(trim(acode),1,2)!='16') a,TYPEGRP b,type c,item d  where B.ID='T1' and c.id='M' AND TRIM(A.TYPE)=TRIM(C.TYPE1) AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))='" + mq0 + "' group by B.NAME,d.hscode,a.type,C.NAME ORDER BY a.type";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supp_trndQty_type_wise__wise", "outward_supp_trndQty_type_wise__wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70314": // Purchase Trend HSN,Type Value Wise Summary
                // header_n = "Inward Supply Trend Value Report(HS Code),Type Wise Summary";
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Purchase Trend (HSN,Type Value Wise) Summary (Excl. Type 04)";
                }
                else
                {
                    header_n = "Purchase Trend (HSN,Type Value Wise) Summary (Post GST Period and Excl. Type 04)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");

                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IAMOUNT else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,a.type,C.NAME AS TYPE_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from (select type,icode,(Case when to_char(VCHDATE,'mm')='04' then IAMOUNT else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IAMOUNT else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IAMOUNT  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IAMOUNT else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IAMOUNT else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IAMOUNT else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IAMOUNT else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IAMOUNT else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IAMOUNT  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IAMOUNT  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IAMOUNT  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IAMOUNT  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE " + DateRange + " and  substr(trim(acode),1,2)!='16') a,TYPEGRP b,type c,item d  where B.ID='T1' and c.id='M' AND TRIM(A.TYPE)=TRIM(C.TYPE1)  AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,a.type,C.NAME ORDER BY a.type";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,b.NAME AS HSCODE_NAME,a.type,C.NAME AS TYPE_NAME,sum(" + col1 + ") as total," + col2 + "  from (select type,icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE " + DateRange + " and  substr(trim(acode),1,2)!='16') a,TYPEGRP b,type c,item d  where B.ID='T1' and c.id='M' AND TRIM(A.TYPE)=TRIM(C.TYPE1)  AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,a.type,C.NAME ORDER BY a.type";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outward_supp_trndQty_type_wise__wise", "outward_supp_trndQty_type_wise__wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70315": // Purchase Trend HSN,Party Qty Wise Summary
                //  header_n = "Inward Supply Trend Qty Report(HS Code),Party/Item Wise Summary";
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Purchase Trend (HSN,Party Qty Wise) Summary (Excl. Type 04)";
                }
                else
                {
                    header_n = "Purchase Trend (HSN,Party Qty Wise) Summary (Post GST Period and Excl. Type 04)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IQTYIN else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,A.ICODE,D.INAME,d.unit,b.NAME AS HSCODE_NAME,A.ACODE,C.ANAME AS PARTY_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from  (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then IQTYIN else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then IQTYIN else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then IQTYIN  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then IQTYIN else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then IQTYIN else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then IQTYIN else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then IQTYIN else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then IQTYIN else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then IQTYIN  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then IQTYIN  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then IQTYIN  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then IQTYIN  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE  " + DateRange + " AND SUBSTR(TRIM(ACODE),1,2)!='16' ) a,TYPEGRP b,FAMST c,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and TRIM(A.ACODE)=TRIM(C.ACODE) AND  trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,A.ICODE,D.INAME,d.unit,a.ACODE,C.ANAME ORDER BY a.ACODE";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,A.ICODE,D.INAME,d.unit,b.NAME AS HSCODE_NAME,A.ACODE,C.ANAME AS PARTY_NAME,sum(" + col1 + ") as total," + col2 + "  from  (select ACODE,icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE  " + DateRange + " AND SUBSTR(TRIM(ACODE),1,2)!='16' ) a,TYPEGRP b,FAMST c,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and TRIM(A.ACODE)=TRIM(C.ACODE) AND  trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,A.ICODE,D.INAME,d.unit,a.ACODE,C.ANAME ORDER BY a.ACODE";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outInw_Supp_party_item_hscode_wise", "outInw_Supp_party_item_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70316": // Purchase Trend HSN,Party Value Wise Summary
                //  header_n = "Inward Supply Trend Value Report(HS Code),Party/Item Wise Summary";
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select trim(upper(OPT_ENABLE)) as fstr from FIN_RSYS_OPT_PW where branchcd='" + frm_mbr + "' and OPT_ID='W2027'", "fstr");
                if (mq0 == "Y")
                {
                    header_n = "Purchase Trend (HSN,Party Value Wise) Summary (Excl. Type 04)";
                }
                else
                {
                    header_n = "Purchase Trend (HSN,Party Value Wise) Summary (Post GST Period and Excl. Type 04)";
                }
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                DateRange = fgenMV.Fn_Get_Mvar(frm_qstr, "U_DATERANGE");
                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col3 = col3 + ", (Case when to_char(VCHDATE,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then IAMOUNT else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }

                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                col2 = "sum(a." + h1 + ") as " + h1 + ",sum(a." + h2 + ") as " + h2 + ",sum(a." + h3 + ") as " + h3 + ",sum(a." + h4 + ") as " + h4 + ",sum(a." + h5 + ") as " + h5 + ",sum(a." + h6 + ") as " + h6 + ",sum(a." + h7 + ") as " + h7 + " ,sum(a." + h8 + ") as " + h8 + ",sum(a." + h9 + ") as " + h9 + ",sum(a." + h10 + ") as " + h10 + ",sum(a." + h11 + ") as " + h11 + ",sum(a." + h12 + ") as " + h12 + "";

                //SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,A.ICODE,D.INAME,d.unit,b.NAME AS HSCODE_NAME,A.ACODE,C.ANAME AS PARTY_NAME,sum(a.apr+a.may+a.jun+a.jul+a.aug+a.sep+a.oct+a.nov+a.dec+a.jan+a.feb+a.mar) as total,sum(a.apr) as apr,sum(a.may) as may,sum(a.jun) as jun,sum(a.jul) as jul,sum(a.aug) as aug,sum(a.sep) as sep,sum(a.oct) as oct,sum(a.nov) as nov,sum(a.dec) as dec,sum(a.jan) as jan,sum(a.feb) as feb,sum(a.mar) as mar  from  (select ACODE,icode,(Case when to_char(VCHDATE,'mm')='04' then iamount else 0 end) as Apr,(Case when to_char(VCHDATE,'mm')='05' then iamount else 0 end) as may,(Case when to_char(VCHDATE,'mm')='06' then iamount  else 0 end) as jun,(Case when to_char(VCHDATE,'mm')='07' then iamount else 0 end) as jul,(Case when to_char(VCHDATE,'mm')='08' then iamount else 0 end) as aug,(Case when to_char(VCHDATE,'mm')='09' then iamount else 0 end) as sep,(Case when to_char(VCHDATE,'mm')='10' then iamount else 0 end) as oct,(Case when to_char(VCHDATE,'mm')='11' then iamount else 0 end) as nov,(Case when to_char(VCHDATE,'mm')='12' then iamount  else 0 end) as dec,(Case when to_char(VCHDATE,'mm')='01' then iamount  else 0 end) as jan,(Case when to_char(VCHDATE,'mm')='02' then iamount  else 0 end) as feb,(Case when to_char(VCHDATE,'mm')='03' then iamount  else 0 end) as mar  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE  " + DateRange + " AND SUBSTR(TRIM(ACODE),1,2)!='16' ) a,TYPEGRP b,FAMST c,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and TRIM(A.ACODE)=TRIM(C.ACODE) AND  trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,A.ICODE,D.INAME,d.unit,a.ACODE,C.ANAME ORDER BY a.ACODE";
                SQuery = "SELECT '" + header_n + "' as header,'" + frm_cDt1 + "' AS FROMDT,'" + frm_cDt2 + "' AS TODT, d.hscode as HSCODE,A.ICODE,D.INAME,d.unit,b.NAME AS HSCODE_NAME,A.ACODE,C.ANAME AS PARTY_NAME,sum(" + col1 + ") as total," + col2 + " from  (select ACODE,icode," + col3 + "  from IVOUCHER where branchcd='" + frm_mbr + "' and type like '0%' and type!='04' and VCHDATE  " + DateRange + " AND SUBSTR(TRIM(ACODE),1,2)!='16' ) a,TYPEGRP b,FAMST c,item d  where B.ID='T1' AND replace(TRIM(d.hscode),'.','')=replace(TRIM(b.acref),'.','') and TRIM(A.ACODE)=TRIM(C.ACODE) AND  trim(a.icode)=trim(d.icode) AND LENGTH(replace(TRIM(d.hscode),'.',''))=" + mq0 + " group by B.NAME,d.hscode,A.ICODE,D.INAME,d.unit,a.ACODE,C.ANAME ORDER BY a.ACODE";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep = new DataSet();
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "outInw_Supp_party_item_hscode_wise", "outInw_Supp_party_item_hscode_wise", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;
            #endregion

            case "F70404":
            case "F70406":    //BRANCHCD CHANGS DONE IN CODE                        
                #region depreciation Report
                header_n = "Depreciation Chart";
                ph_tbl = new DataTable();
                mq12 = "";
                mq12 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                ph_tbl.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("todt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("header", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("ASSET_DEP", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("instdt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grpcode", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("MBR", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("ASSET_CODE", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("ASSET_Name", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("USEFUL_LIFE", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("TOTAL_COST_BF", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("dep_Cal_prday", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("dep_pday", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("CURR_ADD", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("SALE", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("TOTAL_COST", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("DEP_BF", typeof(double)));//op bal in this
                ph_tbl.Columns.Add(new DataColumn("CURR_DEP", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("DEELETION", typeof(double)));//del during yr
                ph_tbl.Columns.Add(new DataColumn("TOT_DEP", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("WDV_CURR_YR", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("WDV_PREV_YR", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("day_percent", typeof(double)));

                param = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT opt_param AS params FROM fin_rsys_opt WHERE opt_ID='W1076'", "params");
                //DateTime sdate = (fgen.make_def_Date(param)).ToString("");
                dt = new DataTable(); dt1 = new DataTable(); dt2 = new DataTable(); dt3 = new DataTable(); dt4 = new DataTable(); dt5 = new DataTable(); dt6 = new DataTable(); dt7 = new DataTable(); dt8 = new DataTable(); dt9 = new DataTable();

                mq0 = ""; mq1 = ""; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = "";
                mq0 = "select vchnum as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(instdt,'dd/mm/yyyy') as instdt,type, grpcode,grp,acode,assetid,assetname,basiccost,op_dep ,life as totlife,deprpday,original_cost from wb_fa_pur  where branchcd in ('" + frm_mbr + "') and type='10' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy') order by acode";//real
                mq0 = "select branchcd||acode as fstr,branchcd, vchnum as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(instdt,'dd/mm/yyyy') as instdt,type, grpcode,grp,acode,assetid,assetname,basiccost,op_dep ,life as totlife,deprpday,original_cost from wb_fa_pur  where " + branch_Cd + " and type='10' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy') order by fstr";
                mq0 = "select branchcd||acode as fstr,branchcd, vchnum as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(instdt,'dd/mm/yyyy') as instdt,type, grpcode,grp,acode,assetid,assetname,basiccost,op_dep ,life as totlife,deprpday,original_cost,(case when life!=0 then round(100/life,2) else 0 end) as day_percent from wb_fa_pur  where " + branch_Cd + " and type='10' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy') order by fstr"; //add depr percent in query for hppi/sppi ....18.12.2019
                // //
                //mq0="select a.vchnum as pur_entry,to_char(a.vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(a.instdt,'dd/mm/yyyy') as instdt,a.type,a.grpcode,a.grp,a.acode,a.assetid,a.assetname,a.basiccost,a.op_dep ,a.life as totlife,a.deprpday,a.original_cost from wb_fa_pur a, (select branchcd,acode,sum(pur) from (select a.branchcd,a.acode,1 as pur from wb_fa_pur a where a.branchcd='" + frm_mbr + "' and a.type='10' and a.instdt <= to_date('" + param + "','dd/mm/yyyy') union all select a.branchcd,a.acode,-1 as pur from wb_fa_vch a where a.branchcd='" + frm_mbr + "' and a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') >= to_date('" + param + "','dd/mm/yyyy') and to_date(a.sale_dt,'dd/mm/yyyy') <= to_date('"+todt+"','dd/mm/yyyy')) group by branchcd,acode having sum(pur)>0) b where a.branchcd||trim(A.acode)=b.branchcd||trim(B.acode)";   
                //mq0 = "select a.vchnum as pur_entry,to_char(a.vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(a.instdt,'dd/mm/yyyy') as instdt,a.type,a.grpcode,a.grp,a.acode,a.assetid,a.assetname,a.basiccost,a.op_dep ,a.life as totlife,a.deprpday,a.original_cost from wb_fa_pur a, (select branchcd,acode,sum(pur) from (select a.branchcd,a.acode,1 as pur from wb_fa_pur a where a.branchcd='" + frm_mbr + "' and a.type='10' and a.instdt <= to_date('" + param + "','dd/mm/yyyy') union all select a.branchcd,a.acode,-1 as pur from wb_fa_vch a where a.branchcd='" + frm_mbr + "' and a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') >= to_date('" + param + "','dd/mm/yyyy') and to_date(a.sale_dt,'dd/mm/yyyy') <= to_date('"+todt+"','dd/mm/yyyy')) group by branchcd,acode having sum(pur)>0) b where a.branchcd||trim(A.acode)=b.branchcd||trim(B.acode)";
                dt = fgen.getdata(frm_qstr, frm_cocd, mq0); //this is main dt and all asset is purchased in this table

                //  mq1 = "select a.vchnum as pur_entry,to_char(a.vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(a.instdt,'dd/mm/yyyy') as instdt,a.type,a.grpcode,a.grp,a.acode,a.assetid,a.assetname,a.basiccost,a.op_dep ,a.life as totlife,a.deprpday,a.original_cost from wb_fa_pur a, (select branchcd,acode,sum(pur) from (select a.branchcd,a.acode,1 as pur from wb_fa_pur a where a.branchcd='" + frm_mbr + "' and a.type='10' and a.instdt< to_date('" + fromdt + "','dd/mm/yyyy') union all select a.branchcd,a.acode,-1 as pur from wb_fa_vch a where a.branchcd='" + frm_mbr + "' and a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') <= to_date('" + fromdt + "','dd/mm/yyyy') and to_date(a.sale_dt,'dd/mm/yyyy') >= to_date('" + todt + "','dd/mm/yyyy')) group by branchcd,acode having sum(pur)>0) b where a.branchcd||trim(A.acode)=b.branchcd||trim(B.acode)";
                mq1 = "select a.vchnum as pur_entry,to_char(a.vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(a.instdt,'dd/mm/yyyy') as instdt,a.type,a.grpcode,a.grp,a.acode,a.assetid,a.assetname,a.basiccost,a.op_dep ,a.life as totlife,a.deprpday,a.original_cost,b.sale from wb_fa_pur a, (select branchcd,trim(acode) as acode,sum(pur) as pur,sum(dramt)-sum(cramt) as sale from(select branchcd,acode,sum(pur) as pur,0 as dramt,0 as cramt from (select a.branchcd,a.acode,1 as pur from wb_fa_pur a where a.branchcd='" + frm_mbr + "' and a.type='10' and a.instdt< to_date('" + fromdt + "','dd/mm/yyyy') union all select a.branchcd,a.acode,-1 as pur from wb_fa_vch a where a.branchcd='" + frm_mbr + "' and a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') <= to_date('" + fromdt + "','dd/mm/yyyy') and to_date(a.sale_dt,'dd/mm/yyyy') >= to_date('" + todt + "','dd/mm/yyyy')) group by branchcd,acode having sum(pur)>0 union all select a.branchcd,a.acode,0 as pur,dramt,cramt from wb_fa_vch a where a.branchcd='" + frm_mbr + "' and a.type='50' and a.instdt < to_date('" + fromdt + "','dd/mm/yyyy')) group by branchcd,trim(acode)) b where a.branchcd||trim(A.acode)=b.branchcd||trim(B.acode)"; //real
                mq1 = "select a.branchcd||a.acode as fstr,a.vchnum as pur_entry,to_char(a.vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(a.instdt,'dd/mm/yyyy') as instdt,a.type,a.grpcode,a.grp,a.acode,a.assetid,a.assetname,a.basiccost,a.op_dep ,a.life as totlife,a.deprpday,a.original_cost,b.sale from wb_fa_pur a, (select branchcd,trim(acode) as acode,sum(pur) as pur,sum(dramt)-sum(cramt) as sale from(select branchcd,acode,sum(pur) as pur,0 as dramt,0 as cramt from (select a.branchcd,a.acode,1 as pur from wb_fa_pur a where a." + branch_Cd + " and a.type='10' and a.instdt< to_date('" + fromdt + "','dd/mm/yyyy') union all select a.branchcd,a.acode,-1 as pur from wb_fa_vch a where a." + branch_Cd + " and a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') <= to_date('" + fromdt + "','dd/mm/yyyy') and to_date(a.sale_dt,'dd/mm/yyyy') >= to_date('" + todt + "','dd/mm/yyyy')) group by branchcd,acode having sum(pur)>0 union all select a.branchcd,a.acode,0 as pur,dramt,cramt from wb_fa_vch a where a." + branch_Cd + " and a.type='50' and a.instdt < to_date('" + fromdt + "','dd/mm/yyyy')) group by branchcd,trim(acode)) b where a.branchcd||trim(A.acode)=b.branchcd||trim(B.acode) order by fstr";

                dt1 = fgen.getdata(frm_qstr, frm_cocd, mq1); //is dt se total cost bf ki value.....instdt>fromdt....logic for this

                // mq2 = "select ACODE,original_cost,to_char(instdt,'dd/mm/yyyy') as instdt  from wb_fa_pur where branchcd='" + frm_mbr + "' and type='10' and instdt>=to_DatE('" + fromdt + "','dd/mm/yyyy') and instdt<=to_DatE('" + todt + "','dd/mm/yyyy') order by acode";
                // mq2 = "select fstr as acode, sum(original_cost), instdt from (select trim(branchcd)||trim(ACODE) as fstr,original_cost,to_char(instdt,'dd/mm/yyyy') as instdt  from wb_fa_pur where branchcd='" + frm_mbr + "' and type='10' and instdt>=to_DatE('" + fromdt + "','dd/mm/yyyy') and instdt<=to_DatE('" + todt + "','dd/mm/yyyy') union all select trim(branchcd)||trim(ACODE) as fstr,sum(dramt-cramt),to_char(fvchdate,'dd/mm/yyyy') as instdt  from wb_fa_vch where branchcd='" + frm_mbr + "' and type='50' and instdt>=to_DatE('" + fromdt + "','dd/mm/yyyy') and instdt<=to_DatE('" + todt + "','dd/mm/yyyy') group by trim(branchcd)||trim(ACODE),to_char(fvchdate,'dd/mm/yyyy') ) group by fstr, instdt order by acode";
                mq2 = "select fstr as fstr,trim(acode) as acode, sum(original_cost) as original_cost, instdt from (select trim(branchcd)||trim(ACODE) as fstr,original_cost,to_char(instdt,'dd/mm/yyyy') as instdt,acode from wb_fa_pur where branchcd='" + frm_mbr + "' and type='10' and instdt>=to_DatE('" + fromdt + "','dd/mm/yyyy') and instdt<=to_DatE('" + todt + "','dd/mm/yyyy') union all select trim(branchcd)||trim(ACODE) as fstr,sum(dramt-cramt),to_char(fvchdate,'dd/mm/yyyy') as instdt,acode from wb_fa_vch where branchcd='" + frm_mbr + "' and type='50' and instdt " + xprdRange + " group by trim(branchcd)||trim(ACODE),to_char(fvchdate,'dd/mm/yyyy'),acode) group by fstr, instdt,trim(acode) order by acode"; //real
                mq2 = "select fstr as fstr,trim(acode) as acode, sum(original_cost) as original_cost, instdt from (select trim(branchcd)||trim(ACODE) as fstr,original_cost,to_char(instdt,'dd/mm/yyyy') as instdt,acode from wb_fa_pur where " + branch_Cd + " and type='10' and instdt>=to_DatE('" + fromdt + "','dd/mm/yyyy') and instdt<=to_DatE('" + todt + "','dd/mm/yyyy') union all select trim(branchcd)||trim(ACODE) as fstr,sum(dramt-cramt),to_char(fvchdate,'dd/mm/yyyy') as instdt,acode from wb_fa_vch where " + branch_Cd + " and type='50' and instdt " + xprdRange + " group by trim(branchcd)||trim(ACODE),to_char(fvchdate,'dd/mm/yyyy'),acode) group by fstr, instdt,trim(acode) order by fstr";
                dt5 = fgen.getdata(frm_qstr, frm_cocd, mq2); //between current addition ki dt..if instdt>fromdt and instdt<todt...logic for this...

                mq3 = "SELECT acode,sum(dramt) as sale,sum(cramt) as del_during_yr FROM WB_FA_VCH  WHERE BRANCHCD='" + frm_mbr + "' AND TYPE='20' AND to_date(sale_dt,'dd/mm/yyyy') " + xprdRange + " group by acode order by acode";//real
                mq3 = "SELECT trim(branchcd)||trim(acode) as fstr,acode,sum(dramt) as sale,sum(cramt) as del_during_yr FROM WB_FA_VCH  WHERE " + branch_Cd + " AND TYPE='20' AND to_date(sale_dt,'dd/mm/yyyy') " + xprdRange + " group by acode,branchcd order by fstr";
                dt2 = fgen.getdata(frm_qstr, frm_cocd, mq3);  //FOR 20 TYPE WB_FA_VCH DT

                // mq4 = "select b.fstr, sum(a.cramt) as dep from wb_fa_vch a,(select a.fstr ,sum(a.ctr) from ( select branchcd||trim(acode) as fstr, 1 as ctr from wb_fa_pur where type='10' and instdt <= to_date('" + todt + "','dd/mm/yyyy') union all  select branchcd||trim(acode) as fstr, -1 as ctr from wb_fa_vch where type='20' and to_date(sale_dt,'dd/mm/yyyy')  between to_date('" + todt + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy'))a group by a.fstr having sum(a.ctr) <>0)b where a.type='30' and b.fstr=a.branchcd||trim(a.acode) group by b.fstr order by b.fstr";
                mq4 = "select b.fstr, sum(a.cramt) as dep from wb_fa_vch a,(select a.fstr ,sum(a.ctr) from ( select branchcd||trim(acode) as fstr, 1 as ctr from wb_fa_pur where branchcd='" + frm_mbr + "' and type='10' and instdt <= to_date('" + todt + "','dd/mm/yyyy') union all  select branchcd||trim(acode) as fstr, -1 as ctr from wb_fa_vch where branchcd='" + frm_mbr + "' and type='20' and to_date(sale_dt,'dd/mm/yyyy')  between to_date('" + todt + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy'))a group by a.fstr having sum(a.ctr) <>0)b where a.branchcd='" + frm_mbr + "' and a.type='30' and a.vchdate " + xprdRange + " and trim(b.fstr)=a.branchcd||trim(a.acode) group by b.fstr order by b.fstr";//real
                mq4 = "select b.fstr, sum(a.cramt) as dep from wb_fa_vch a,(select a.fstr ,sum(a.ctr) from ( select branchcd||trim(acode) as fstr, 1 as ctr from wb_fa_pur where " + branch_Cd + " and type='10' and instdt <= to_date('" + todt + "','dd/mm/yyyy') union all  select branchcd||trim(acode) as fstr, -1 as ctr from wb_fa_vch where " + branch_Cd + " and type='20' and to_date(sale_dt,'dd/mm/yyyy')  between to_date('" + todt + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy'))a group by a.fstr having sum(a.ctr) <>0)b where a." + branch_Cd + " and a.type='30' and a.vchdate " + xprdRange + " and trim(b.fstr)=a.branchcd||trim(a.acode) group by b.fstr order by b.fstr";
                //mq4 = "SELECT a.branchcd||a.acode,sum(a.cramt) as CURR_DEP FROM WB_FA_VCH a not in ( select a.branchcd||a.acode from wb_fa_vch b WHERE a.BRANCHCD='" + frm_mbr + "' AND a.TYPE='30' AND a.VCHDATE " + xprdRange + ") where a.BRANCHCD='" + frm_mbr + "' AND a.TYPE='30' AND a.VCHDATE " + xprdRange + " group by acode order by acode";//acc to Mayuri mam
                dt3 = fgen.getdata(frm_qstr, frm_cocd, mq4);  //FOR 30 TYPE WB_FA_VCH DT.......vchdate less than fromdt...logic

                //mq5 = "SELECT a.acode,sum(a.cramt) as crmt,a.sale_Dt,depr,sum(a.deprdays) as deprdays  FROM WB_FA_VCH a  WHERE  a.BRANCHCD='" + frm_mbr + "' AND a.TYPE='30'  AND A.vchdate " + xprdRange + " group by a.acode,a.sale_Dt,depr order by a.acode";
                mq5 = "SELECT a.acode as acode,sum(a.cramt) as crmt,sum(depr) as depr,sum(a.deprdays) as deprdays  FROM WB_FA_VCH a  WHERE  a.BRANCHCD='" + frm_mbr + "' AND a.TYPE='30'  AND A.vchdate " + xprdRange + " group by a.acode order by a.acode";//real
                mq5 = "SELECT trim(a.branchcd)||trim(a.acode) as fstr,a.acode as acode,sum(a.cramt) as crmt,sum(depr) as depr,sum(a.deprdays) as deprdays  FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE='30'  AND A.vchdate " + xprdRange + " group by a.acode,a.branchcd order by fstr";
                dt6 = fgen.getdata(frm_qstr, frm_cocd, mq5);  //

                mq7 = "SELECT a.acode,sum(a.depr_wbk) as crmt FROM WB_FA_VCH a  WHERE  a.BRANCHCD='" + frm_mbr + "' AND a.TYPE ='20' AND a.vchdate " + xprdRange + " group by acode order by acode "; //A.SALE_DT " + xprdRange + " //real
                mq7 = "SELECT trim(a.branchcd)||trim(a.acode) as fstr, a.acode,sum(a.depr_wbk) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='20' AND a.vchdate " + xprdRange + "  group by a.acode,a.branchcd order by fstr";
                dt7 = fgen.getdata(frm_qstr, frm_cocd, mq7);  //FOR 20 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                mq8 = "SELECT a.acode,sum(a.cramt) as crmt FROM WB_FA_VCH a  WHERE  a.BRANCHCD='" + frm_mbr + "' AND a.TYPE ='30' AND a.vchdate<to_date('" + fromdt + "','dd/mm/yyyy') group by acode order by acode "; //A.SALE_DT " + xprdRange + " //real
                mq8 = "SELECT trim(a.branchcd)||trim(a.acode) as fstr,a.acode,sum(a.cramt) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='30' AND a.vchdate<to_date('" + fromdt + "','dd/mm/yyyy')  group by a.branchcd,a.acode order by fstr";
                dt8 = fgen.getdata(frm_qstr, frm_cocd, mq8);  //FOR 30 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                mq9 = "SELECT a.acode,sum(a.depr_old) as crmt FROM WB_FA_VCH a  WHERE  a.BRANCHCD='" + frm_mbr + "' AND a.TYPE ='40' AND to_date(a.sale_dt,'dd/mm/yyyy') " + xprdRange + " group by acode order by acode "; //A.SALE_DT " + xprdRange + " //real
                mq9 = "SELECT trim(a.branchcd)||trim(a.acode) as fstr,a.acode,sum(a.depr_old) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='40' AND to_date(a.sale_dt,'dd/mm/yyyy') " + xprdRange + " group by a.branchcd,a.acode order by fstr ";
                dt9 = fgen.getdata(frm_qstr, frm_cocd, mq7);  //FOR 20 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                //mq10="select type1, name from type where branchcd <> 'DD' and trim(type1)='FA';

                if (dt.Rows.Count > 0)
                {
                    DataView view1 = new DataView(dt);
                    DataTable dtdrsim = new DataTable();
                    dtdrsim = view1.ToTable(true, "fstr"); //MAIN                  
                    foreach (DataRow dr0 in dtdrsim.Rows)
                    {
                        DataView viewim = new DataView(dt, "fstr='" + dr0["fstr"] + "'", "", DataViewRowState.CurrentRows);
                        dt4 = viewim.ToTable();
                        for (int i = 0; i < dt4.Rows.Count; i++)
                        {
                            mq6 = "";
                            mq1 = ""; db = 0; db1 = 0; db2 = 0; db6 = 0; db7 = 0; db8 = 0; db9 = 0; db10 = 0; db11 = 0; db12 = 0; rate = 0; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = ""; mq8 = ""; mq9 = ""; m = 0; n = 0; cnt = 0;
                            dr1 = ph_tbl.NewRow();
                            dr1["fromdt"] = fromdt;
                            dr1["header"] = header_n;
                            dr1["todt"] = todt;
                            dr1["grpcode"] = dt4.Rows[i]["grpcode"].ToString().Trim(); ;
                            dr1["ASSET_code"] = dt4.Rows[i]["acode"].ToString().Trim(); ;// dr0["acode"].ToString().Trim();
                            dr1["MBR"] = dt4.Rows[i]["branchcd"].ToString().Trim();
                            dr1["instdt"] = dt4.Rows[i]["instdt"].ToString().Trim();
                            dr1["ASSET_Name"] = dt4.Rows[i]["assetname"].ToString().Trim();
                            dr1["USEFUL_LIFE"] = dt4.Rows[i]["totlife"].ToString().Trim();
                            dr1["day_percent"] = dt4.Rows[i]["day_percent"].ToString().Trim();
                            //dr1["dep_Cal_prday"] = dt4.Rows[i]["deprpday"].ToString().Trim();
                            dr1["dep_Cal_prday"] = fgen.seek_iname_dt(dt6, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "depr");
                            //db8 = fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dr0["acode"].ToString().Trim() + "'", "original_cost"));
                            db8 = fgen.make_double(fgen.seek_iname_dt(dt1, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "original_cost")) + fgen.make_double(fgen.seek_iname_dt(dt1, "FSTR='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "sale"));
                            db9 = fgen.make_double(fgen.seek_iname_dt(dt8, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            dr1["TOTAL_COST_BF"] = db8;// -db9;  //original cost-dramt from sale in type 20 
                            //dr1["TOTAL_COST_BF"] = fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dr0["acode"].ToString().Trim() + "'", "original_cost"));
                            //dr1["dep_Cal_prday"] = fgen.make_double(fgen.seek_iname_dt(dt6, "acode='" + dr0["acode"].ToString().Trim() + "'", "depr"));

                            //===============agar mq12 me yes aaye to all entry as it as aayegi,,,,agar no aaye to only wahi entry show hogi jisme days ki value 0 se jyada hai
                            dr1["dep_pday"] = fgen.seek_iname_dt(dt6, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "deprdays");
                            db12 = fgen.make_double(dr1["dep_pday"].ToString().Trim()); ///days ki value 

                            dr1["CURR_ADD"] = fgen.make_double(fgen.seek_iname_dt(dt5, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "original_cost"));
                            dr1["sale"] = fgen.make_double(fgen.seek_iname_dt(dt2, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "del_during_yr"));
                            db = fgen.make_double(dr1["TOTAL_COST_BF"].ToString().Trim());  //1
                            db1 = fgen.make_double(dr1["CURR_ADD"].ToString().Trim()); ///2
                            db2 = fgen.make_double(dr1["sale"].ToString().Trim());  ///3
                            dr1["TOTAL_COST"] = (db + db1) - db2; //(1+2)-3....formula for 
                            db3 = fgen.make_double(fgen.seek_iname_dt(dt8, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            db4 = fgen.make_double(dt4.Rows[i]["op_dep"].ToString().Trim());
                            db5 = fgen.make_double(fgen.seek_iname_dt(dt7, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            if (fgen.make_double(dr1["TOTAL_COST_BF"].ToString().Trim()) == 0 && fgen.make_double(dr1["CURR_ADD"].ToString().Trim()) == 0)
                            {
                                dr1["DEP_BF"] = "0";
                            }
                            else
                            {
                                dr1["DEP_BF"] = db3 + db4;
                            }
                            if (fgen.make_double(dr1["sale"].ToString().Trim()) != 0)
                            {
                                dr1["CURR_DEP"] = db5;
                                dr1["DEELETION"] = fgen.make_double(dr1["DEP_BF"].ToString().Trim()) + db5;
                            }
                            else
                            {
                                dr1["CURR_DEP"] = fgen.make_double(fgen.seek_iname_dt(dt3, "fstr ='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "DEP"));
                                dr1["DEELETION"] = "0";
                            }
                            db5 = fgen.make_double(dr1["DEP_BF"].ToString().Trim());  //1
                            db6 = fgen.make_double(dr1["CURR_DEP"].ToString().Trim()); ///2
                            db7 = fgen.make_double(dr1["DEELETION"].ToString().Trim());  ///3
                            dr1["TOT_DEP"] = (db5 + db6) - db7;
                            db11 = fgen.make_double(dr1["TOTAL_COST"].ToString().Trim()) - fgen.make_double(dr1["TOT_DEP"].ToString().Trim());
                            if (db11 < 0)
                            {
                                dr1["WDV_CURR_YR"] = "0";
                            }
                            else
                            {
                                dr1["WDV_CURR_YR"] = fgen.make_double(dr1["TOTAL_COST"].ToString().Trim()) - fgen.make_double(dr1["TOT_DEP"].ToString().Trim());
                            }
                            db10 = db - db5;
                            if (db10 < 0)
                            {
                                dr1["WDV_PREV_YR"] = "0";
                            }
                            else
                            {
                                dr1["WDV_PREV_YR"] = db - db5;
                            }
                            if (fgen.make_double(dr1["WDV_CURR_YR"].ToString().Trim()) != 0 || fgen.make_double(dr1["WDV_PREV_YR"].ToString().Trim()) != 0)
                            {
                                if (mq12 == "YES")
                                {
                                    ph_tbl.Rows.Add(dr1);//if yes hai to all entry
                                }
                                if (mq12 == "NO") //agar no aaye to then see db12...if db12 >0 then rows is add else roWs is not add 
                                {
                                    if (db12 > 0)
                                    {
                                        ph_tbl.Rows.Add(dr1);
                                    }
                                }
                            }
                        }
                    }
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "depr", "depr", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;


            case "F70407": //BRANCHCD CHANGS DONE IN CODE               
                #region
                header_n = "Fixed Assets Register-Detailed"; //add sale date field
                //SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, a.ACODE,A.GRPCODE,TRIM(A.ASSETID),NVL(A.LIFE,0),TRIM(A.INVNO),A.INVDATE,TRIM(A.ASSETSUPP),A.INSTDT,A.LIFE_END,TRIM(A.ASSETNAME),NVL(A.ORIGINAL_COST,0),TRIM(B.NAME), c.sale_dt as saledt, a.invno as sinvno, to_char(c.invdate,'dd/mm/yyyy') as sinvdate, c.iqtyout as qtysale FROM TYPEGRP B, WB_FA_PUR a left join WB_FA_VCH c on a.branchcd||trim(a.acode)||to_char(a.instdt,'dd/mm/yyyy') =  c.branchcd||trim(c.acode)||to_char(c.instdt,'dd/mm/yyyy') AND c.type='20' and to_date(c.sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') and to_date(c.sale_dt,'dd/mm/yyyy') > to_date('" + fromdt + "','dd/mm/yyyy') WHERE TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a.BRANCHCD='" + frm_mbr + "' AND a.TYPE='10' and a.instdt <= to_date('" + todt + "','dd/mm/yyyy') order by a.GRPCODE,a.vchnum asc"; //REAL
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, (case when life_end<to_date('" + todt + "','dd/mm/yyyy') then 'Y' else 'N' end) as colour, A.BRANCHCD,a.ACODE,A.GRPCODE,TRIM(A.ASSETID),NVL(A.LIFE,0),TRIM(A.INVNO),A.INVDATE,TRIM(A.ASSETSUPP),A.INSTDT,A.LIFE_END,TRIM(A.ASSETNAME),NVL(A.ORIGINAL_COST,0),TRIM(B.NAME), c.sale_dt as saledt, c.invno as sinvno, to_char(c.invdate,'dd/mm/yyyy') as sinvdate, c.iqtyout as qtysale,a.quantity FROM TYPEGRP B, WB_FA_PUR a left join WB_FA_VCH c on a.branchcd||trim(a.acode)||to_char(a.instdt,'dd/mm/yyyy') =  c.branchcd||trim(c.acode)||to_char(c.instdt,'dd/mm/yyyy') AND c.type='20' and to_date(c.sale_dt,'dd/mm/yyyy') <= to_date('" + todt + "','dd/mm/yyyy') and to_date(c.sale_dt,'dd/mm/yyyy') > to_date('" + fromdt + "','dd/mm/yyyy') WHERE TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a." + branch_Cd + " AND a.TYPE='10' and a.instdt <= to_date('" + todt + "','dd/mm/yyyy') order by a.GRPCODE,a.branchcd,a.vchnum asc";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "fa_record", "fa_record", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;


            case "F70409"://BRANCHCD CHANGS DONE IN CODE
                #region
                header_n = "List of Fixed Assets Added"; //add sale date field
                ph_tbl = new DataTable();
                mq12 = "";
                ph_tbl.Columns.Add(new DataColumn("fromdt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("todt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("header", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("branchcd", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("vchnum", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("vchdate", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grp", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grpcode", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("acode", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("assetid", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("assetname", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("locn", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("instdt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("life_end", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("life", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("original_cost", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("assetsupp", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("invno", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("invdate", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("other_ref", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("sale_dt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("days", typeof(string)));

                //    SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,to_char(a.invdate,'dd/mm/yyyy') as inv_dt,to_char(a.vchdate,'dd/mm/yyyy') as vchdate_,to_char(a.instdt,'dd/mm/yyyy') as inst_Dt, a.*,B.NAME  FROM WB_FA_PUR a,TYPEGRP B WHERE a.BRANCHCD='" + frm_mbr + "' AND a.TYPE='10' AND b.branchcd='00' and TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a.vchdate " + xprdRange + " order by a.GRPCODE,a.vchdate,a.vchnum asc";//REAL
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,to_char(a.invdate,'dd/mm/yyyy') as inv_dt,to_char(a.vchdate,'dd/mm/yyyy') as vchdate_,to_char(a.instdt,'dd/mm/yyyy') as inst_Dt, a.*,B.NAME  FROM WB_FA_PUR a,TYPEGRP B WHERE a." + branch_Cd + " AND a.TYPE='10' AND b.branchcd='00' and TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a.vchdate " + xprdRange + " order by a.GRPCODE,a.vchdate,a.vchnum asc"; //NEED TO ASK BRANCHCD IS SET HARDOCDE FOR B TABLE
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                TimeSpan dd = TimeSpan.Zero;
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    mq1 = ""; mq2 = ""; mq3 = "";
                    dr1 = ph_tbl.NewRow();
                    dr1["fromdt"] = fromdt;
                    dr1["todt"] = todt;
                    dr1["header"] = header_n;
                    dr1["branchcd"] = dt.Rows[i]["branchcd"].ToString().Trim();
                    dr1["vchnum"] = dt.Rows[i]["vchnum"].ToString().Trim();
                    dr1["vchdate"] = dt.Rows[i]["vchdate_"].ToString().Trim();
                    dr1["grp"] = dt.Rows[i]["grp"].ToString().Trim();
                    dr1["grpcode"] = dt.Rows[i]["grpcode"].ToString().Trim();
                    dr1["acode"] = dt.Rows[i]["acode"].ToString().Trim();
                    dr1["assetid"] = dt.Rows[i]["assetid"].ToString().Trim();
                    dr1["assetname"] = dt.Rows[i]["assetname"].ToString().Trim();
                    dr1["locn"] = dt.Rows[i]["locn"].ToString().Trim();
                    dr1["instdt"] = dt.Rows[i]["inst_Dt"].ToString().Trim();
                    mq2 = dr1["instdt"].ToString().Trim();
                    dr1["sale_dt"] = dt.Rows[i]["sale_dt"].ToString().Trim();
                    mq1 = dr1["sale_dt"].ToString().Trim();
                    if (mq1.Length > 2)
                    {
                        if (Convert.ToDateTime(mq1) < Convert.ToDateTime(todt))
                        {
                            dd = Convert.ToDateTime(mq1) - Convert.ToDateTime(mq2);
                        }
                    }
                    else
                    {
                        dd = Convert.ToDateTime(todt) - Convert.ToDateTime(mq2);
                    }

                    dr1["life_end"] = dt.Rows[i]["life_end"].ToString().Trim();
                    dr1["life"] = fgen.make_double(dt.Rows[i]["life"].ToString().Trim());
                    dr1["original_cost"] = fgen.make_double(dt.Rows[i]["original_cost"].ToString().Trim());
                    dr1["assetsupp"] = dt.Rows[i]["assetsupp"].ToString().Trim();
                    dr1["invno"] = dt.Rows[i]["invno"].ToString().Trim();
                    dr1["invdate"] = dt.Rows[i]["inv_dt"].ToString().Trim();
                    dr1["other_ref"] = dt.Rows[i]["other_ref"].ToString().Trim();
                    dr1["days"] = dd.Days + 1;
                    ph_tbl.Rows.Add(dr1);
                }
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "fa_pur_record", "fa_pur_record", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70408": //BRANCHCD CHANGS DONE IN CODE        
                #region
                header_n = "Fixed Asset Sale Record";  //add sale date field                
                // SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, to_char(to_date(a.sale_dt,'dd/mm/yyyy'),'dd/MM/yyyy')  as saledt, a.iqtyout as qty ,b.assetname,C.NAME as grpname,b.assetid,b.original_cost,b.life,b.assetsupp,b.assetsuppadd,a.invno as vchnum,to_char(a.invdate,'dd/mm/yyyy') as vchdate,a.grpcode,a.acode,a.dramt,a.cramt,to_char(a.instdt,'dd/mm/yyyy') as instdt,b.invno,to_char(b.invdate,'dd/mm/yyyy') as invdate,a.deprdays,a.depr_wbk,a.salevalue   FROM WB_FA_VCH a ,wb_fa_pur b,TYPEGRP C WHERE a.branchcd||trim(a.acode)=b.branchcd||trim(b.acode) AND trim(a.grpcode)=trim(c.type1) and c.id='FA'  and a.BRANCHCD='" + frm_mbr + "' AND a.TYPE='20' and a.vchdate " + xprdRange + " order by a.grpcode,a.vchnum";//REAL
                SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,A.BRANCHCD,to_char(to_date(a.sale_dt,'dd/mm/yyyy'),'dd/MM/yyyy')  as saledt, a.iqtyout as qty ,b.assetname,C.NAME as grpname,b.assetid,b.original_cost,b.life,b.assetsupp,b.assetsuppadd,a.invno as vchnum,to_char(a.invdate,'dd/mm/yyyy') as vchdate,a.grpcode,a.acode,a.dramt,a.cramt,to_char(a.instdt,'dd/mm/yyyy') as instdt,b.invno,to_char(b.invdate,'dd/mm/yyyy') as invdate,a.deprdays,a.depr_wbk,a.salevalue   FROM WB_FA_VCH a ,wb_fa_pur b,TYPEGRP C WHERE a.branchcd||trim(a.acode)=b.branchcd||trim(b.acode) AND trim(a.grpcode)=trim(c.type1) and c.id='FA'  and a." + branch_Cd + " AND a.TYPE='20' and a.vchdate " + xprdRange + " order by a.grpcode,A.BRANCHCD,a.vchnum";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "fa_sale_record", "fa_sale_record", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70410":
                #region
                header_n = "STICKER";
                string x, y, y1, z = "";
                string stkrcon = fgen.seek_iname(frm_qstr, frm_cocd, "select max(vchnum) as stkrcon from wb_fa_stkr", "stkrcon");
                SQuery = "select * from wb_fa_stkr where branchcd='" + frm_mbr + "' and type='10'and vchnum='" + stkrcon + "'";
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                if (dt1.Rows.Count < 1) //for default values 
                {
                    x = "Assetsupp";
                    y = "Assetsuppadd";
                    z = "Assetid";
                }
                else
                {
                    x = dt1.Rows[0]["field1"].ToString().Trim();
                    y = dt1.Rows[0]["field2"].ToString().Trim();
                    z = dt1.Rows[0]["field3"].ToString().Trim();
                }
                y1 = "upper('" + y + "')";
                if (y == "INVDATE")
                {
                    y = "to_char(invdate,'dd/MM/yyyy')";
                }

                // a11 = "invno";// values are manual, later on it will be fetched from database.
                //b11 = "invdate";// values are manual. later on it will be fetched from database.
                // c11 = "assetid";// values are manual, later on it will be fetched from database.
                SQuery = "select '" + header_n + "' as header, a.branchcd, upper('" + x + "') as field1,upper('" + y + "') as field2,upper('" + z + "') as field3, trim(a.branchcd)||trim(a.acode)||trim(a.locn) as QR, a.acode,a." + x + " as a1,a." + y + " as b1,a." + z + " as c1 from wb_fa_pur a where a.branchcd='" + frm_mbr + "' and trim(a.branchcd)||trim(a.acode)||trim(a.vchnum)||to_char(a.vchdate,'dd/MM/yyyy')='" + barCode + "'";
                if (barCode.Length == 24)
                {
                    barCode = "'" + barCode + "'";
                }

                SQuery = "select '" + header_n + "' as header,trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') as fstr, branchcd, upper('" + x + "') as field1," + y1 + " as field2,upper('" + z + "') as field3, trim(branchcd)||trim(acode)||trim(locn) as QR, acode," + x + " as a1," + y + " as b1," + z + " as c1 from wb_fa_pur where branchcd='" + frm_mbr + "' and trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') in (" + barCode + ")";
                SQuery = "select '" + header_n + "' as header,trim(a.branchcd)||trim(a.acode)||trim(a.vchnum)||to_char(a.vchdate,'dd/MM/yyyy') as fstr, a.branchcd, upper('" + x + "') as field1,upper('" + y + "') as field2,upper('" + z + "') as field3, trim(a.branchcd)||trim(a.acode)||trim(a.locn) as QR, a.acode,a." + x + " as a1,a." + y + " as b1,a." + z + " as c1 from wb_fa_pur a where a.branchcd='" + frm_mbr + "' and trim(a.branchcd)||trim(a.acode)||trim(a.vchnum)||to_char(a.vchdate,'dd/MM/yyyy') in (" + barCode + ")";
                SQuery = "select '" + header_n + "' as header,trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') as fstr, branchcd, upper('" + x + "') as field1," + y1 + " as field2,upper('" + z + "') as field3, trim(branchcd)||trim(acode)||trim(locn) as QR, acode," + x + " as a1," + y + " as b1," + z + " as c1 from wb_fa_pur where branchcd='" + frm_mbr + "' and trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') in (" + barCode + ")";
                SQuery = "select '" + header_n + "' as header, a.branchcd, upper('" + x + "') as field1,upper('" + y + "') as field2,upper('" + z + "') as field3, trim(a.branchcd)||trim(a.acode)||trim(a.locn) as QR, a.acode,a." + x + " as a1,a." + y + " as b1,a." + z + " as c1 from wb_fa_pur a where a.branchcd='" + frm_mbr + "' and trim(a.branchcd)||trim(a.acode)||trim(a.vchnum)||to_char(a.vchdate,'dd/MM/yyyy')='" + barCode + "'";
                //SQuery = "select '" + header_n + "' as header,trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') as fstr, branchcd, upper('" + x + "') as field1," + y1 + " as field2,upper('" + z + "') as field3, trim(branchcd)||trim(acode)||trim(locn) as QR, acode," + x + " as a1," + y + " as b1," + z + " as c1 from wb_fa_pur where branchcd='" + frm_mbr + "' and trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') in (" + barCode + ")";
                // to check  SQuery = "select '" + header_n + "' as header,trim(a.branchcd)||trim(a.acode)||trim(a.vchnum)||to_char(a.vchdate,'dd/MM/yyyy') as fstr, a.branchcd, upper('" + x + "') as field1,upper('" + y + "') as field2,upper('" + z + "') as field3, trim(a.branchcd)||trim(a.acode)||trim(a.locn) as QR, a.acode,a." + x + " as a1,a." + y + " as b1,a." + z + " as c1 from wb_fa_pur a where a.branchcd='" + frm_mbr + "' and trim(a.branchcd)||trim(a.acode)||trim(a.vchnum)||to_char(a.vchdate,'dd/MM/yyyy') in (" + barCode + ")";
                //SQuery = "select '" + header_n + "' as header,trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') as fstr, branchcd, upper('" + x + "') as field1," + y1 + " as field2,upper('" + z + "') as field3, trim(branchcd)||trim(acode)||trim(locn) as QR, acode," + x + " as a1," + y + " as b1," + z + " as c1 from wb_fa_pur where branchcd='" + frm_mbr + "' and trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') in (" + barCode + ")";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                SQuery = "select '" + header_n + "' as header,trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') as fstr, branchcd, upper('" + x + "') as field1," + y1 + " as field2,upper('" + z + "') as field3, trim(branchcd)||trim(acode)||trim(locn) as QR, acode," + x + " as a1," + y + " as b1," + z + " as c1 from wb_fa_pur where branchcd='" + frm_mbr + "' and trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') in (" + barCode + ")";

                SQuery = "select '" + header_n + "' as header,trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') as fstr, branchcd, upper('" + x + "') as field1," + y1 + " as field2,upper('" + z + "') as field3, trim(branchcd)||trim(acode)||trim(locn) as QR, acode," + x + " as a1," + y + " as b1," + z + " as c1,assetname from wb_fa_pur where branchcd='" + frm_mbr + "' and trim(branchcd)||trim(acode)||trim(vchnum)||to_char(vchdate,'dd/MM/yyyy') in (" + barCode + ")";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                dt = fgen.addBarCode(dt, "QR", true);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Sticker", "Sticker", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70412":// BRANCHCD CHANGS DONE IN CODE             
                #region depreciation Report
                header_n = "Fixed Asset Register- Detailed";
                ph_tbl = new DataTable();
                ph_tbl.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("todt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("header", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("ASSETid", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("life_end", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("tot_life", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("ASSET_DEP", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("instdt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("MBR", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grpcode", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grpname", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("ASSET_CODE", typeof(string)));//m
                ph_tbl.Columns.Add(new DataColumn("ASSET_Name", typeof(string)));//m
                ph_tbl.Columns.Add(new DataColumn("USEFUL_LIFE", typeof(double)));//m
                ph_tbl.Columns.Add(new DataColumn("TOTAL_COST_BF", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("dep_Cal_prday", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("dep_pday", typeof(double)));//m
                ph_tbl.Columns.Add(new DataColumn("CURR_ADD", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("SALE", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("TOTAL_COST", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("DEP_BF", typeof(double)));//op bal in this
                ph_tbl.Columns.Add(new DataColumn("CURR_DEP", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("DEELETION", typeof(double)));//del during yr
                ph_tbl.Columns.Add(new DataColumn("TOT_DEP", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("WDV_CURR_YR", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("WDV_PREV_YR", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("day_percent", typeof(double)));

                param = "-";
                param = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PARAMS AS params FROM CONTROLS WHERE ID='R02'", "params");
                dt = new DataTable(); dt1 = new DataTable(); dt2 = new DataTable(); dt3 = new DataTable(); dt4 = new DataTable(); dt5 = new DataTable(); dt6 = new DataTable(); dt7 = new DataTable(); dt8 = new DataTable(); dt9 = new DataTable();

                #region
                mq0 = ""; mq1 = ""; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = "";
                mq0 = "select BRANCHCD,trim(branchcd)||trim(acode) as fstr,vchnum as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(instdt,'dd/mm/yyyy') as instdt,type, grpcode,grp,acode,assetid,assetname,basiccost,op_dep ,life as totlife,deprpday,original_cost,TO_char(life_end,'dd/mm/yyyy') as life_End,(case when life!=0 then round(100/life,2) else 0 end) as day_percent  from wb_fa_pur  where " + branch_Cd + " and type='10' and vchdate > to_date('" + param + "','dd/mm/yyyy') and instdt <= to_date('" + todt + "','dd/mm/yyyy') order by fstr";
                dt = fgen.getdata(frm_qstr, frm_cocd, mq0); //this is main dt and all asset is purchased in this table

                mq1 = "select a.branchcd,trim(a.branchcd)||trim(a.acode) as fstr,a.vchnum as pur_entry,to_char(a.vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(a.instdt,'dd/mm/yyyy') as instdt,a.type,a.grpcode,a.grp,a.acode,a.assetid,a.assetname,a.basiccost,a.op_dep ,a.life as totlife,a.deprpday,a.original_cost,b.sale from wb_fa_pur a, (select branchcd,trim(acode) as acode,sum(pur) as pur,sum(dramt)-sum(cramt) as sale from(select branchcd,acode,sum(pur) as pur,0 as dramt,0 as cramt from (select a.branchcd,a.acode,1 as pur from wb_fa_pur a where a." + branch_Cd + " and a.type='10' and a.instdt< to_date('" + fromdt + "','dd/mm/yyyy') union all select a.branchcd,a.acode,-1 as pur from wb_fa_vch a where a." + branch_Cd + " and a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') <= to_date('" + fromdt + "','dd/mm/yyyy') and to_date(a.sale_dt,'dd/mm/yyyy') >= to_date('" + todt + "','dd/mm/yyyy')) group by branchcd,acode having sum(pur)>0 union all select a.branchcd,a.acode,0 as pur,dramt,cramt from wb_fa_vch a where a." + branch_Cd + " and a.type='50' and a.instdt < to_date('" + fromdt + "','dd/mm/yyyy')) group by branchcd,trim(acode)) b where a.branchcd||trim(A.acode)=b.branchcd||trim(B.acode)";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, mq1); //is dt se total cost bf ki value.....instdt>fromdt....logic for this

                mq2 = "select fstr as fstr,trim(acode) as acode, sum(original_cost) as original_cost, instdt from (select trim(branchcd)||trim(ACODE) as fstr,original_cost,to_char(instdt,'dd/mm/yyyy') as instdt,acode from wb_fa_pur where " + branch_Cd + " and type='10' and instdt>=to_DatE('" + fromdt + "','dd/mm/yyyy') and instdt<=to_DatE('" + todt + "','dd/mm/yyyy') union all select trim(branchcd)||trim(ACODE) as fstr,sum(dramt)-sum(cramt) as original_cost,to_char(fvchdate,'dd/mm/yyyy') as instdt,acode from wb_fa_vch where " + branch_Cd + " and type='50' and instdt " + xprdRange + " and fvchdate <= to_date('" + todt + "','dd/mm/yyyy') group by trim(branchcd)||trim(ACODE),to_char(fvchdate,'dd/mm/yyyy'),acode) group by fstr, instdt,trim(acode) order by acode,fstr";
                dt5 = fgen.getdata(frm_qstr, frm_cocd, mq2); //between current addition ki dt..if instdt>fromdt and instdt<todt...logic for this...

                mq3 = "SELECT branchcd,acode,trim(branchcd)||trim(acode) as fstr,sum(dramt) as sale,sum(cramt) as del_during_yr FROM WB_FA_VCH  WHERE " + branch_Cd + " AND TYPE='20' AND to_date(sale_dt,'dd/mm/yyyy') " + xprdRange + " group by acode,branchcd order by acode,fstr";
                dt2 = fgen.getdata(frm_qstr, frm_cocd, mq3);  //FOR 20 TYPE WB_FA_VCH DT

                mq4 = "select b.fstr, sum(a.cramt) as dep from wb_fa_vch a,(select a.fstr ,sum(a.ctr) from ( select branchcd||trim(acode) as fstr, 1 as ctr from wb_fa_pur where " + branch_Cd + " and type='10' and instdt <= to_date('" + todt + "','dd/mm/yyyy') union all  select branchcd||trim(acode) as fstr, -1 as ctr from wb_fa_vch where " + branch_Cd + " and type='20' and to_date(sale_dt,'dd/mm/yyyy')  between to_date('" + todt + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy'))a group by a.fstr having sum(a.ctr) <>0)b where " + branch_Cd + " and a.type='30' and a.vchdate " + xprdRange + " and trim(b.fstr)=a.branchcd||trim(a.acode) group by b.fstr order by b.fstr";
                dt3 = fgen.getdata(frm_qstr, frm_cocd, mq4);  //FOR 30 TYPE WB_FA_VCH DT.......vchdate less than fromdt...logic

                mq5 = "SELECT a.branchcd,a.acode as acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.cramt) as crmt,depr as depr,sum(a.deprdays) as deprdays  FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE='30'  AND A.vchdate " + xprdRange + " group by a.acode,a.branchcd,depr order by fstr";
                dt6 = fgen.getdata(frm_qstr, frm_cocd, mq5);  //

                mq7 = "SELECT  a.branchcd, a.acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.depr_wbk) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='20' AND a.vchdate " + xprdRange + " group by a.acode,a.branchcd order by fstr";
                dt7 = fgen.getdata(frm_qstr, frm_cocd, mq7);  //FOR 20 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                mq8 = "SELECT a.branchcd,a.acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.cramt) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='30' AND a.vchdate<to_date('" + fromdt + "','dd/mm/yyyy') group by a.acode,a.branchcd order by fstr";
                dt8 = fgen.getdata(frm_qstr, frm_cocd, mq8);  //FOR 30 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                mq9 = "SELECT a.branchcd,a.acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.depr_old) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='40' AND to_date(a.sale_dt,'dd/mm/yyyy') " + xprdRange + " group by a.branchcd,a.acode order by fstr";
                dt9 = fgen.getdata(frm_qstr, frm_cocd, mq7);  //FOR 20 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                mq10 = "select a.branchcd||trim(a.acode) as fstr,0 as pur,sum(a.dramt)-sum(a.cramt) as sale from wb_fa_vch a where a.branchcd not in ('DD','88') and ((a.type='30' and a.vchdate < to_date('" + fromdt + "','dd/mm/yyyy')) or ( a.type='50' and a.instdt < to_date('" + fromdt + "','dd/mm/yyyy')) or ( a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') < to_date('" + fromdt + "','dd/mm/yyyy'))) group by a.branchcd||trim(a.acode)";
                mq10 = "select a.branchcd||trim(a.acode) as fstr,0 as pur,sum(a.dramt)-sum(a.cramt) as sale from wb_fa_vch a where a.branchcd not in ('DD','88') and (( a.type='50' and a.instdt < to_date('" + fromdt + "','dd/mm/yyyy')) or ( a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') < to_date('" + fromdt + "','dd/mm/yyyy'))) group by a.branchcd||trim(a.acode)";
                dt10 = fgen.getdata(frm_qstr, frm_cocd, mq10);

                mq11 = "select type1, name from typegrp where id='FA' and branchcd <> 'DD' ";
                dt11 = fgen.getdata(frm_qstr, frm_cocd, mq11);

                if (dt.Rows.Count > 0)
                {
                    DataView view1 = new DataView(dt);
                    DataTable dtdrsim = new DataTable();
                    dtdrsim = view1.ToTable(true, "FSTR"); //MAIN                  
                    foreach (DataRow dr0 in dtdrsim.Rows)
                    {
                        DataView viewim = new DataView(dt, "FSTR='" + dr0["FSTR"] + "'", "", DataViewRowState.CurrentRows);
                        dt4 = viewim.ToTable();
                        for (int i = 0; i < dt4.Rows.Count; i++)
                        {
                            mq6 = "";
                            mq1 = ""; db = 0; db1 = 0; db2 = 0; db6 = 0; db7 = 0; db8 = 0; db9 = 0; db10 = 0; db11 = 0; db12 = 0; rate = 0; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = ""; mq8 = ""; mq9 = ""; m = 0; n = 0; cnt = 0;
                            dr1 = ph_tbl.NewRow();
                            dr1["fromdt"] = fromdt;
                            dr1["header"] = header_n;
                            dr1["todt"] = todt;
                            dr1["MBR"] = dt4.Rows[i]["BRANCHCD"].ToString().Trim(); ;
                            dr1["grpcode"] = dt4.Rows[i]["grpcode"].ToString().Trim();
                            dr1["grpname"] = fgen.seek_iname_dt(dt11, "type1='" + dt4.Rows[i]["grpcode"].ToString().Trim() + "'", "name");
                            dr1["ASSET_code"] = dt4.Rows[i]["acode"].ToString().Trim();
                            dr1["life_end"] = dt4.Rows[i]["life_End"].ToString().Trim();
                            dr1["instdt"] = dt4.Rows[i]["instdt"].ToString().Trim();
                            dr1["ASSET_Name"] = dt4.Rows[i]["assetname"].ToString().Trim();
                            dr1["USEFUL_LIFE"] = dt4.Rows[i]["totlife"].ToString().Trim();
                            dr1["day_percent"] = dt4.Rows[i]["day_percent"].ToString().Trim();///for sppi and hppi
                            //dr1["dep_Cal_prday"] = dt4.Rows[i]["deprpday"].ToString().Trim();
                            dr1["dep_Cal_prday"] = fgen.seek_iname_dt(dt6, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "depr");
                            //db8 = fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dr0["acode"].ToString().Trim() + "'", "original_cost"));
                            db8 = fgen.make_double(fgen.seek_iname_dt(dt1, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "original_cost")) + fgen.make_double(fgen.seek_iname_dt(dt10, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "sale"));
                            db9 = fgen.make_double(fgen.seek_iname_dt(dt8, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            dr1["TOTAL_COST_BF"] = db8;// -db9;  //original cost-dramt from sale in type 20 
                            //dr1["TOTAL_COST_BF"] = fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dr0["acode"].ToString().Trim() + "'", "original_cost"));
                            //dr1["dep_Cal_prday"] = fgen.make_double(fgen.seek_iname_dt(dt6, "acode='" + dr0["acode"].ToString().Trim() + "'", "depr"));
                            //===============agar mq12 me yes aaye to all entry as it as aayegi,,,,agar no aaye to only wahi entry show hogi jisme days ki value 0 se jyada hai
                            dr1["dep_pday"] = fgen.seek_iname_dt(dt6, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "deprdays");
                            db12 = fgen.make_double(dr1["dep_pday"].ToString().Trim()); ///days ki value 

                            dr1["CURR_ADD"] = fgen.make_double(fgen.seek_iname_dt(dt5, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "original_cost"));
                            dr1["sale"] = fgen.make_double(fgen.seek_iname_dt(dt2, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "del_during_yr"));
                            db = fgen.make_double(dr1["TOTAL_COST_BF"].ToString().Trim());  //1
                            db1 = fgen.make_double(dr1["CURR_ADD"].ToString().Trim()); ///2
                            db2 = fgen.make_double(dr1["sale"].ToString().Trim());  ///3
                            dr1["TOTAL_COST"] = (db + db1) - db2; //(1+2)-3....formula for 
                            db3 = fgen.make_double(fgen.seek_iname_dt(dt8, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            db4 = fgen.make_double(dt4.Rows[i]["op_dep"].ToString().Trim());
                            db5 = fgen.make_double(fgen.seek_iname_dt(dt7, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            if (fgen.make_double(dr1["TOTAL_COST_BF"].ToString().Trim()) == 0 && fgen.make_double(dr1["CURR_ADD"].ToString().Trim()) == 0)
                            {
                                dr1["DEP_BF"] = "0";
                            }
                            else
                            {
                                dr1["DEP_BF"] = db3 + db4;
                            }
                            if (fgen.make_double(dr1["sale"].ToString().Trim()) != 0)
                            {
                                dr1["CURR_DEP"] = db5;
                                dr1["DEELETION"] = fgen.make_double(dr1["DEP_BF"].ToString().Trim()) + db5;
                            }
                            else
                            {
                                dr1["CURR_DEP"] = fgen.make_double(fgen.seek_iname_dt(dt3, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "DEP"));
                                dr1["DEELETION"] = "0";
                            }
                            db5 = fgen.make_double(dr1["DEP_BF"].ToString().Trim());  //1
                            db6 = fgen.make_double(dr1["CURR_DEP"].ToString().Trim()); ///2
                            db7 = fgen.make_double(dr1["DEELETION"].ToString().Trim());  ///3
                            dr1["TOT_DEP"] = (db5 + db6) - db7;
                            db11 = fgen.make_double(dr1["TOTAL_COST"].ToString().Trim()) - fgen.make_double(dr1["TOT_DEP"].ToString().Trim());
                            if (db11 < 0)
                            {
                                dr1["WDV_CURR_YR"] = "0";
                            }
                            else
                            {
                                dr1["WDV_CURR_YR"] = fgen.make_double(dr1["TOTAL_COST"].ToString().Trim()) - fgen.make_double(dr1["TOT_DEP"].ToString().Trim());
                            }
                            db10 = db - db5;
                            if (db10 < 0)
                            {
                                dr1["WDV_PREV_YR"] = "0";
                            }
                            else
                            {
                                dr1["WDV_PREV_YR"] = db - db5;
                            }
                            if (fgen.make_double(dr1["TOTAL_COST_BF"].ToString().Trim()) != 0 || fgen.make_double(dr1["WDV_CURR_YR"].ToString().Trim()) != 0 || fgen.make_double(dr1["WDV_PREV_YR"].ToString().Trim()) != 0 || fgen.make_double(dr1["CURR_ADD"].ToString().Trim()) != 0 || fgen.make_double(dr1["sale"].ToString().Trim()) != 0)
                            {
                                ph_tbl.Rows.Add(dr1);
                            }
                        }
                    }
                }
                #endregion

                #region for dep summary
                dtm = new DataTable();
                dtm.Columns.Add(new DataColumn("fromdt", typeof(string)));
                dtm.Columns.Add(new DataColumn("todt", typeof(string)));
                dtm.Columns.Add(new DataColumn("colour", typeof(string)));
                dtm.Columns.Add(new DataColumn("header", typeof(string)));
                dtm.Columns.Add(new DataColumn("ASSET_DEP", typeof(string)));//m
                dtm.Columns.Add(new DataColumn("ASSET_id", typeof(string)));//m
                dtm.Columns.Add(new DataColumn("life_end", typeof(string)));//m
                dtm.Columns.Add(new DataColumn("tot_life", typeof(double)));//m
                dtm.Columns.Add(new DataColumn("instdt", typeof(string)));
                dtm.Columns.Add(new DataColumn("MBR", typeof(string)));
                dtm.Columns.Add(new DataColumn("grpcode", typeof(string)));
                dtm.Columns.Add(new DataColumn("grpname", typeof(string)));
                dtm.Columns.Add(new DataColumn("ASSET_CODE", typeof(string)));//m
                dtm.Columns.Add(new DataColumn("ASSET_Name", typeof(string)));//m
                dtm.Columns.Add(new DataColumn("USEFUL_LIFE", typeof(double)));//m
                dtm.Columns.Add(new DataColumn("dep_pday", typeof(double)));//m
                dtm.Columns.Add(new DataColumn("dep_Cal_prday", typeof(double)));
                dtm.Columns.Add(new DataColumn("TOTAL_COST_BF", typeof(double)));
                dtm.Columns.Add(new DataColumn("CURR_ADD", typeof(double)));
                dtm.Columns.Add(new DataColumn("SALE", typeof(double)));
                dtm.Columns.Add(new DataColumn("TOTAL_COST", typeof(double)));
                dtm.Columns.Add(new DataColumn("DEP_BF", typeof(double)));//op bal in this
                dtm.Columns.Add(new DataColumn("CURR_DEP", typeof(double)));
                dtm.Columns.Add(new DataColumn("DEELETION", typeof(double)));//del during yr
                dtm.Columns.Add(new DataColumn("TOT_DEP", typeof(double)));
                dtm.Columns.Add(new DataColumn("WDV_CURR_YR", typeof(double)));
                dtm.Columns.Add(new DataColumn("WDV_PREV_YR", typeof(double)));
                dtm.Columns.Add(new DataColumn("day_percent", typeof(double)));

                if (ph_tbl.Rows.Count > 0)
                {
                    DataView view1 = new DataView(ph_tbl);
                    DataTable dtdrsim = new DataTable();
                    dtdrsim = view1.ToTable(true, "grpcode", "asset_code"); //MAIN                  
                    foreach (DataRow dr0 in dtdrsim.Rows)
                    {
                        DataView viewim = new DataView(ph_tbl, "grpcode='" + dr0["grpcode"] + "' and ASSET_CODE='" + dr0["ASSET_CODE"] + "'", "", DataViewRowState.CurrentRows);
                        dt4 = viewim.ToTable();
                        dr1 = dtm.NewRow();
                        mq1 = ""; db = 0; db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0; db7 = 0; db8 = 0; db9 = 0; db10 = 0; db11 = 0; db12 = 0; db13 = 0; db14 = 0;
                        for (int i = 0; i < dt4.Rows.Count; i++)
                        {
                            dr1["fromdt"] = fromdt;
                            dr1["todt"] = todt;
                            dr1["life_end"] = dt4.Rows[i]["life_end"].ToString().Trim();
                            dr1["day_percent"] = dt4.Rows[i]["day_percent"].ToString().Trim();///for sppi and hppi
                            if (Convert.ToDateTime(dr1["life_end"].ToString().Trim()) <= Convert.ToDateTime(dr1["TODT"].ToString().Trim()))
                            {
                                dr1["colour"] = "Y";
                            }
                            else
                            {
                                dr1["COLOUR"] = "N";
                            }
                            dr1["header"] = header_n;
                            dr1["MBR"] = dt4.Rows[i]["MBR"].ToString().Trim();
                            dr1["grpcode"] = dr0["grpcode"].ToString().Trim();
                            dr1["grpname"] = dt4.Rows[i]["grpname"].ToString().Trim();
                            dr1["ASSET_CODE"] = dt4.Rows[i]["ASSET_CODE"].ToString().Trim();
                            dr1["ASSET_id"] = dt4.Rows[i]["ASSETid"].ToString().Trim();

                            //dr1["tot_life"] = dt4.Rows[i]["tot_life"].ToString().Trim();
                            dr1["ASSET_Name"] = dt4.Rows[i]["ASSET_Name"].ToString().Trim();
                            dr1["instdt"] = dt4.Rows[i]["instdt"].ToString().Trim();
                            db += fgen.make_double(dt4.Rows[i]["TOTAL_COST_BF"].ToString().Trim());
                            dr1["TOTAL_COST_BF"] = db;
                            db1 += fgen.make_double(dt4.Rows[i]["CURR_ADD"].ToString().Trim());
                            dr1["CURR_ADD"] = db1;
                            db2 += fgen.make_double(dt4.Rows[i]["SALE"].ToString().Trim());
                            dr1["SALE"] = db2;
                            db3 += fgen.make_double(dt4.Rows[i]["TOTAL_COST"].ToString().Trim());
                            dr1["TOTAL_COST"] = db3;
                            db4 += fgen.make_double(dt4.Rows[i]["DEP_BF"].ToString().Trim());
                            dr1["DEP_BF"] = db4;
                            db5 += fgen.make_double(dt4.Rows[i]["CURR_DEP"].ToString().Trim());
                            dr1["CURR_DEP"] = db5;
                            db6 += fgen.make_double(dt4.Rows[i]["DEELETION"].ToString().Trim());
                            dr1["DEELETION"] = db6;
                            db7 += fgen.make_double(dt4.Rows[i]["TOT_DEP"].ToString().Trim());
                            dr1["TOT_DEP"] = db7;
                            db8 += fgen.make_double(dt4.Rows[i]["WDV_CURR_YR"].ToString().Trim());
                            dr1["WDV_CURR_YR"] = db8;
                            db9 += fgen.make_double(dt4.Rows[i]["WDV_PREV_YR"].ToString().Trim());
                            dr1["WDV_PREV_YR"] = db9;
                            db10 += fgen.make_double(dt4.Rows[i]["USEFUL_LIFE"].ToString().Trim());
                            dr1["USEFUL_LIFE"] = db10;
                            db11 += fgen.make_double(dt4.Rows[i]["dep_pday"].ToString().Trim());//old
                            dr1["dep_pday"] = db11;
                            db12 += fgen.make_double(dt4.Rows[i]["ASSET_DEP"].ToString().Trim());
                            dr1["ASSET_DEP"] = db12;
                            db13 = fgen.make_double(dt4.Rows[i]["dep_Cal_prday"].ToString().Trim());
                            dr1["dep_Cal_prday"] = db13;
                            db14 = fgen.make_double(dt4.Rows[i]["tot_life"].ToString().Trim());
                            dr1["tot_life"] = db14;
                        }
                        dtm.Rows.Add(dr1);
                    }
                }
                #endregion
                if (dtm.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dtm.TableName = "Prepcur";
                    dsRep.Tables.Add(dtm);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "depr_sum", "depr_sum", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70413"://dep chart grp wise...18/7/2018/////////BRANCHCD CHANGS DONE IN CODE                
                #region depreciation Report
                header_n = "Depreciation Chart- Group wise Summary";
                ph_tbl = new DataTable();
                ph_tbl.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("todt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("header", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("MBR", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("ASSET_DEP", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("instdt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grpcode", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grpname", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("ASSET_CODE", typeof(string)));//m
                ph_tbl.Columns.Add(new DataColumn("ASSET_Name", typeof(string)));//m
                ph_tbl.Columns.Add(new DataColumn("USEFUL_LIFE", typeof(double)));//m
                ph_tbl.Columns.Add(new DataColumn("TOTAL_COST_BF", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("dep_Cal_prday", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("dep_pday", typeof(double)));//m
                ph_tbl.Columns.Add(new DataColumn("CURR_ADD", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("SALE", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("TOTAL_COST", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("DEP_BF", typeof(double)));//op bal in this
                ph_tbl.Columns.Add(new DataColumn("CURR_DEP", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("DEELETION", typeof(double)));//del during yr
                ph_tbl.Columns.Add(new DataColumn("TOT_DEP", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("WDV_CURR_YR", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("WDV_PREV_YR", typeof(double)));
                param = "-";
                param = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PARAMS AS params FROM CONTROLS WHERE ID='R02'", "params");
                dt = new DataTable(); dt1 = new DataTable(); dt2 = new DataTable(); dt3 = new DataTable(); dt4 = new DataTable(); dt5 = new DataTable(); dt6 = new DataTable(); dt7 = new DataTable(); dt8 = new DataTable(); dt9 = new DataTable();

                #region
                mq0 = ""; mq1 = ""; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = "";
                mq0 = "select BRANCHCD,trim(branchcd)||trim(acode) as fstr,vchnum as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(instdt,'dd/mm/yyyy') as instdt,type, grpcode,grp,acode,assetid,assetname,basiccost,op_dep ,life as totlife,deprpday,original_cost,TO_char(life_end,'dd/mm/yyyy') as life_End from wb_fa_pur  where " + branch_Cd + " and type='10' and vchdate > to_date('" + param + "','dd/mm/yyyy') and instdt <= to_date('" + todt + "','dd/mm/yyyy') order by fstr";
                dt = fgen.getdata(frm_qstr, frm_cocd, mq0); //this is main dt and all asset is purchased in this table

                mq1 = "select a.branchcd,trim(a.branchcd)||trim(a.acode) as fstr,a.vchnum as pur_entry,to_char(a.vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(a.instdt,'dd/mm/yyyy') as instdt,a.type,a.grpcode,a.grp,a.acode,a.assetid,a.assetname,a.basiccost,a.op_dep ,a.life as totlife,a.deprpday,a.original_cost,b.sale from wb_fa_pur a, (select branchcd,trim(acode) as acode,sum(pur) as pur,sum(dramt)-sum(cramt) as sale from(select branchcd,acode,sum(pur) as pur,0 as dramt,0 as cramt from (select a.branchcd,a.acode,1 as pur from wb_fa_pur a where a." + branch_Cd + " and a.type='10' and a.instdt< to_date('" + fromdt + "','dd/mm/yyyy') union all select a.branchcd,a.acode,-1 as pur from wb_fa_vch a where a." + branch_Cd + " and a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') <= to_date('" + fromdt + "','dd/mm/yyyy') and to_date(a.sale_dt,'dd/mm/yyyy') >= to_date('" + todt + "','dd/mm/yyyy')) group by branchcd,acode having sum(pur)>0 union all select a.branchcd,a.acode,0 as pur,dramt,cramt from wb_fa_vch a where a." + branch_Cd + " and a.type='50' and a.instdt < to_date('" + fromdt + "','dd/mm/yyyy')) group by branchcd,trim(acode)) b where a.branchcd||trim(A.acode)=b.branchcd||trim(B.acode)";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, mq1); //is dt se total cost bf ki value.....instdt>fromdt....logic for this

                mq2 = "select fstr as fstr,trim(acode) as acode, sum(original_cost) as original_cost, instdt from (select trim(branchcd)||trim(ACODE) as fstr,original_cost,to_char(instdt,'dd/mm/yyyy') as instdt,acode from wb_fa_pur where " + branch_Cd + " and type='10' and instdt>=to_DatE('" + fromdt + "','dd/mm/yyyy') and instdt<=to_DatE('" + todt + "','dd/mm/yyyy') union all select trim(branchcd)||trim(ACODE) as fstr,sum(dramt)-sum(cramt) as original_cost,to_char(fvchdate,'dd/mm/yyyy') as instdt,acode from wb_fa_vch where " + branch_Cd + " and type='50' and instdt " + xprdRange + " and fvchdate <= to_date('" + todt + "','dd/mm/yyyy') group by trim(branchcd)||trim(ACODE),to_char(fvchdate,'dd/mm/yyyy'),acode) group by fstr, instdt,trim(acode) order by acode,fstr";
                dt5 = fgen.getdata(frm_qstr, frm_cocd, mq2); //between current addition ki dt..if instdt>fromdt and instdt<todt...logic for this...

                mq3 = "SELECT branchcd,acode,trim(branchcd)||trim(acode) as fstr,sum(dramt) as sale,sum(cramt) as del_during_yr FROM WB_FA_VCH  WHERE " + branch_Cd + " AND TYPE='20' AND to_date(sale_dt,'dd/mm/yyyy') " + xprdRange + " group by acode,branchcd order by acode,fstr";
                dt2 = fgen.getdata(frm_qstr, frm_cocd, mq3);  //FOR 20 TYPE WB_FA_VCH DT

                mq4 = "select b.fstr, sum(a.cramt) as dep from wb_fa_vch a,(select a.fstr ,sum(a.ctr) from ( select branchcd||trim(acode) as fstr, 1 as ctr from wb_fa_pur where " + branch_Cd + " and type='10' and instdt <= to_date('" + todt + "','dd/mm/yyyy') union all  select branchcd||trim(acode) as fstr, -1 as ctr from wb_fa_vch where " + branch_Cd + " and type='20' and to_date(sale_dt,'dd/mm/yyyy')  between to_date('" + todt + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy'))a group by a.fstr having sum(a.ctr) <>0)b where " + branch_Cd + " and a.type='30' and a.vchdate " + xprdRange + " and trim(b.fstr)=a.branchcd||trim(a.acode) group by b.fstr order by b.fstr";
                dt3 = fgen.getdata(frm_qstr, frm_cocd, mq4);  //FOR 30 TYPE WB_FA_VCH DT.......vchdate less than fromdt...logic

                mq5 = "SELECT a.branchcd,a.acode as acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.cramt) as crmt,depr as depr,sum(a.deprdays) as deprdays  FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE='30'  AND A.vchdate " + xprdRange + " group by a.acode,a.branchcd,depr order by fstr";
                dt6 = fgen.getdata(frm_qstr, frm_cocd, mq5);  //

                mq7 = "SELECT  a.branchcd, a.acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.depr_wbk) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='20' AND a.vchdate " + xprdRange + " group by a.acode,a.branchcd order by fstr";
                dt7 = fgen.getdata(frm_qstr, frm_cocd, mq7);  //FOR 20 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                mq8 = "SELECT a.branchcd,a.acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.cramt) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='30' AND a.vchdate<to_date('" + fromdt + "','dd/mm/yyyy') group by a.acode,a.branchcd order by fstr";
                dt8 = fgen.getdata(frm_qstr, frm_cocd, mq8);  //FOR 30 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                mq9 = "SELECT a.branchcd,a.acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.depr_old) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='40' AND to_date(a.sale_dt,'dd/mm/yyyy') " + xprdRange + " group by a.branchcd,a.acode order by fstr";
                dt9 = fgen.getdata(frm_qstr, frm_cocd, mq7);  //FOR 20 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                mq10 = "select a.branchcd||trim(a.acode) as fstr,0 as pur,sum(a.dramt)-sum(a.cramt) as sale from wb_fa_vch a where a.branchcd not in ('DD','88') and ((a.type='30' and a.vchdate < to_date('" + fromdt + "','dd/mm/yyyy')) or ( a.type='50' and a.instdt < to_date('" + fromdt + "','dd/mm/yyyy')) or ( a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') < to_date('" + fromdt + "','dd/mm/yyyy'))) group by a.branchcd||trim(a.acode)";
                dt10 = fgen.getdata(frm_qstr, frm_cocd, mq10);

                mq11 = "select type1, name from typegrp where id='FA' and branchcd <> 'DD' ";
                dt11 = fgen.getdata(frm_qstr, frm_cocd, mq11);

                if (dt.Rows.Count > 0)
                {
                    DataView view1 = new DataView(dt);
                    DataTable dtdrsim = new DataTable();
                    dtdrsim = view1.ToTable(true, "FSTR"); //MAIN                  
                    foreach (DataRow dr0 in dtdrsim.Rows)
                    {
                        DataView viewim = new DataView(dt, "FSTR='" + dr0["FSTR"] + "'", "", DataViewRowState.CurrentRows);
                        dt4 = viewim.ToTable();
                        for (int i = 0; i < dt4.Rows.Count; i++)
                        {
                            mq6 = "";
                            mq1 = ""; db = 0; db1 = 0; db2 = 0; db6 = 0; db7 = 0; db8 = 0; db9 = 0; db10 = 0; db11 = 0; db12 = 0; rate = 0; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = ""; mq8 = ""; mq9 = ""; m = 0; n = 0; cnt = 0;
                            dr1 = ph_tbl.NewRow();
                            dr1["fromdt"] = fromdt;
                            dr1["header"] = header_n;
                            dr1["todt"] = todt;
                            dr1["MBR"] = dt4.Rows[i]["BRANCHCD"].ToString().Trim(); ;
                            dr1["grpcode"] = dt4.Rows[i]["grpcode"].ToString().Trim();
                            dr1["grpname"] = fgen.seek_iname_dt(dt11, "type1='" + dt4.Rows[i]["grpcode"].ToString().Trim() + "'", "name");
                            dr1["ASSET_code"] = dt4.Rows[i]["acode"].ToString().Trim();
                            dr1["ASSET_Name"] = dt4.Rows[i]["assetname"].ToString().Trim();
                            dr1["USEFUL_LIFE"] = dt4.Rows[i]["totlife"].ToString().Trim();
                            //dr1["dep_Cal_prday"] = dt4.Rows[i]["deprpday"].ToString().Trim();
                            dr1["dep_Cal_prday"] = fgen.seek_iname_dt(dt6, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "depr");
                            //db8 = fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dr0["acode"].ToString().Trim() + "'", "original_cost"));
                            db8 = fgen.make_double(fgen.seek_iname_dt(dt1, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "original_cost")) + fgen.make_double(fgen.seek_iname_dt(dt10, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "sale"));
                            db9 = fgen.make_double(fgen.seek_iname_dt(dt8, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            dr1["TOTAL_COST_BF"] = db8;// -db9;  //original cost-dramt from sale in type 20 
                            //dr1["TOTAL_COST_BF"] = fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dr0["acode"].ToString().Trim() + "'", "original_cost"));
                            //dr1["dep_Cal_prday"] = fgen.make_double(fgen.seek_iname_dt(dt6, "acode='" + dr0["acode"].ToString().Trim() + "'", "depr"));
                            //===============agar mq12 me yes aaye to all entry as it as aayegi,,,,agar no aaye to only wahi entry show hogi jisme days ki value 0 se jyada hai
                            dr1["dep_pday"] = fgen.seek_iname_dt(dt6, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "deprdays");
                            db12 = fgen.make_double(dr1["dep_pday"].ToString().Trim()); ///days ki value 

                            dr1["CURR_ADD"] = fgen.make_double(fgen.seek_iname_dt(dt5, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "original_cost"));
                            dr1["sale"] = fgen.make_double(fgen.seek_iname_dt(dt2, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "del_during_yr"));
                            db = fgen.make_double(dr1["TOTAL_COST_BF"].ToString().Trim());  //1
                            db1 = fgen.make_double(dr1["CURR_ADD"].ToString().Trim()); ///2
                            db2 = fgen.make_double(dr1["sale"].ToString().Trim());  ///3
                            dr1["TOTAL_COST"] = (db + db1) - db2; //(1+2)-3....formula for 
                            db3 = fgen.make_double(fgen.seek_iname_dt(dt8, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            db4 = fgen.make_double(dt4.Rows[i]["op_dep"].ToString().Trim());
                            db5 = fgen.make_double(fgen.seek_iname_dt(dt7, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            if (fgen.make_double(dr1["TOTAL_COST_BF"].ToString().Trim()) == 0 && fgen.make_double(dr1["CURR_ADD"].ToString().Trim()) == 0)
                            {
                                dr1["DEP_BF"] = "0";
                            }
                            else
                            {
                                dr1["DEP_BF"] = db3 + db4;
                            }
                            if (fgen.make_double(dr1["sale"].ToString().Trim()) != 0)
                            {
                                dr1["CURR_DEP"] = db5;
                                dr1["DEELETION"] = fgen.make_double(dr1["DEP_BF"].ToString().Trim()) + db5;
                            }
                            else
                            {
                                dr1["CURR_DEP"] = fgen.make_double(fgen.seek_iname_dt(dt3, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "DEP"));
                                dr1["DEELETION"] = "0";
                            }
                            db5 = fgen.make_double(dr1["DEP_BF"].ToString().Trim());  //1
                            db6 = fgen.make_double(dr1["CURR_DEP"].ToString().Trim()); ///2
                            db7 = fgen.make_double(dr1["DEELETION"].ToString().Trim());  ///3
                            dr1["TOT_DEP"] = (db5 + db6) - db7;
                            db11 = fgen.make_double(dr1["TOTAL_COST"].ToString().Trim()) - fgen.make_double(dr1["TOT_DEP"].ToString().Trim());
                            if (db11 < 0)
                            {
                                dr1["WDV_CURR_YR"] = "0";
                            }
                            else
                            {
                                dr1["WDV_CURR_YR"] = fgen.make_double(dr1["TOTAL_COST"].ToString().Trim()) - fgen.make_double(dr1["TOT_DEP"].ToString().Trim());
                            }
                            db10 = db - db5;
                            if (db10 < 0)
                            {
                                dr1["WDV_PREV_YR"] = "0";
                            }
                            else
                            {
                                dr1["WDV_PREV_YR"] = db - db5;
                            }
                            if (fgen.make_double(dr1["WDV_CURR_YR"].ToString().Trim()) != 0 || fgen.make_double(dr1["WDV_PREV_YR"].ToString().Trim()) != 0)
                            {
                                ph_tbl.Rows.Add(dr1);
                            }
                        }
                    }
                }
                #endregion

                #region for dep summary
                dtm = new DataTable();
                dtm.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
                dtm.Columns.Add(new DataColumn("todt", typeof(DateTime)));
                dtm.Columns.Add(new DataColumn("header", typeof(string)));
                dtm.Columns.Add(new DataColumn("ASSET_DEP", typeof(string)));//m
                dtm.Columns.Add(new DataColumn("instdt", typeof(string)));
                dtm.Columns.Add(new DataColumn("grpcode", typeof(string)));
                dtm.Columns.Add(new DataColumn("grpname", typeof(string)));
                dtm.Columns.Add(new DataColumn("MBR", typeof(string)));
                dtm.Columns.Add(new DataColumn("ASSET_CODE", typeof(string)));//m
                dtm.Columns.Add(new DataColumn("ASSET_Name", typeof(string)));//m
                dtm.Columns.Add(new DataColumn("TOTAL_COST_BF", typeof(double)));
                dtm.Columns.Add(new DataColumn("CURR_ADD", typeof(double)));
                dtm.Columns.Add(new DataColumn("SALE", typeof(double)));
                dtm.Columns.Add(new DataColumn("TOTAL_COST", typeof(double)));
                dtm.Columns.Add(new DataColumn("DEP_BF", typeof(double)));//op bal in this
                dtm.Columns.Add(new DataColumn("CURR_DEP", typeof(double)));
                dtm.Columns.Add(new DataColumn("DEELETION", typeof(double)));//del during yr
                dtm.Columns.Add(new DataColumn("TOT_DEP", typeof(double)));
                dtm.Columns.Add(new DataColumn("WDV_CURR_YR", typeof(double)));
                dtm.Columns.Add(new DataColumn("WDV_PREV_YR", typeof(double)));
                if (ph_tbl.Rows.Count > 0)
                {
                    DataView view1 = new DataView(ph_tbl);
                    DataTable dtdrsim = new DataTable();
                    dtdrsim = view1.ToTable(true, "grpcode"); //MAIN                  
                    foreach (DataRow dr0 in dtdrsim.Rows)
                    {
                        DataView viewim = new DataView(ph_tbl, "grpcode='" + dr0["grpcode"] + "'", "", DataViewRowState.CurrentRows);
                        dt4 = viewim.ToTable();
                        dr1 = dtm.NewRow();
                        mq1 = ""; db = 0; db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0; db7 = 0; db8 = 0; db9 = 0; db10 = 0; db11 = 0; db12 = 0; db13 = 0;
                        for (int i = 0; i < dt4.Rows.Count; i++)
                        {
                            dr1["fromdt"] = fromdt;
                            dr1["todt"] = todt;
                            dr1["header"] = header_n;
                            dr1["grpcode"] = dr0["grpcode"].ToString().Trim();
                            dr1["grpname"] = dt4.Rows[i]["grpname"].ToString().Trim();
                            dr1["MBR"] = dt4.Rows[i]["MBR"].ToString().Trim();
                            db += fgen.make_double(dt4.Rows[i]["TOTAL_COST_BF"].ToString().Trim());
                            dr1["TOTAL_COST_BF"] = db;
                            db1 += fgen.make_double(dt4.Rows[i]["CURR_ADD"].ToString().Trim());
                            dr1["CURR_ADD"] = db1;
                            db2 += fgen.make_double(dt4.Rows[i]["SALE"].ToString().Trim());
                            dr1["SALE"] = db2;
                            db3 += fgen.make_double(dt4.Rows[i]["TOTAL_COST"].ToString().Trim());
                            dr1["TOTAL_COST"] = db3;
                            db4 += fgen.make_double(dt4.Rows[i]["DEP_BF"].ToString().Trim());
                            dr1["DEP_BF"] = db4;
                            db5 += fgen.make_double(dt4.Rows[i]["CURR_DEP"].ToString().Trim());
                            dr1["CURR_DEP"] = db5;
                            db6 += fgen.make_double(dt4.Rows[i]["DEELETION"].ToString().Trim());
                            dr1["DEELETION"] = db6;
                            db7 += fgen.make_double(dt4.Rows[i]["TOT_DEP"].ToString().Trim());
                            dr1["TOT_DEP"] = db7;
                            db8 += fgen.make_double(dt4.Rows[i]["WDV_CURR_YR"].ToString().Trim());
                            dr1["WDV_CURR_YR"] = db8;
                            db9 += fgen.make_double(dt4.Rows[i]["WDV_PREV_YR"].ToString().Trim());
                            dr1["WDV_PREV_YR"] = db9;
                        }
                        dtm.Rows.Add(dr1);
                    }
                }
                #endregion
                if (dtm.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dtm.TableName = "Prepcur";
                    dsRep.Tables.Add(dtm);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "depr_sum_grp", "depr_sum_grp", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70414":
                #region Fixed Asset Register
                header_n = "Fixed Asset Ledger";
                ph_tbl = new DataTable();
                ph_tbl.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("todt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("header", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("sno", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("instdt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("image", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("saledt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("branchcd", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("vchnum", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grpcode", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grp", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("acode", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("assetname", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("assetid", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("locn", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("LOC_NAME", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("date", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("fin_yr", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("inv_val", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("c_duty_frgt", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("instal_cost", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("oth_chgs", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("tot_cost", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("dep_for_yr", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("tot_dep", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("wdv_Amt", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("sale", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("P_L", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("rmk", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("op_dep", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("life", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("Depr", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("DeprDays", typeof(double)));

                mq4 = System.DateTime.Now.Date.ToString("dd/MM/yyyy");
                param = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PARAMS AS params FROM CONTROLS WHERE ID='R02'", "params");
                dt = new DataTable(); dt3 = new DataTable();
                // SQuery = "select distinct a.pur_entry,a.branchcd,a.pur_entrydt,a.yr,a.instdt,a.sale_dt,a.grpcode,a.grp,a.acode,a.assetid,a.assetname,a.basiccost,a.INSTALL_COST,a.CUSTOM_DUTY,a.OTHER_CHRGS, a.original_cost,a.op_dep,a.dep,a.sale,a.ctr from (select '1' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,null as sale_dt,trim(grpcode) as grpcode,trim(grp) as grp,trim(acode) as acode,trim(assetid) as assetid,trim(assetname) as assetname,basiccost,INSTALL_COST,CUSTOM_DUTY,OTHER_CHRGS, original_cost,op_dep, 0 as dep, 0 as sale from wb_fa_pur  where branchcd='" + frm_mbr + "' and type='10' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy')  union all select '2' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, cramt as dep, 0 as sale from wb_fa_vch  where branchcd='" + frm_mbr + "' and (type='30' or type='40') and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  union all  select '3' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,sale_dt as sale_dt, trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF),0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, 0 as dep, salevalue as sale from wb_fa_vch  where branchcd='" + frm_mbr + "' and type='20' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and to_date(sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') ) a order by a.grpcode,a.acode, a.ctr ";// where a.acode in  ('000007','000001','000011')
                //SQuery = "select distinct a.pur_entry,a.branchcd,a.pur_entrydt,a.yr,a.instdt,a.sale_dt,a.grpcode,a.grp,trim(a.grpcode)||trim(a.acode) as logo,a.acode,'Y' AS LOGO1,a.assetid,a.assetname,a.basiccost,a.INSTALL_COST,a.CUSTOM_DUTY,a.OTHER_CHRGS, a.original_cost,a.op_dep,a.dep,a.sale,a.ctr,a.imagef,a.imagepath  from (select '1' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,null as sale_dt,trim(grpcode) as grpcode,trim(grp) as grp,trim(acode) as acode,trim(assetid) as assetid,trim(assetname) as assetname,basiccost,INSTALL_COST,CUSTOM_DUTY,OTHER_CHRGS, original_cost,op_dep, 0 as dep, 0 as sale,imagef,imagepath from wb_fa_pur  where branchcd='" + frm_mbr + "' and type='10' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy')  union all select '2' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath from wb_fa_vch  where branchcd='" + frm_mbr + "' and (type='30' or type='40') and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  union all  select '3' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,sale_dt as sale_dt, trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF),0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, 0 as dep, salevalue as sale,null as imagef,null as imagepath from wb_fa_vch  where branchcd='" + frm_mbr + "' and type='20' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and to_date(sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') ) a /*where a.acode in ('000548','000557')*/ order  by a.grpcode,a.acode, a.ctr  ";// where a.acode in  ('000007','000001','000011') //runing qry..in this,not locn field only

                //  SQuery = "select distinct a.pur_entry,a.branchcd,a.pur_entrydt,a.yr,a.instdt,a.sale_dt,a.grpcode,a.grp,trim(a.grpcode)||trim(a.acode) as logo,a.acode,'Y' AS LOGO1,a.assetid,a.assetname,a.basiccost,a.INSTALL_COST,a.CUSTOM_DUTY,a.OTHER_CHRGS, a.original_cost,a.op_dep,a.dep,a.sale,a.ctr,a.imagef,a.imagepath ,a.locn,a.life from (select '1' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,null as sale_dt,trim(grpcode) as grpcode,trim(grp) as grp,trim(acode) as acode,trim(assetid) as assetid,trim(assetname) as assetname,basiccost,INSTALL_COST,CUSTOM_DUTY,OTHER_CHRGS, original_cost,op_dep, 0 as dep, 0 as sale,imagef,imagepath,locn,life from wb_fa_pur  where branchcd='" + frm_mbr + "' and type='10' and vchdate>=to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy')  union all select '2' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life from wb_fa_vch  where branchcd='" + frm_mbr + "' and (type='30' or type='40') and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  union all  select '3' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,sale_dt as sale_dt, trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF),0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, 0 as dep, salevalue as sale,null as imagef,null as imagepath,null as locn,0 as life from wb_fa_vch  where branchcd='" + frm_mbr + "' and type='20' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and to_date(sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') ) a order by a.grpcode,a.acode, a.ctr "; //locn add in this qry
                SQuery = "select distinct a.pur_entry,a.branchcd,a.pur_entrydt,a.yr,a.instdt,a.sale_dt,a.grpcode,a.grp,trim(a.grpcode)||trim(a.acode) as logo,a.acode,'Y' AS LOGO1,a.assetid,a.assetname,a.basiccost,a.INSTALL_COST,a.CUSTOM_DUTY,a.OTHER_CHRGS, a.original_cost,a.op_dep,a.dep,a.sale,a.ctr,a.imagef,a.imagepath ,a.locn,a.life,a.vdd,a.depr,a.deprdays from (select '1' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,null as sale_dt,trim(grpcode) as grpcode,trim(grp) as grp,trim(acode) as acode,trim(assetid) as assetid,trim(assetname) as assetname,basiccost,INSTALL_COST,CUSTOM_DUTY,OTHER_CHRGS, original_cost,op_dep, 0 as dep, 0 as sale,imagef,imagepath,locn,life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_pur  where branchcd='" + frm_mbr + "' and type='10' and vchdate>=to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy')  union all select '3' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,depr,deprdays from wb_fa_vch  where branchcd='" + frm_mbr + "' and (type='30' or type='40') and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  union all  select '4' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,sale_dt as sale_dt, trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF),0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, 0 as dep, salevalue as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_vch  where branchcd='" + frm_mbr + "' and type='20' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and to_date(sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') union all select '2' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, dramt as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_vch  where branchcd='" + frm_mbr + "' and type='50' and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')) a order by a.grpcode,a.acode,a.vdd, a.ctr "; //locn add in this qry//real qry
                SQuery = "select distinct a.pur_entry,a.branchcd,a.pur_entrydt,a.yr,a.instdt,a.sale_dt,a.grpcode,a.grp,trim(a.grpcode)||trim(a.acode) as logo,a.acode,'Y' AS LOGO1,a.assetid,a.assetname,a.basiccost,a.INSTALL_COST,a.CUSTOM_DUTY,a.OTHER_CHRGS, a.original_cost,a.op_dep,a.dep,a.sale,a.ctr,a.imagef,a.imagepath ,a.locn,a.life,a.vdd,a.depr,a.deprdays from (select '1' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,null as sale_dt,trim(grpcode) as grpcode,trim(grp) as grp,trim(acode) as acode,trim(assetid) as assetid,trim(assetname) as assetname,basiccost,INSTALL_COST,CUSTOM_DUTY,OTHER_CHRGS, original_cost,op_dep, 0 as dep, 0 as sale,imagef,imagepath,locn,life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_pur  where " + branch_Cd + " and type='10' and vchdate>=to_date('" + param + "','dd/mm/yyyy') and instdt <= to_date('" + todt + "','dd/mm/yyyy')  union all select '3' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,depr,deprdays from wb_fa_vch  where " + branch_Cd + " and (type='30' or type='40') and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  union all  select '4' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,sale_dt as sale_dt, trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF),0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, 0 as dep, salevalue as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_vch  where " + branch_Cd + " and type='20' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and to_date(sale_dt,'dd/mm/yyyy') <= to_date('" + todt + "','dd/mm/yyyy') union all select '2' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, dramt as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_vch  where " + branch_Cd + " and type='50' and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')) a order by a.grpcode,a.branchcd,a.acode,a.vdd, a.ctr ";
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                mq10 = "select distinct TYPE1,NAME FROM typegrp  where id='FA'";
                dt5 = fgen.getdata(frm_qstr, frm_cocd, mq10);

                mq11 = "select distinct type1,name from typegrp where ID='LF'";
                dt6 = fgen.getdata(frm_qstr, frm_cocd, mq11);

                ph_tbl.Columns.Add("mLogo", typeof(System.Byte[]));
                if (dt.Rows.Count > 0)
                {
                    DataView viewn = new DataView(dt); //VIEW OF MAIN DT
                    dt2 = new DataTable();
                    dt2 = viewn.ToTable(true, "branchcd", "aCODE", "grpcode");
                    foreach (DataRow dr0 in dt2.Rows) //view wali main dt
                    {
                        DataView viewim = new DataView(dt, "branchcd='" + dr0["branchcd"].ToString().Trim() + "' and aCODE='" + dr0["aCODE"].ToString().Trim() + "' and grpcode='" + dr0["grpcode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        DataTable dticode = new DataTable();
                        dticode = viewim.ToTable();
                        db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0; db7 = 0; db8 = 0; db9 = 0; db10 = 0; m = 0; mq1 = ""; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = ""; mq6 = ""; mq7 = "";
                        year = "";
                        if (dticode.Rows.Count > 0)
                        {
                            #region
                            for (int i = 0; i < dticode.Rows.Count; i++)
                            {
                                db2 = 0; year = ""; mq1 = ""; mq2 = ""; mq4 = ""; mq5 = ""; mq6 = "";
                                dr1 = ph_tbl.NewRow();
                                dr1["fromdt"] = fromdt;
                                dr1["todt"] = todt;
                                dr1["header"] = header_n;
                                dr1["sno"] = i + 1;
                                dr1["branchcd"] = dticode.Rows[i]["branchcd"].ToString().Trim();
                                dr1["grpcode"] = dticode.Rows[i]["grpcode"].ToString().Trim();
                                mq5 = fgen.seek_iname_dt(dt5, "type1='" + dr1["grpcode"].ToString().Trim() + "'", "name");
                                if (mq5.Length > 1)
                                {
                                    dr1["grp"] = mq5;
                                }
                                else
                                {
                                    dr1["grp"] = "-";
                                }
                                dr1["op_dep"] = dticode.Rows[i]["op_Dep"].ToString().Trim();
                                dr1["life"] = dticode.Rows[i]["life"].ToString().Trim();
                                dr1["acode"] = dticode.Rows[i]["acode"].ToString().Trim();
                                dr1["image"] = dticode.Rows[i]["imagepath"].ToString().Trim();
                                // mq4 = fgen.seek_iname_dt(dt, "acode='" + dr1["acode"].ToString().Trim() + "' and grpcode='" + dr1["grpcode"].ToString().Trim() + "'", "imagepath");
                                mq4 = dr1["image"].ToString().Trim();
                                mq5 = dticode.Rows[i]["logo"].ToString().Trim();
                                dr1["instdt"] = dticode.Rows[i]["instdt"].ToString().Trim();
                                dr1["saledt"] = dticode.Rows[i]["sale_dt"].ToString().Trim();
                                dr1["vchnum"] = dticode.Rows[i]["pur_entry"].ToString().Trim();

                                dr1["assetname"] = dticode.Rows[i]["assetname"].ToString().Trim();
                                dr1["assetid"] = dticode.Rows[i]["assetid"].ToString().Trim();
                                dr1["locn"] = dticode.Rows[i]["locn"].ToString().Trim();
                                mq6 = fgen.seek_iname_dt(dt6, "type1='" + dr1["locn"].ToString().Trim() + "'", "name");
                                if (mq6.Length > 1)
                                {
                                    dr1["LOC_NAME"] = mq6;
                                }
                                else
                                {
                                    dr1["LOC_NAME"] = "-";
                                }

                                dr1["date"] = dticode.Rows[i]["pur_entrydt"].ToString().Trim();
                                mq1 = dr1["date"].ToString().Substring(3, 2);//for month
                                mq2 = dr1["date"].ToString().Substring(6, 4);//for year

                                if (Convert.ToInt32(mq1) <= 3)
                                {
                                    m = Convert.ToInt32(mq2) - 1;
                                    year = m + "-" + mq2.Substring(2, 2);
                                }
                                else
                                {
                                    m = Convert.ToInt32(mq2) + 1;
                                    year = mq2 + "-" + Convert.ToString(m).Substring(2, 2);
                                }
                                dr1["fin_yr"] = year;
                                dr1["inv_val"] = dticode.Rows[i]["basiccost"].ToString().Trim();
                                dr1["c_duty_frgt"] = dticode.Rows[i]["CUSTOM_DUTY"].ToString().Trim();
                                dr1["instal_cost"] = dticode.Rows[i]["INSTALL_COST"].ToString().Trim();
                                dr1["oth_chgs"] = dticode.Rows[i]["OTHER_CHRGS"].ToString().Trim();
                                if (dticode.Rows[i]["ctr"].ToString().Trim() == "2")//type =50
                                {
                                    if (fgen.make_double(dticode.Rows[i]["original_cost"].ToString().Trim()) > 0)
                                    {
                                        dr1["tot_cost"] = dticode.Rows[i]["original_cost"].ToString().Trim();//ASSUME A
                                    }
                                    else
                                    {
                                        dr1["tot_cost"] = "-" + dticode.Rows[i]["dep"].ToString().Trim();//ASSUME A
                                    }
                                    dr1["dep_for_yr"] = 0; // ASSUME B
                                }
                                else
                                {
                                    dr1["tot_cost"] = dticode.Rows[i]["original_cost"].ToString().Trim();//ASSUME A
                                    dr1["dep_for_yr"] = dticode.Rows[i]["dep"].ToString().Trim(); // ASSUME B
                                }
                                //========================================================================
                                if (i == 0)
                                {
                                    db3 = fgen.make_double(dr1["dep_for_yr"].ToString().Trim());
                                }
                                else
                                {
                                    db3 = fgen.make_double(dr1["dep_for_yr"].ToString().Trim()) + db3;
                                }
                                // dr1["tot_dep"] = db3 + fgen.make_double(dr1["op_dep"].ToString().Trim()); //old
                                dr1["tot_dep"] = fgen.make_double(dr1["dep_for_yr"].ToString().Trim()) + fgen.make_double(dr1["op_dep"].ToString().Trim());  //change as per mam 19-8-19
                                //========================================================================
                                if (i == 0)
                                {
                                    db4 = fgen.make_double(dr1["tot_cost"].ToString().Trim()) - fgen.make_double(dr1["tot_dep"].ToString().Trim());  //assume d......so d=a-c                               
                                }
                                else
                                {
                                    if (dticode.Rows[i]["ctr"].ToString().Trim() == "2")//type =50
                                    {
                                        db4 = (db4 + fgen.make_double(dr1["tot_cost"].ToString().Trim())) - fgen.make_double(dr1["dep_for_yr"].ToString().Trim());
                                    }
                                    else
                                    {
                                        db4 = db4 - fgen.make_double(dr1["dep_for_yr"].ToString().Trim());
                                    }
                                }
                                dr1["wdv_Amt"] = db4;

                                //assume d......so d=a-c
                                dr1["sale"] = fgen.make_double(dticode.Rows[i]["sale"].ToString().Trim());
                                if (fgen.make_double(dr1["sale"].ToString().Trim()) != 0)
                                {
                                    // dr1["P_L"] = db - fgen.make_double(dr1["wdv_Amt"].ToString().Trim()); ///sale-wdv                                                                                              
                                    dr1["P_L"] = fgen.make_double(dr1["sale"].ToString().Trim()) - db4; ///sale-wdv                           
                                }
                                else
                                {
                                    dr1["P_L"] = 0;
                                }
                                dr1["Depr"] = dticode.Rows[i]["depr"].ToString().Trim();
                                dr1["DeprDays"] = dticode.Rows[i]["deprdays"].ToString().Trim();

                                if (mq4 != "")
                                {
                                    fpath = mq4;
                                    FilStr = new FileStream(fpath, FileMode.Open);
                                    BinRed = new BinaryReader(FilStr);
                                    dr1["mLogo"] = BinRed.ReadBytes((int)BinRed.BaseStream.Length);
                                    FilStr.Close();
                                    BinRed.Close();
                                }
                                if (fgen.make_double(dr1["tot_cost"].ToString().Trim()) != 0 || fgen.make_double(dr1["tot_dep"].ToString().Trim()) != 0 || fgen.make_double(dr1["sale"].ToString().Trim()) != 0 || fgen.make_double(dr1["Depr"].ToString().Trim()) != 0)
                                {
                                    ph_tbl.Rows.Add(dr1);
                                }
                            }
                            #endregion
                        }
                    }//CHECK IT
                }
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "FA_REG", "FA_REG", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70425":
                #region
                header_n = "Depreciation-Block Wise Summary-IT";
                ph_tbl = new DataTable();
                ph_tbl.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("todt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("header", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("block_code", typeof(string)));//1
                ph_tbl.Columns.Add(new DataColumn("block_name", typeof(string)));//2
                ph_tbl.Columns.Add(new DataColumn("dep_per", typeof(double))); //3
                //gross block
                ph_tbl.Columns.Add(new DataColumn("cost_bf", typeof(double)));//4
                ph_tbl.Columns.Add(new DataColumn("more_180", typeof(double)));//5
                ph_tbl.Columns.Add(new DataColumn("less_180", typeof(double)));//6               
                ph_tbl.Columns.Add(new DataColumn("sale", typeof(double)));//7
                ph_tbl.Columns.Add(new DataColumn("total_block_cf", typeof(double)));//8
                ///dep block
                ph_tbl.Columns.Add(new DataColumn("deper", typeof(double)));//9
                //net block
                ph_tbl.Columns.Add(new DataColumn("netblock", typeof(double)));//10


                string nrows = fgen.seek_iname(frm_qstr, frm_cocd, "select count(*) as tot from wb_fa_vch where type='80' and  vchdate =to_date('" + frm_cDt1 + "','dd/mm/yyyy')-1", "tot");
                if (fgen.make_int(nrows) > 0)
                {
                    SQuery = "SELECT TRIM(a.BLOCK) AS BLOCK, TRIM(B.NAME) as BLOCKNAME,(NVL(B.NUM4,0))+ (nvl(b.num5,0)) AS PERCENTAGE,  a.assetval1 AS opening,nvl(a.less180,0) AS LESS180,nvl(a.more180,0) AS MORE180, nvl(a.sale_it,0) as sale FROM WB_FA_vch a, typegrp b  WHERE a.branchcd='" + frm_mbr + "' and a.type='80' and a.vchdate=TO_dATE('" + frm_cDt1 + "','DD/MM/YYYY')-1 and b.id='DI' and trim(a.block)= trim(b.type1)  order by TRIM(B.NAME)";
                }
                else
                {
                    SQuery = "SELECT TRIM(C.BLOCK) AS BLOCK, TRIM(B.NAME) as BLOCKNAME,(NVL(B.NUM4,0))+ (nvl(b.num5,0)) AS PERCENTAGE, SUM(C.OPENING) as DRAMT,SUM(C.LESS180) AS LESS180 ,SUM(C.MORE180) AS MORE180,sum(C.sale) AS SALE FROM(SELECT TRIM(a.BLOCK) AS BLOCK, SUM(a.OPENING) aS opening,SUM(a.LESS180) aS LESS180,SUM(a.MORE180) AS MORE180,sum(a.sale) as sale  FROM ( SELECT TRIM(type1) AS BLOCK,num6 AS OPENING,0  AS LESS180,0 AS MORE180,0 as sale  FROM typegrp WHERE id='ZX' UNION ALL SELECT  TRIM(a.block) AS BLOCK, 0 AS OPENING,nvl(a.less180,0) AS LESS180,nvl(a.more180,0) AS MORE180, nvl(a.sale_it,0) as sale FROM wb_fa_vch a where a.branchcd='" + frm_mbr + "' and a.type='80' and a.vchdate " + DateRange + " )a  group by TRIM(A.BLOCK)) C, TYPEGRP B WHERE TRIM(C.BLOCK)= TRIM(B.TYPE1) AND B.ID='DI' group by TRIM(C.BLOCK), TRIM(B.NAME),(NVL(B.NUM4,0))+ (nvl(b.num5,0)) order by TRIM(B.NAME)";
                }
                dt = new DataTable(); dt1 = new DataTable(); dt2 = new DataTable();
                SQuery = "select trim(a.branchcd) as branchcd,a.type,a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,a.depr,a.block as code,b.name as block_name,nvl(a.dramt,0) as drmt,nvl(a.cramt,0) as crmt,nvl(a.more180,0) as more_180,nvl(a.less180,0) as less_180,nvl(sale_it,0) as sale_it ,(b.num4+b.num5) as dep_per,(a.dramt-a.cramt) as op,b.num6 as op1 from wb_fa_vch A,TYPEGRP B where trim(a.branchcd)||trim(a.block)=trim(b.branchcd)||trim(b.type1) and b.id='ZX' and a.branchcd='" + frm_mbr + "' and  a.type='80' and a.vchdate = to_date('" + frm_cDt1 + "','dd/MM/yyyy')-1  and  a.vchdate>to_Date('01/04/2018','dd/mm/yyyy')";
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery); //main dt for loop
                mq0 = fgen.seek_iname(frm_qstr, frm_cocd, "select to_date('" + fromdt + "','dd/mm/yyyy')-1 as dd from dual", "dd");
                mq1 = Convert.ToDateTime(mq0).ToString("dd/MM/yyyy");
                SQuery = "select (dramt-cramt) as op,block,branchcd from wb_fa_vch where branchcd='" + frm_mbr + "' and type='80' and to_char(vchdate,'dd/mm/yyyy')='" + mq1 + "'";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    mq2 = ""; db = 0; db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0;
                    dr1 = ph_tbl.NewRow();
                    dr1["fromdt"] = Convert.ToDateTime(fromdt).ToString("dd/MM/yyyy");
                    dr1["todt"] = Convert.ToDateTime(todt).ToString("dd/MM/yyyy");
                    dr1["header"] = header_n;
                    dr1["block_code"] = dt.Rows[i]["code"].ToString().Trim();
                    dr1["block_name"] = dt.Rows[i]["block_name"].ToString().Trim();
                    dr1["dep_per"] = fgen.make_double(dt.Rows[i]["dep_per"].ToString().Trim());
                    ///=========agar fromdt se one day less krne par jo date aati h or us date pr wb_fa_vch se dramt-crmat val aayegi else typegrp se num6 ki value aayegi
                    db = fgen.make_double(fgen.seek_iname_dt(dt1, "branchcd='" + dt.Rows[i]["branchcd"].ToString().Trim() + "' and block='" + dr1["block_code"].ToString().Trim() + "'", "op"));
                    if (db != 0)
                    {
                        if (db > 0)
                        {
                            dr1["cost_bf"] = db;
                        }
                        else
                        {
                            dr1["cost_bf"] = 0;
                        }
                    }
                    else
                    {
                        if (fgen.make_double(dt.Rows[i]["op1"].ToString().Trim()) > 0)
                        {
                            dr1["cost_bf"] = fgen.make_double(dt.Rows[i]["op1"].ToString().Trim());
                        }
                        else
                        {
                            dr1["cost_bf"] = 0;
                        }
                    }
                    //===================
                    db1 = fgen.make_double(dr1["cost_bf"].ToString().Trim());//4
                    dr1["less_180"] = fgen.make_double(dt.Rows[i]["less_180"].ToString().Trim());
                    db2 = fgen.make_double(dt.Rows[i]["less_180"].ToString().Trim());//5
                    dr1["more_180"] = fgen.make_double(dt.Rows[i]["more_180"].ToString().Trim());
                    db3 = fgen.make_double(dt.Rows[i]["more_180"].ToString().Trim());//6
                    dr1["sale"] = fgen.make_double(dt.Rows[i]["sale_it"].ToString().Trim());
                    db4 = fgen.make_double(dt.Rows[i]["sale_it"].ToString().Trim());//7
                    db5 = (db1 + db2 + db3) - db4;
                    dr1["total_block_cf"] = db5;
                    dr1["deper"] = fgen.make_double(dt.Rows[i]["depr"].ToString().Trim());
                    dr1["netblock"] = db5 - fgen.make_double(dr1["deper"].ToString().Trim());
                    ph_tbl.Rows.Add(dr1);
                }
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "depr_block_smry_IT", "depr_block_smry_IT", dsRep, "");
                }
                #endregion
                break;

            case "F70442":
                #region Fixed Asset Register
                header_n = "FA WDV Ledger";
                ph_tbl = new DataTable();
                ph_tbl.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("todt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("header", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("sno", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("instdt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("image", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("saledt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("branchcd", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("vchnum", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grpcode", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grp", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("acode", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("assetname", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("assetid", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("locn", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("LOC_NAME", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("date", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("fin_yr", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("inv_val", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("c_duty_frgt", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("instal_cost", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("oth_chgs", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("tot_cost", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("dep_for_yr", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("tot_dep", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("wdv_Amt", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("sale", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("P_L", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("rmk", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("op_dep", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("life", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("Depr", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("DeprDays", typeof(double)));

                mq4 = System.DateTime.Now.Date.ToString("dd/MM/yyyy");
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL4"); //fstr
                param = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PARAMS AS params FROM CONTROLS WHERE ID='R02'", "params");
                dt = new DataTable(); dt3 = new DataTable();
                // SQuery = "select distinct a.pur_entry,a.branchcd,a.pur_entrydt,a.yr,a.instdt,a.sale_dt,a.grpcode,a.grp,a.acode,a.assetid,a.assetname,a.basiccost,a.INSTALL_COST,a.CUSTOM_DUTY,a.OTHER_CHRGS, a.original_cost,a.op_dep,a.dep,a.sale,a.ctr from (select '1' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,null as sale_dt,trim(grpcode) as grpcode,trim(grp) as grp,trim(acode) as acode,trim(assetid) as assetid,trim(assetname) as assetname,basiccost,INSTALL_COST,CUSTOM_DUTY,OTHER_CHRGS, original_cost,op_dep, 0 as dep, 0 as sale from wb_fa_pur  where branchcd='" + frm_mbr + "' and type='10' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy')  union all select '2' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, cramt as dep, 0 as sale from wb_fa_vch  where branchcd='" + frm_mbr + "' and (type='30' or type='40') and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  union all  select '3' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,sale_dt as sale_dt, trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF),0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, 0 as dep, salevalue as sale from wb_fa_vch  where branchcd='" + frm_mbr + "' and type='20' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and to_date(sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') ) a order by a.grpcode,a.acode, a.ctr ";// where a.acode in  ('000007','000001','000011')
                //SQuery = "select distinct a.pur_entry,a.branchcd,a.pur_entrydt,a.yr,a.instdt,a.sale_dt,a.grpcode,a.grp,trim(a.grpcode)||trim(a.acode) as logo,a.acode,'Y' AS LOGO1,a.assetid,a.assetname,a.basiccost,a.INSTALL_COST,a.CUSTOM_DUTY,a.OTHER_CHRGS, a.original_cost,a.op_dep,a.dep,a.sale,a.ctr,a.imagef,a.imagepath  from (select '1' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,null as sale_dt,trim(grpcode) as grpcode,trim(grp) as grp,trim(acode) as acode,trim(assetid) as assetid,trim(assetname) as assetname,basiccost,INSTALL_COST,CUSTOM_DUTY,OTHER_CHRGS, original_cost,op_dep, 0 as dep, 0 as sale,imagef,imagepath from wb_fa_pur  where branchcd='" + frm_mbr + "' and type='10' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy')  union all select '2' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath from wb_fa_vch  where branchcd='" + frm_mbr + "' and (type='30' or type='40') and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  union all  select '3' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,sale_dt as sale_dt, trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF),0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, 0 as dep, salevalue as sale,null as imagef,null as imagepath from wb_fa_vch  where branchcd='" + frm_mbr + "' and type='20' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and to_date(sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') ) a /*where a.acode in ('000548','000557')*/ order  by a.grpcode,a.acode, a.ctr  ";// where a.acode in  ('000007','000001','000011') //runing qry..in this,not locn field only

                //  SQuery = "select distinct a.pur_entry,a.branchcd,a.pur_entrydt,a.yr,a.instdt,a.sale_dt,a.grpcode,a.grp,trim(a.grpcode)||trim(a.acode) as logo,a.acode,'Y' AS LOGO1,a.assetid,a.assetname,a.basiccost,a.INSTALL_COST,a.CUSTOM_DUTY,a.OTHER_CHRGS, a.original_cost,a.op_dep,a.dep,a.sale,a.ctr,a.imagef,a.imagepath ,a.locn,a.life from (select '1' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,null as sale_dt,trim(grpcode) as grpcode,trim(grp) as grp,trim(acode) as acode,trim(assetid) as assetid,trim(assetname) as assetname,basiccost,INSTALL_COST,CUSTOM_DUTY,OTHER_CHRGS, original_cost,op_dep, 0 as dep, 0 as sale,imagef,imagepath,locn,life from wb_fa_pur  where branchcd='" + frm_mbr + "' and type='10' and vchdate>=to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy')  union all select '2' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life from wb_fa_vch  where branchcd='" + frm_mbr + "' and (type='30' or type='40') and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  union all  select '3' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(vchdate,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,sale_dt as sale_dt, trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF),0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, 0 as dep, salevalue as sale,null as imagef,null as imagepath,null as locn,0 as life from wb_fa_vch  where branchcd='" + frm_mbr + "' and type='20' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and to_date(sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') ) a order by a.grpcode,a.acode, a.ctr "; //locn add in this qry
                SQuery = "select distinct a.pur_entry,a.branchcd,a.pur_entrydt,a.yr,a.instdt,a.sale_dt,a.grpcode,a.grp,trim(a.grpcode)||trim(a.acode) as logo,a.acode,'Y' AS LOGO1,a.assetid,a.assetname,a.basiccost,a.INSTALL_COST,a.CUSTOM_DUTY,a.OTHER_CHRGS, a.original_cost,a.op_dep,a.dep,a.sale,a.ctr,a.imagef,a.imagepath ,a.locn,a.life,a.vdd,a.depr,a.deprdays from (select '1' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,null as sale_dt,trim(grpcode) as grpcode,trim(grp) as grp,trim(acode) as acode,trim(assetid) as assetid,trim(assetname) as assetname,basiccost,INSTALL_COST,CUSTOM_DUTY,OTHER_CHRGS, original_cost,op_dep, 0 as dep, 0 as sale,imagef,imagepath,locn,life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_pur  where branchcd='" + frm_mbr + "' and type='10' and vchdate>=to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy')  union all select '3' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,depr,deprdays from wb_fa_vch  where branchcd='" + frm_mbr + "' and (type='30' or type='40') and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  union all  select '4' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,sale_dt as sale_dt, trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF),0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, 0 as dep, salevalue as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_vch  where branchcd='" + frm_mbr + "' and type='20' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and to_date(sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') union all select '2' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, dramt as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_vch  where branchcd='" + frm_mbr + "' and type='50' and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')) a order by a.grpcode,a.acode,a.vdd, a.ctr "; //locn add in this qry//real qry
                SQuery = "select distinct a.pur_entry,a.branchcd,a.pur_entrydt,a.yr,a.instdt,a.sale_dt,a.grpcode,a.grp,trim(a.grpcode)||trim(a.acode) as logo,a.acode,'Y' AS LOGO1,a.assetid,a.assetname,a.basiccost,a.INSTALL_COST,a.CUSTOM_DUTY,a.OTHER_CHRGS, a.original_cost,a.op_dep,a.dep,a.sale,a.ctr,a.imagef,a.imagepath ,a.locn,a.life,a.vdd,a.depr,a.deprdays from (select '1' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,null as sale_dt,trim(grpcode) as grpcode,trim(grp) as grp,trim(acode) as acode,trim(assetid) as assetid,trim(assetname) as assetname,basiccost,INSTALL_COST,CUSTOM_DUTY,OTHER_CHRGS, original_cost,op_dep, 0 as dep, 0 as sale,imagef,imagepath,locn,life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_pur  where " + branch_Cd + " and type='10' and vchdate>=to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy')  union all select '3' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,depr,deprdays from wb_fa_vch  where " + branch_Cd + " and (type='30' or type='40') and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  union all  select '4' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,sale_dt as sale_dt, trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF),0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, 0 as dep, salevalue as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_vch  where " + branch_Cd + " and type='20' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and to_date(sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') union all select '2' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, dramt as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_vch  where " + branch_Cd + " and type='50' and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')) a order by a.grpcode,a.branchcd,a.acode,a.vdd, a.ctr ";
                SQuery = "select distinct a.pur_entry,a.branchcd,a.pur_entrydt,a.yr,a.instdt,a.sale_dt,a.grpcode,a.grp,trim(a.grpcode)||trim(a.acode) as logo,a.acode,'Y' AS LOGO1,a.assetid,a.assetname,a.basiccost,a.INSTALL_COST,a.CUSTOM_DUTY,a.OTHER_CHRGS, a.original_cost,a.op_dep,a.dep,a.sale,a.ctr,a.imagef,a.imagepath ,a.locn,a.life,a.vdd,a.depr,a.deprdays from (select '1' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,null as sale_dt,trim(grpcode) as grpcode,trim(grp) as grp,trim(acode) as acode,trim(assetid) as assetid,trim(assetname) as assetname,basiccost,INSTALL_COST,CUSTOM_DUTY,OTHER_CHRGS, original_cost,op_dep, 0 as dep, 0 as sale,imagef,imagepath,locn,life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_pur  where " + branch_Cd + " and type='10' and vchdate>=to_date('" + param + "','dd/mm/yyyy') and instdt < to_date('" + todt + "','dd/mm/yyyy')  union all select '3' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,depr,deprdays from wb_fa_vch  where " + branch_Cd + " and (type='30' or type='40') and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')  union all  select '4' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt,sale_dt as sale_dt, trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF),0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, 0 as original_cost,0 as op_dep, 0 as dep, salevalue as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_vch  where " + branch_Cd + " and type='20' and vchdate>= to_date('" + param + "','dd/mm/yyyy') and to_date(sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') union all select '2' as ctr, trim(branchcd) as branchcd, trim(vchnum) as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt,to_char(instdt,'yyyymm') as yr, to_char(instdt,'dd/mm/yyyy') as instdt, null as sale_dt,trim(grpcode) as grpcode,null as grp,trim(acode) as acode,null as assetid,trim(MRR_REF) as mrr_ref,0 AS basiccost,0 as INSTALL_COST,0 as CUSTOM_DUTY,0 as OTHER_CHRGS, dramt as original_cost,0 as op_dep, cramt as dep, 0 as sale,null as imagef,null as imagepath,null as locn,0 as life,to_char(vchdate,'yyyymmdd') as vdd,0 as depr,0 as deprdays from wb_fa_vch  where " + branch_Cd + " and type='50' and vchdate between to_date('" + param + "','dd/mm/yyyy') and to_date('" + todt + "','dd/mm/yyyy')) a where trim(a.branchcd)||trim(a.acode)='" + mq0 + "' order by a.grpcode,a.branchcd,a.acode,a.vdd, a.ctr ";
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                mq10 = "select distinct TYPE1,NAME FROM typegrp  where id='FA'";
                dt5 = fgen.getdata(frm_qstr, frm_cocd, mq10);

                mq11 = "select distinct type1,name from typegrp where ID='LF'";
                dt6 = fgen.getdata(frm_qstr, frm_cocd, mq11);

                ph_tbl.Columns.Add("mLogo", typeof(System.Byte[]));
                if (dt.Rows.Count > 0)
                {
                    DataView viewn = new DataView(dt); //VIEW OF MAIN DT
                    dt2 = new DataTable();
                    dt2 = viewn.ToTable(true, "branchcd", "aCODE", "grpcode");
                    foreach (DataRow dr0 in dt2.Rows) //view wali main dt
                    {
                        mq10 = ""; mq11 = ""; mq12 = "";
                        DataView viewim = new DataView(dt, "branchcd='" + dr0["branchcd"].ToString().Trim() + "' and aCODE='" + dr0["aCODE"].ToString().Trim() + "' and grpcode='" + dr0["grpcode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        DataTable dticode = new DataTable();
                        dticode = viewim.ToTable();
                        db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0; db7 = 0; db8 = 0; db9 = 0; db10 = 0; m = 0; mq1 = ""; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = ""; mq6 = ""; mq7 = "";
                        year = "";
                        mq10 = dr0["Branchcd"].ToString().Trim();
                        mq11 = dr0["Acode"].ToString().Trim();
                        mq12 = dr0["grpcode"].ToString().Trim();
                        if (dticode.Rows.Count > 0)
                        {
                            for (int i = 0; i < dticode.Rows.Count; i++)
                            {
                                #region
                                db2 = 0; year = ""; mq1 = ""; mq2 = ""; mq4 = ""; mq5 = ""; mq6 = "";
                                dr1 = ph_tbl.NewRow();
                                dr1["fromdt"] = fromdt;
                                dr1["todt"] = todt;
                                dr1["header"] = header_n;
                                dr1["sno"] = i + 1;
                                dr1["branchcd"] = dticode.Rows[i]["branchcd"].ToString().Trim();
                                dr1["grpcode"] = dticode.Rows[i]["grpcode"].ToString().Trim();
                                mq5 = fgen.seek_iname_dt(dt5, "type1='" + dr1["grpcode"].ToString().Trim() + "'", "name");
                                if (mq5.Length > 1)
                                {
                                    dr1["grp"] = mq5;
                                }
                                else
                                {
                                    dr1["grp"] = "-";
                                }
                                dr1["op_dep"] = dticode.Rows[i]["op_Dep"].ToString().Trim();
                                dr1["life"] = dticode.Rows[i]["life"].ToString().Trim();
                                dr1["acode"] = dticode.Rows[i]["acode"].ToString().Trim();
                                dr1["image"] = dticode.Rows[i]["imagepath"].ToString().Trim();
                                // mq4 = fgen.seek_iname_dt(dt, "acode='" + dr1["acode"].ToString().Trim() + "' and grpcode='" + dr1["grpcode"].ToString().Trim() + "'", "imagepath");
                                mq4 = dr1["image"].ToString().Trim();
                                mq5 = dticode.Rows[i]["logo"].ToString().Trim();
                                dr1["instdt"] = dticode.Rows[i]["instdt"].ToString().Trim();
                                dr1["saledt"] = dticode.Rows[i]["sale_dt"].ToString().Trim();
                                dr1["vchnum"] = dticode.Rows[i]["pur_entry"].ToString().Trim();

                                dr1["assetname"] = dticode.Rows[i]["assetname"].ToString().Trim();
                                dr1["assetid"] = dticode.Rows[i]["assetid"].ToString().Trim();
                                dr1["locn"] = dticode.Rows[i]["locn"].ToString().Trim();
                                mq6 = fgen.seek_iname_dt(dt6, "type1='" + dr1["locn"].ToString().Trim() + "'", "name");
                                if (mq6.Length > 1)
                                {
                                    dr1["LOC_NAME"] = mq6;
                                }
                                else
                                {
                                    dr1["LOC_NAME"] = "-";
                                }

                                dr1["date"] = dticode.Rows[i]["pur_entrydt"].ToString().Trim();
                                mq1 = dr1["date"].ToString().Substring(3, 2);//for month
                                mq2 = dr1["date"].ToString().Substring(6, 4);//for year

                                if (Convert.ToInt32(mq1) <= 3)
                                {
                                    m = Convert.ToInt32(mq2) - 1;
                                    year = m + "-" + mq2.Substring(2, 2);
                                }
                                else
                                {
                                    m = Convert.ToInt32(mq2) + 1;
                                    year = mq2 + "-" + Convert.ToString(m).Substring(2, 2);
                                }
                                dr1["fin_yr"] = year;
                                dr1["inv_val"] = dticode.Rows[i]["basiccost"].ToString().Trim();
                                dr1["c_duty_frgt"] = dticode.Rows[i]["CUSTOM_DUTY"].ToString().Trim();
                                dr1["instal_cost"] = dticode.Rows[i]["INSTALL_COST"].ToString().Trim();
                                dr1["oth_chgs"] = dticode.Rows[i]["OTHER_CHRGS"].ToString().Trim();
                                if (dticode.Rows[i]["ctr"].ToString().Trim() == "4")//type =50
                                {
                                    if (fgen.make_double(dticode.Rows[i]["original_cost"].ToString().Trim()) > 0)
                                    {
                                        dr1["tot_cost"] = dticode.Rows[i]["original_cost"].ToString().Trim();//ASSUME A
                                    }
                                    else
                                    {
                                        dr1["tot_cost"] = "-" + dticode.Rows[i]["dep"].ToString().Trim();//ASSUME A
                                    }
                                    dr1["dep_for_yr"] = 0;
                                }
                                else
                                {
                                    dr1["tot_cost"] = dticode.Rows[i]["original_cost"].ToString().Trim();//ASSUME A
                                    dr1["dep_for_yr"] = dticode.Rows[i]["dep"].ToString().Trim(); // ASSUME B
                                }
                                //========================================================================
                                if (i == 0)
                                {
                                    db3 = fgen.make_double(dr1["dep_for_yr"].ToString().Trim());
                                }
                                else
                                {
                                    db3 = fgen.make_double(dr1["dep_for_yr"].ToString().Trim()) + db3;

                                }
                                //dr1["tot_dep"] = db3 + fgen.make_double(dr1["op_dep"].ToString().Trim());//old 
                                dr1["tot_dep"] = fgen.make_double(dr1["dep_for_yr"].ToString().Trim()) + fgen.make_double(dr1["op_dep"].ToString().Trim());                               ///new as per mayuri mam

                                //========================================================================
                                if (i == 0)
                                {
                                    db4 = fgen.make_double(dr1["tot_cost"].ToString().Trim()) - fgen.make_double(dr1["tot_dep"].ToString().Trim());  //assume d......so d=a-c                               
                                }
                                else
                                {
                                    if (dticode.Rows[i]["ctr"].ToString().Trim() == "4")//type =50
                                    {
                                        db4 = (db4 + fgen.make_double(dr1["tot_cost"].ToString().Trim())) - fgen.make_double(dr1["dep_for_yr"].ToString().Trim());
                                    }
                                    else
                                    {
                                        db4 = db4 - fgen.make_double(dr1["dep_for_yr"].ToString().Trim());
                                    }
                                }
                                dr1["wdv_Amt"] = db4;
                                //assume d......so d=a-c
                                dr1["sale"] = fgen.make_double(dticode.Rows[i]["sale"].ToString().Trim());
                                if (fgen.make_double(dr1["sale"].ToString().Trim()) != 0)
                                {
                                    dr1["P_L"] = db - fgen.make_double(dr1["wdv_Amt"].ToString().Trim()); ///sale-wdv                                                                                              
                                }
                                else
                                {
                                    dr1["P_L"] = 0;
                                }
                                dr1["Depr"] = dticode.Rows[i]["depr"].ToString().Trim();
                                dr1["DeprDays"] = dticode.Rows[i]["deprdays"].ToString().Trim();

                                if (mq4 != "")
                                {
                                    fpath = mq4;
                                    FilStr = new FileStream(fpath, FileMode.Open);
                                    BinRed = new BinaryReader(FilStr);
                                    dr1["mLogo"] = BinRed.ReadBytes((int)BinRed.BaseStream.Length);
                                    FilStr.Close();
                                    BinRed.Close();
                                }
                                if (fgen.make_double(dr1["tot_cost"].ToString().Trim()) != 0 || fgen.make_double(dr1["tot_dep"].ToString().Trim()) != 0)
                                {
                                    ph_tbl.Rows.Add(dr1);
                                }
                                #endregion
                            }
                            #region ///for wdv report add one row in last..new logic as per mam
                            mq0 = ""; mq1 = ""; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = ""; mq6 = ""; mq7 = ""; db4 = 0; db3 = 0;
                            db4 = fgen.make_double(ph_tbl.Rows[ph_tbl.Rows.Count - 1]["wdv_Amt"].ToString().Trim());
                            db3 = fgen.make_double(ph_tbl.Rows[ph_tbl.Rows.Count - 1]["op_Dep"].ToString().Trim());
                            cnt = Convert.ToInt32(ph_tbl.Rows[ph_tbl.Rows.Count - 1]["sno"].ToString().Trim());
                            mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL4"); //fstr
                            mq4 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL5"); //select date
                            if (mq0 == mq10 + mq11)
                            {
                                //======================for deprpday logic

                                mq1 = fgen.seek_iname(frm_qstr, frm_cocd, "select  deprpday  from wb_Fa_pur where type='10'  and  trim(branchcd)='" + mq10 + "' and trim(acode)='" + mq11 + "' and grpcode ='" + mq12 + "' and instdt < to_date('" + mq4 + "','dd/mm/yyyy')", "deprpday"); //TO_CHAR(VCHDATE,'DD/MM/YYYY')='22/07/2019'

                                mq2 = fgen.seek_iname(frm_qstr, frm_cocd, "select sum(deprdays) as depday from wb_fa_vch where trim(branchcd)='" + mq10 + "' and trim(acode)='" + mq11 + "' and grpcode ='" + mq12 + "' and type='50' and instdt < to_date('" + mq4 + "','dd/mm/yyyy')", "depday"); //TO_CHAR(VCHDATE,'DD/MM/YYYY')='22/07/2019'
                                ///=========================for dep for the year logic
                                mq3 = fgen.seek_iname(frm_qstr, frm_cocd, "select max(vchdate) as vchdate from wb_fa_vch where type='30' and  trim(branchcd)='" + mq10 + "' and trim(acode)='" + mq11 + "' and grpcode ='" + mq12 + "' and vchdate < to_date('" + mq4 + "','dd/mm/yyyy')", "vchdate");//TO_CHAR(VCHDATE,'DD/MM/YYYY')='22/07/2019'

                                mq5 = fgen.seek_iname(frm_qstr, frm_cocd, "select to_Char(instdt,'dd/mm/yyyy') as instdt from wb_fa_pur where type='10' and trim(branchcd)='" + mq10 + "' and trim(acode)='" + mq11 + "' and grpcode ='" + mq12 + "' and instdt < to_date('" + mq4 + "','dd/mm/yyyy')", "");//TO_CHAR(VCHDATE,'DD/MM/YYYY')='22/07/2019'
                                if (mq3.Length > 2)
                                {
                                    mq3 = Convert.ToDateTime(mq3).ToString("dd/MM/yyyy").Trim();
                                    mq6 = "select to_date('" + mq4 + "','dd/mm/yyyy')-to_date('" + mq3 + "','dd/mm/yyyy') as dd from dual";
                                }
                                else
                                {
                                    mq6 = "select to_date('" + mq4 + "','dd/mm/yyyy')-to_date('" + mq5 + "','dd/mm/yyyy') as dd from dual";
                                }
                                mq7 = fgen.seek_iname(frm_qstr, frm_cocd, mq6, "dd");

                                dr1 = ph_tbl.NewRow();
                                dr1["sno"] = cnt + 1;
                                dr1["branchcd"] = mq10;
                                dr1["grpcode"] = mq12;
                                dr1["acode"] = mq11;
                                dr1["instdt"] = mq4;
                                dr1["fin_yr"] = "-";
                                dr1["life"] = "0";
                                dr1["Depr"] = fgen.make_double(mq1) + fgen.make_double(mq2);
                                dr1["DeprDays"] = fgen.make_double(mq7);
                                dr1["dep_for_yr"] = fgen.make_double(dr1["Depr"].ToString().Trim()) * fgen.make_double(dr1["DeprDays"].ToString().Trim());
                                dr1["tot_dep"] = db3 + fgen.make_double(dr1["dep_for_yr"].ToString().Trim()); //op_Dep+depr_for_yr
                                dr1["wdv_Amt"] = db4 - fgen.make_double(dr1["dep_for_yr"].ToString().Trim());
                                ph_tbl.Rows.Add(dr1);
                                #endregion
                            }
                        }
                    }
                }
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "FA_REG", "FA_REG", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;



            case "F70416":
            case "F70417":
            case "F70418"://icon not showing for hppi..
                #region depreciation Report
                header_n = "Depreciation Chart";
                ph_tbl = new DataTable();
                ph_tbl.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("todt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("header", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("locn", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("dcode", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("BLOCK", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("mbr", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("ASSET_DEP", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("instdt", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grpcode", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("grpname", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("ASSET_CODE", typeof(string)));//m
                ph_tbl.Columns.Add(new DataColumn("ASSET_Name", typeof(string)));//m
                ph_tbl.Columns.Add(new DataColumn("USEFUL_LIFE", typeof(double)));//m
                ph_tbl.Columns.Add(new DataColumn("TOTAL_COST_BF", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("dep_Cal_prday", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("dep_pday", typeof(double)));//m
                ph_tbl.Columns.Add(new DataColumn("CURR_ADD", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("SALE", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("TOTAL_COST", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("DEP_BF", typeof(double)));//op bal in this
                ph_tbl.Columns.Add(new DataColumn("CURR_DEP", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("DEELETION", typeof(double)));//del during yr
                ph_tbl.Columns.Add(new DataColumn("TOT_DEP", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("WDV_CURR_YR", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("WDV_PREV_YR", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("day_percent", typeof(double)));

                param = "-";
                param = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PARAMS AS params FROM CONTROLS WHERE ID='R02'", "params");
                dt = new DataTable(); dt1 = new DataTable(); dt2 = new DataTable(); dt3 = new DataTable(); dt4 = new DataTable(); dt5 = new DataTable(); dt6 = new DataTable(); dt7 = new DataTable(); dt8 = new DataTable(); dt9 = new DataTable();

                #region
                mq0 = ""; mq1 = ""; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = "";
                mq0 = "select BRANCHCD,trim(branchcd)||trim(acode) as fstr,vchnum as pur_entry,to_char(vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(instdt,'dd/mm/yyyy') as instdt,type, grpcode,grp,acode,assetid,assetname,basiccost,op_dep ,life as totlife,deprpday,original_cost,TO_char(life_end,'dd/mm/yyyy') as life_End,nvl(dcode,'-') as dcode,nvl(locn,'-') as LOCN,nvl(BLOCK,'-') as BLOCK,(case when life!=0 then round(100/life,2) else 0 end) as day_percent from wb_fa_pur  where " + branch_Cd + " and type='10' and vchdate > to_date('" + param + "','dd/mm/yyyy') and instdt <= to_date('" + todt + "','dd/mm/yyyy') order by fstr";
                dt = fgen.getdata(frm_qstr, frm_cocd, mq0); //this is main dt and all asset is purchased in this table

                mq1 = "select a.branchcd,trim(a.branchcd)||trim(a.acode) as fstr,a.vchnum as pur_entry,to_char(a.vchdate,'dd/mm/yyyy') as pur_entrydt, to_char(a.instdt,'dd/mm/yyyy') as instdt,a.type,a.grpcode,a.grp,a.acode,a.assetid,a.assetname,a.basiccost,a.op_dep ,a.life as totlife,a.deprpday,a.original_cost,b.sale from wb_fa_pur a, (select branchcd,trim(acode) as acode,sum(pur) as pur,sum(dramt)-sum(cramt) as sale from(select branchcd,acode,sum(pur) as pur,0 as dramt,0 as cramt from (select a.branchcd,a.acode,1 as pur from wb_fa_pur a where a." + branch_Cd + " and a.type='10' and a.instdt< to_date('" + fromdt + "','dd/mm/yyyy') union all select a.branchcd,a.acode,-1 as pur from wb_fa_vch a where a." + branch_Cd + " and a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') <= to_date('" + fromdt + "','dd/mm/yyyy') and to_date(a.sale_dt,'dd/mm/yyyy') >= to_date('" + todt + "','dd/mm/yyyy')) group by branchcd,acode having sum(pur)>0 union all select a.branchcd,a.acode,0 as pur,dramt,cramt from wb_fa_vch a where a." + branch_Cd + " and a.type='50' and a.instdt < to_date('" + fromdt + "','dd/mm/yyyy')) group by branchcd,trim(acode)) b where a.branchcd||trim(A.acode)=b.branchcd||trim(B.acode)";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, mq1); //is dt se total cost bf ki value.....instdt>fromdt....logic for this

                mq2 = "select fstr as fstr,trim(acode) as acode, sum(original_cost) as original_cost, instdt from (select trim(branchcd)||trim(ACODE) as fstr,original_cost,to_char(instdt,'dd/mm/yyyy') as instdt,acode from wb_fa_pur where " + branch_Cd + " and type='10' and instdt>=to_DatE('" + fromdt + "','dd/mm/yyyy') and instdt<=to_DatE('" + todt + "','dd/mm/yyyy') union all select trim(branchcd)||trim(ACODE) as fstr,sum(dramt)-sum(cramt) as original_cost,to_char(fvchdate,'dd/mm/yyyy') as instdt,acode from wb_fa_vch where " + branch_Cd + " and type='50' and instdt " + xprdRange + " and fvchdate <= to_date('" + todt + "','dd/mm/yyyy') group by trim(branchcd)||trim(ACODE),to_char(fvchdate,'dd/mm/yyyy'),acode) group by fstr, instdt,trim(acode) order by acode,fstr";
                dt5 = fgen.getdata(frm_qstr, frm_cocd, mq2); //between current addition ki dt..if instdt>fromdt and instdt<todt...logic for this...

                mq3 = "SELECT branchcd,acode,trim(branchcd)||trim(acode) as fstr,sum(dramt) as sale,sum(cramt) as del_during_yr FROM WB_FA_VCH  WHERE " + branch_Cd + " AND TYPE='20' AND to_date(sale_dt,'dd/mm/yyyy') " + xprdRange + " group by acode,branchcd order by acode,fstr";
                dt2 = fgen.getdata(frm_qstr, frm_cocd, mq3);  //FOR 20 TYPE WB_FA_VCH DT

                mq4 = "select b.fstr, sum(a.cramt) as dep from wb_fa_vch a,(select a.fstr ,sum(a.ctr) from ( select branchcd||trim(acode) as fstr, 1 as ctr from wb_fa_pur where " + branch_Cd + " and type='10' and instdt <= to_date('" + todt + "','dd/mm/yyyy') union all  select branchcd||trim(acode) as fstr, -1 as ctr from wb_fa_vch where " + branch_Cd + " and type='20' and to_date(sale_dt,'dd/mm/yyyy')  between to_date('" + todt + "','dd/mm/yyyy') and to_date('" + fromdt + "','dd/mm/yyyy'))a group by a.fstr having sum(a.ctr) <>0)b where " + branch_Cd + " and a.type='30' and a.vchdate " + xprdRange + " and trim(b.fstr)=a.branchcd||trim(a.acode) group by b.fstr order by b.fstr";
                dt3 = fgen.getdata(frm_qstr, frm_cocd, mq4);  //FOR 30 TYPE WB_FA_VCH DT.......vchdate less than fromdt...logic

                mq5 = "SELECT a.branchcd,a.acode as acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.cramt) as crmt,depr as depr,sum(a.deprdays) as deprdays  FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE='30'  AND A.vchdate " + xprdRange + " group by a.acode,a.branchcd,depr order by fstr";
                dt6 = fgen.getdata(frm_qstr, frm_cocd, mq5);  //

                mq7 = "SELECT  a.branchcd, a.acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.depr_wbk) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='20' AND a.vchdate " + xprdRange + " group by a.acode,a.branchcd order by fstr";
                dt7 = fgen.getdata(frm_qstr, frm_cocd, mq7);  //FOR 20 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                mq8 = "SELECT a.branchcd,a.acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.cramt) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='30' AND a.vchdate<to_date('" + fromdt + "','dd/mm/yyyy') group by a.acode,a.branchcd order by fstr";
                dt8 = fgen.getdata(frm_qstr, frm_cocd, mq8);  //FOR 30 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                mq9 = "SELECT a.branchcd,a.acode,trim(a.branchcd)||trim(a.acode) as fstr,sum(a.depr_old) as crmt FROM WB_FA_VCH a  WHERE  a." + branch_Cd + " AND a.TYPE ='40' AND to_date(a.sale_dt,'dd/mm/yyyy') " + xprdRange + " group by a.branchcd,a.acode order by fstr";
                dt9 = fgen.getdata(frm_qstr, frm_cocd, mq7);  //FOR 20 TYPE WB_FA_VCH DT....SALEDT Between xprdrange

                mq10 = "select a.branchcd||trim(a.acode) as fstr,0 as pur,sum(a.dramt)-sum(a.cramt) as sale from wb_fa_vch a where a.branchcd not in ('DD','88') and ((a.type='30' and a.vchdate < to_date('" + fromdt + "','dd/mm/yyyy')) or ( a.type='50' and a.instdt < to_date('" + fromdt + "','dd/mm/yyyy')) or ( a.type='20' and to_date(a.sale_dt,'dd/mm/yyyy') < to_date('" + fromdt + "','dd/mm/yyyy'))) group by a.branchcd||trim(a.acode)";
                dt10 = fgen.getdata(frm_qstr, frm_cocd, mq10);

                mq11 = "select type1, name from typegrp where id='FA' and branchcd <> 'DD' ";
                dt11 = fgen.getdata(frm_qstr, frm_cocd, mq11);

                if (dt.Rows.Count > 0)
                {
                    DataView view1 = new DataView(dt);
                    DataTable dtdrsim = new DataTable();
                    dtdrsim = view1.ToTable(true, "FSTR"); //MAIN                  
                    foreach (DataRow dr0 in dtdrsim.Rows)
                    {
                        DataView viewim = new DataView(dt, "FSTR='" + dr0["FSTR"] + "'", "", DataViewRowState.CurrentRows);
                        dt4 = viewim.ToTable();
                        for (int i = 0; i < dt4.Rows.Count; i++)
                        {
                            mq6 = "";
                            mq1 = ""; db = 0; db1 = 0; db2 = 0; db6 = 0; db7 = 0; db8 = 0; db9 = 0; db10 = 0; db11 = 0; db12 = 0; rate = 0; mq2 = ""; mq3 = ""; mq4 = ""; mq5 = ""; mq8 = ""; mq9 = ""; m = 0; n = 0; cnt = 0;
                            dr1 = ph_tbl.NewRow();
                            dr1["fromdt"] = fromdt;
                            dr1["header"] = header_n;
                            dr1["todt"] = todt;
                            dr1["MBR"] = dt4.Rows[i]["BRANCHCD"].ToString().Trim(); ;
                            dr1["grpcode"] = dt4.Rows[i]["grpcode"].ToString().Trim();
                            dr1["grpname"] = fgen.seek_iname_dt(dt11, "type1='" + dt4.Rows[i]["grpcode"].ToString().Trim() + "'", "name");
                            dr1["ASSET_code"] = dt4.Rows[i]["acode"].ToString().Trim();
                            dr1["locn"] = dt4.Rows[i]["locn"].ToString().Trim();
                            dr1["dcode"] = dt4.Rows[i]["dcode"].ToString().Trim();
                            dr1["BLOCK"] = dt4.Rows[i]["BLOCK"].ToString().Trim();
                            // dr1["life_end"] = dt4.Rows[i]["life_End"].ToString().Trim();
                            dr1["instdt"] = dt4.Rows[i]["instdt"].ToString().Trim();
                            dr1["ASSET_Name"] = dt4.Rows[i]["assetname"].ToString().Trim();
                            dr1["USEFUL_LIFE"] = dt4.Rows[i]["totlife"].ToString().Trim();
                            //dr1["dep_Cal_prday"] = dt4.Rows[i]["deprpday"].ToString().Trim();
                            dr1["dep_Cal_prday"] = fgen.seek_iname_dt(dt6, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "depr");
                            //db8 = fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dr0["acode"].ToString().Trim() + "'", "original_cost"));
                            db8 = fgen.make_double(fgen.seek_iname_dt(dt1, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "original_cost")) + fgen.make_double(fgen.seek_iname_dt(dt10, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "sale"));
                            db9 = fgen.make_double(fgen.seek_iname_dt(dt8, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            dr1["TOTAL_COST_BF"] = db8;// -db9;  //original cost-dramt from sale in type 20 
                            //dr1["TOTAL_COST_BF"] = fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dr0["acode"].ToString().Trim() + "'", "original_cost"));
                            //dr1["dep_Cal_prday"] = fgen.make_double(fgen.seek_iname_dt(dt6, "acode='" + dr0["acode"].ToString().Trim() + "'", "depr"));
                            //===============agar mq12 me yes aaye to all entry as it as aayegi,,,,agar no aaye to only wahi entry show hogi jisme days ki value 0 se jyada hai
                            dr1["dep_pday"] = fgen.seek_iname_dt(dt6, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "deprdays");
                            dr1["day_percent"] = dt4.Rows[i]["day_percent"].ToString().Trim();
                            db12 = fgen.make_double(dr1["dep_pday"].ToString().Trim()); ///days ki value 
                            dr1["CURR_ADD"] = fgen.make_double(fgen.seek_iname_dt(dt5, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "original_cost"));
                            dr1["sale"] = fgen.make_double(fgen.seek_iname_dt(dt2, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "del_during_yr"));
                            db = fgen.make_double(dr1["TOTAL_COST_BF"].ToString().Trim());  //1
                            db1 = fgen.make_double(dr1["CURR_ADD"].ToString().Trim()); ///2
                            db2 = fgen.make_double(dr1["sale"].ToString().Trim());  ///3
                            dr1["TOTAL_COST"] = (db + db1) - db2; //(1+2)-3....formula for 
                            db3 = fgen.make_double(fgen.seek_iname_dt(dt8, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            db4 = fgen.make_double(dt4.Rows[i]["op_dep"].ToString().Trim());
                            db5 = fgen.make_double(fgen.seek_iname_dt(dt7, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "crmt"));
                            if (fgen.make_double(dr1["TOTAL_COST_BF"].ToString().Trim()) == 0 && fgen.make_double(dr1["CURR_ADD"].ToString().Trim()) == 0)
                            {
                                dr1["DEP_BF"] = "0";
                            }
                            else
                            {
                                dr1["DEP_BF"] = db3 + db4;
                            }
                            if (fgen.make_double(dr1["sale"].ToString().Trim()) != 0)
                            {
                                dr1["CURR_DEP"] = db5;
                                dr1["DEELETION"] = fgen.make_double(dr1["DEP_BF"].ToString().Trim()) + db5;
                            }
                            else
                            {
                                dr1["CURR_DEP"] = fgen.make_double(fgen.seek_iname_dt(dt3, "fstr='" + dt4.Rows[i]["fstr"].ToString().Trim() + "'", "DEP"));
                                dr1["DEELETION"] = "0";
                            }
                            db5 = fgen.make_double(dr1["DEP_BF"].ToString().Trim());  //1
                            db6 = fgen.make_double(dr1["CURR_DEP"].ToString().Trim()); ///2
                            db7 = fgen.make_double(dr1["DEELETION"].ToString().Trim());  ///3
                            dr1["TOT_DEP"] = (db5 + db6) - db7;
                            db11 = fgen.make_double(dr1["TOTAL_COST"].ToString().Trim()) - fgen.make_double(dr1["TOT_DEP"].ToString().Trim());
                            if (db11 < 0)
                            {
                                dr1["WDV_CURR_YR"] = "0";
                            }
                            else
                            {
                                dr1["WDV_CURR_YR"] = fgen.make_double(dr1["TOTAL_COST"].ToString().Trim()) - fgen.make_double(dr1["TOT_DEP"].ToString().Trim());
                            }
                            db10 = db - db5;
                            if (db10 < 0)
                            {
                                dr1["WDV_PREV_YR"] = "0";
                            }
                            else
                            {
                                dr1["WDV_PREV_YR"] = db - db5;
                            }
                            if (fgen.make_double(dr1["WDV_CURR_YR"].ToString().Trim()) != 0 || fgen.make_double(dr1["WDV_PREV_YR"].ToString().Trim()) != 0)
                            {
                                ph_tbl.Rows.Add(dr1);
                            }
                        }
                    }
                }
                #endregion

                #region for dep summary
                dtm = new DataTable();
                dtm.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
                dtm.Columns.Add(new DataColumn("todt", typeof(DateTime)));
                dtm.Columns.Add(new DataColumn("header", typeof(string)));
                dtm.Columns.Add(new DataColumn("locn", typeof(string)));
                dtm.Columns.Add(new DataColumn("dcode", typeof(string)));
                dtm.Columns.Add(new DataColumn("BLOCK", typeof(string)));
                dtm.Columns.Add(new DataColumn("dname", typeof(string)));
                dtm.Columns.Add(new DataColumn("mbr", typeof(string)));
                dtm.Columns.Add(new DataColumn("ASSET_DEP", typeof(string)));//m
                dtm.Columns.Add(new DataColumn("instdt", typeof(string)));
                dtm.Columns.Add(new DataColumn("grpcode", typeof(string)));
                dtm.Columns.Add(new DataColumn("grpname", typeof(string)));
                dtm.Columns.Add(new DataColumn("ASSET_CODE", typeof(string)));//m
                dtm.Columns.Add(new DataColumn("ASSET_Name", typeof(string)));//m
                dtm.Columns.Add(new DataColumn("USEFUL_LIFE", typeof(double)));//m
                dtm.Columns.Add(new DataColumn("dep_pday", typeof(double)));//m
                dtm.Columns.Add(new DataColumn("dep_Cal_prday", typeof(double)));
                dtm.Columns.Add(new DataColumn("TOTAL_COST_BF", typeof(double)));
                dtm.Columns.Add(new DataColumn("CURR_ADD", typeof(double)));
                dtm.Columns.Add(new DataColumn("SALE", typeof(double)));
                dtm.Columns.Add(new DataColumn("TOTAL_COST", typeof(double)));
                dtm.Columns.Add(new DataColumn("DEP_BF", typeof(double)));//op bal in this
                dtm.Columns.Add(new DataColumn("CURR_DEP", typeof(double)));
                dtm.Columns.Add(new DataColumn("DEELETION", typeof(double)));//del during yr
                dtm.Columns.Add(new DataColumn("TOT_DEP", typeof(double)));
                dtm.Columns.Add(new DataColumn("WDV_CURR_YR", typeof(double)));
                dtm.Columns.Add(new DataColumn("WDV_PREV_YR", typeof(double)));
                dtm.Columns.Add(new DataColumn("day_percent", typeof(double)));

                if (iconID == "F70416")
                {
                    header_n = "Depreciation Chart- Location wise Summary";
                    mq10 = "select distinct type1,name from typeGRP where id='LF'";
                    dt10 = fgen.getdata(frm_qstr, frm_cocd, mq10);

                    if (ph_tbl.Rows.Count > 0)
                    {
                        #region this for 70416 only
                        DataView view1 = new DataView(ph_tbl);
                        DataTable dtdrsim = new DataTable();
                        dtdrsim = view1.ToTable(true, "LOCN", "asset_code"); //MAIN     
                        // dtdrsim = view1.ToTable(true, "LOCN"); //MAIN                  

                        foreach (DataRow dr0 in dtdrsim.Rows)
                        {
                            DataView viewim = new DataView(ph_tbl, "LOCN='" + dr0["LOCN"] + "' and ASSET_CODE='" + dr0["ASSET_CODE"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                            //DataView viewim = new DataView(ph_tbl, "LOCN='" + dr0["LOCN"] + "'", "", DataViewRowState.CurrentRows);
                            dt4 = viewim.ToTable();
                            dr1 = dtm.NewRow();
                            mq1 = ""; mq2 = ""; db = 0; db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0; db7 = 0; db8 = 0; db9 = 0; db10 = 0; db11 = 0; db12 = 0; db13 = 0;
                            for (int i = 0; i < dt4.Rows.Count; i++)
                            {
                                dr1["fromdt"] = fromdt;
                                dr1["todt"] = todt;
                                dr1["header"] = header_n;
                                dr1["mbr"] = dt4.Rows[i]["MBR"].ToString().Trim();
                                dr1["grpcode"] = dt4.Rows[i]["grpcode"].ToString().Trim();
                                dr1["locn"] = dt4.Rows[i]["locn"].ToString().Trim();
                                mq2 = fgen.seek_iname_dt(dt10, "type1='" + dr1["locn"].ToString().Trim() + "'", "name");//loc name in this
                                if (mq2.Length > 1)
                                {
                                    dr1["dname"] = mq2;
                                }
                                else
                                {
                                    dr1["dname"] = "-";
                                }
                                dr1["grpname"] = dt4.Rows[i]["grpname"].ToString().Trim();
                                dr1["ASSET_CODE"] = dt4.Rows[i]["ASSET_CODE"].ToString().Trim();
                                dr1["ASSET_Name"] = dt4.Rows[i]["ASSET_Name"].ToString().Trim();
                                dr1["instdt"] = dt4.Rows[i]["instdt"].ToString().Trim();
                                db += fgen.make_double(dt4.Rows[i]["TOTAL_COST_BF"].ToString().Trim());
                                dr1["TOTAL_COST_BF"] = db;
                                db1 += fgen.make_double(dt4.Rows[i]["CURR_ADD"].ToString().Trim());
                                dr1["CURR_ADD"] = db1;
                                db2 += fgen.make_double(dt4.Rows[i]["SALE"].ToString().Trim());
                                dr1["SALE"] = db2;
                                db3 += fgen.make_double(dt4.Rows[i]["TOTAL_COST"].ToString().Trim());
                                dr1["TOTAL_COST"] = db3;
                                db4 += fgen.make_double(dt4.Rows[i]["DEP_BF"].ToString().Trim());
                                dr1["DEP_BF"] = db4;
                                db5 += fgen.make_double(dt4.Rows[i]["CURR_DEP"].ToString().Trim());
                                dr1["CURR_DEP"] = db5;
                                db6 += fgen.make_double(dt4.Rows[i]["DEELETION"].ToString().Trim());
                                dr1["DEELETION"] = db6;
                                db7 += fgen.make_double(dt4.Rows[i]["TOT_DEP"].ToString().Trim());
                                dr1["TOT_DEP"] = db7;
                                db8 += fgen.make_double(dt4.Rows[i]["WDV_CURR_YR"].ToString().Trim());
                                dr1["WDV_CURR_YR"] = db8;
                                db9 += fgen.make_double(dt4.Rows[i]["WDV_PREV_YR"].ToString().Trim());
                                dr1["WDV_PREV_YR"] = db9;
                                db10 += fgen.make_double(dt4.Rows[i]["USEFUL_LIFE"].ToString().Trim());
                                dr1["USEFUL_LIFE"] = db10;
                                db11 += fgen.make_double(dt4.Rows[i]["dep_pday"].ToString().Trim());
                                dr1["dep_pday"] = db11;
                                db12 += fgen.make_double(dt4.Rows[i]["ASSET_DEP"].ToString().Trim());
                                dr1["ASSET_DEP"] = db12;
                                db13 = fgen.make_double(dt4.Rows[i]["dep_Cal_prday"].ToString().Trim());
                                dr1["dep_Cal_prday"] = db13;
                                dr1["day_percent"] = dt4.Rows[i]["day_percent"].ToString().Trim();
                            }
                            dtm.Rows.Add(dr1);
                        }
                        #endregion
                    }
                }
                //////////
                if (iconID == "F70417")
                {
                    header_n = "Dep. Chart- Department wise Summary";
                    mq10 = "select distinct type1,name from type where id='M' AND TYPE1 LIKE '6%'";
                    dt10 = fgen.getdata(frm_qstr, frm_cocd, mq10);
                    if (ph_tbl.Rows.Count > 0)
                    {
                        #region this for 70417 only
                        DataView view1 = new DataView(ph_tbl);
                        DataTable dtdrsim = new DataTable();
                        dtdrsim = view1.ToTable(true, "DCODE", "asset_code"); //MAIN                  
                        foreach (DataRow dr0 in dtdrsim.Rows)
                        {
                            DataView viewim = new DataView(ph_tbl, "DCODE='" + dr0["DCODE"] + "' and ASSET_CODE='" + dr0["ASSET_CODE"] + "'", "", DataViewRowState.CurrentRows);
                            dt4 = viewim.ToTable();
                            dr1 = dtm.NewRow();
                            mq1 = ""; mq2 = ""; db = 0; db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0; db7 = 0; db8 = 0; db9 = 0; db10 = 0; db11 = 0; db12 = 0; db13 = 0;
                            for (int i = 0; i < dt4.Rows.Count; i++)
                            {
                                dr1["fromdt"] = fromdt;
                                dr1["todt"] = todt;
                                dr1["header"] = header_n;
                                dr1["mbr"] = dt4.Rows[i]["MBR"].ToString().Trim();
                                dr1["grpcode"] = dt4.Rows[i]["grpcode"].ToString().Trim();
                                dr1["DCODE"] = dt4.Rows[i]["DCODE"].ToString().Trim();
                                mq2 = fgen.seek_iname_dt(dt10, "type1='" + dr1["DCODE"].ToString().Trim() + "'", "name");
                                if (mq2.Length > 1)
                                {
                                    dr1["dname"] = mq2;
                                }
                                else
                                {
                                    dr1["dname"] = "-";
                                }
                                dr1["grpname"] = dt4.Rows[i]["grpname"].ToString().Trim();
                                dr1["ASSET_CODE"] = dt4.Rows[i]["ASSET_CODE"].ToString().Trim();
                                dr1["ASSET_Name"] = dt4.Rows[i]["ASSET_Name"].ToString().Trim();
                                dr1["instdt"] = dt4.Rows[i]["instdt"].ToString().Trim();
                                db += fgen.make_double(dt4.Rows[i]["TOTAL_COST_BF"].ToString().Trim());
                                dr1["TOTAL_COST_BF"] = db;
                                db1 += fgen.make_double(dt4.Rows[i]["CURR_ADD"].ToString().Trim());
                                dr1["CURR_ADD"] = db1;
                                db2 += fgen.make_double(dt4.Rows[i]["SALE"].ToString().Trim());
                                dr1["SALE"] = db2;
                                db3 += fgen.make_double(dt4.Rows[i]["TOTAL_COST"].ToString().Trim());
                                dr1["TOTAL_COST"] = db3;
                                db4 += fgen.make_double(dt4.Rows[i]["DEP_BF"].ToString().Trim());
                                dr1["DEP_BF"] = db4;
                                db5 += fgen.make_double(dt4.Rows[i]["CURR_DEP"].ToString().Trim());
                                dr1["CURR_DEP"] = db5;
                                db6 += fgen.make_double(dt4.Rows[i]["DEELETION"].ToString().Trim());
                                dr1["DEELETION"] = db6;
                                db7 += fgen.make_double(dt4.Rows[i]["TOT_DEP"].ToString().Trim());
                                dr1["TOT_DEP"] = db7;
                                db8 += fgen.make_double(dt4.Rows[i]["WDV_CURR_YR"].ToString().Trim());
                                dr1["WDV_CURR_YR"] = db8;
                                db9 += fgen.make_double(dt4.Rows[i]["WDV_PREV_YR"].ToString().Trim());
                                dr1["WDV_PREV_YR"] = db9;
                                db10 += fgen.make_double(dt4.Rows[i]["USEFUL_LIFE"].ToString().Trim());
                                dr1["USEFUL_LIFE"] = db10;
                                db11 += fgen.make_double(dt4.Rows[i]["dep_pday"].ToString().Trim());
                                dr1["dep_pday"] = db11;
                                db12 += fgen.make_double(dt4.Rows[i]["ASSET_DEP"].ToString().Trim());
                                dr1["ASSET_DEP"] = db12;
                                db13 = fgen.make_double(dt4.Rows[i]["dep_Cal_prday"].ToString().Trim());
                                dr1["dep_Cal_prday"] = db13;
                                dr1["day_percent"] = dt4.Rows[i]["day_percent"].ToString().Trim();
                            }
                            dtm.Rows.Add(dr1);
                        }
                        #endregion
                    }
                }

                if (iconID == "F70418")
                {//BLOCK WISE
                    header_n = "Depr Chart(Companies Act)- IT Block wise Summary";//BLOCK 
                    mq10 = "select distinct type1,name from typeGRP where id='DI'";
                    dt10 = fgen.getdata(frm_qstr, frm_cocd, mq10);
                    if (ph_tbl.Rows.Count > 0)
                    {
                        #region this for 70418 only
                        DataView view1 = new DataView(ph_tbl);
                        DataTable dtdrsim = new DataTable();
                        dtdrsim = view1.ToTable(true, "BLOCK", "asset_code"); //MAIN                  
                        foreach (DataRow dr0 in dtdrsim.Rows)
                        {
                            DataView viewim = new DataView(ph_tbl, "BLOCK='" + dr0["BLOCK"] + "' and ASSET_CODE='" + dr0["ASSET_CODE"] + "'", "", DataViewRowState.CurrentRows);
                            dt4 = viewim.ToTable();
                            dr1 = dtm.NewRow();
                            mq1 = ""; mq2 = ""; db = 0; db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0; db7 = 0; db8 = 0; db9 = 0; db10 = 0; db11 = 0; db12 = 0; db13 = 0;
                            for (int i = 0; i < dt4.Rows.Count; i++)
                            {
                                dr1["fromdt"] = fromdt;
                                dr1["todt"] = todt;
                                dr1["header"] = header_n;
                                dr1["grpcode"] = dt4.Rows[i]["grpcode"].ToString().Trim();
                                dr1["mbr"] = dt4.Rows[i]["MBR"].ToString().Trim();
                                // dr1["BLOCK"] = dt4.Rows[i]["BLOCK"].ToString().Trim();
                                dr1["DCODE"] = dt4.Rows[i]["BLOCK"].ToString().Trim();
                                mq2 = fgen.seek_iname_dt(dt10, "type1='" + dr1["DCODE"].ToString().Trim() + "'", "name"); //HERE BLOCK NAME
                                if (mq2.Length > 1)
                                {
                                    dr1["dname"] = mq2;
                                }
                                else
                                {
                                    dr1["dname"] = "-";
                                }
                                dr1["grpname"] = dt4.Rows[i]["grpname"].ToString().Trim();
                                dr1["ASSET_CODE"] = dt4.Rows[i]["ASSET_CODE"].ToString().Trim();
                                dr1["ASSET_Name"] = dt4.Rows[i]["ASSET_Name"].ToString().Trim();
                                dr1["instdt"] = dt4.Rows[i]["instdt"].ToString().Trim();
                                db += fgen.make_double(dt4.Rows[i]["TOTAL_COST_BF"].ToString().Trim());
                                dr1["TOTAL_COST_BF"] = db;
                                db1 += fgen.make_double(dt4.Rows[i]["CURR_ADD"].ToString().Trim());
                                dr1["CURR_ADD"] = db1;
                                db2 += fgen.make_double(dt4.Rows[i]["SALE"].ToString().Trim());
                                dr1["SALE"] = db2;
                                db3 += fgen.make_double(dt4.Rows[i]["TOTAL_COST"].ToString().Trim());
                                dr1["TOTAL_COST"] = db3;
                                db4 += fgen.make_double(dt4.Rows[i]["DEP_BF"].ToString().Trim());
                                dr1["DEP_BF"] = db4;
                                db5 += fgen.make_double(dt4.Rows[i]["CURR_DEP"].ToString().Trim());
                                dr1["CURR_DEP"] = db5;
                                db6 += fgen.make_double(dt4.Rows[i]["DEELETION"].ToString().Trim());
                                dr1["DEELETION"] = db6;
                                db7 += fgen.make_double(dt4.Rows[i]["TOT_DEP"].ToString().Trim());
                                dr1["TOT_DEP"] = db7;
                                db8 += fgen.make_double(dt4.Rows[i]["WDV_CURR_YR"].ToString().Trim());
                                dr1["WDV_CURR_YR"] = db8;
                                db9 += fgen.make_double(dt4.Rows[i]["WDV_PREV_YR"].ToString().Trim());
                                dr1["WDV_PREV_YR"] = db9;
                                db10 += fgen.make_double(dt4.Rows[i]["USEFUL_LIFE"].ToString().Trim());
                                dr1["USEFUL_LIFE"] = db10;
                                db11 += fgen.make_double(dt4.Rows[i]["dep_pday"].ToString().Trim());
                                dr1["dep_pday"] = db11;
                                db12 += fgen.make_double(dt4.Rows[i]["ASSET_DEP"].ToString().Trim());
                                dr1["ASSET_DEP"] = db12;
                                db13 = fgen.make_double(dt4.Rows[i]["dep_Cal_prday"].ToString().Trim());
                                dr1["dep_Cal_prday"] = db13;
                                dr1["day_percent"] = dt4.Rows[i]["day_percent"].ToString().Trim();
                            }
                            dtm.Rows.Add(dr1);
                        }
                        #endregion
                    }
                }
                #endregion
                if (dtm.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dtm.TableName = "Prepcur";
                    dsRep.Tables.Add(dtm);
                    if (iconID == "F70416")
                    {
                        Print_Report_BYDS(frm_cocd, frm_mbr, "depr_sum_locn", "depr_sum_locn", dsRep, "");
                    }
                    if (iconID == "F70417")
                    {
                        Print_Report_BYDS(frm_cocd, frm_mbr, "depr_sum_dcode", "depr_sum_dcode", dsRep, "");
                    }
                    if (iconID == "F70418")
                    {
                        Print_Report_BYDS(frm_cocd, frm_mbr, "depr_sum_block", "depr_sum_block", dsRep, "");
                    }
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;
            ///MERGED BY YOGITA ON 17.8.18

            case "F70432"://FA REG LOCN WISE    .......set no printer          
                #region FA Reg Location Wise
                header_n = "FA Reg Location Wise";
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, a.*,trim(B.NAME) as name, c.sale_dt as saledt, a.invno as sinvno, to_char(c.invdate,'dd/mm/yyyy') as sinvdate, nvl(c.iqtyout,0) as qtysale FROM TYPEGRP B, WB_FA_PUR a left join WB_FA_VCH c on a.branchcd||trim(a.acode)||to_char(a.instdt,'dd/mm/yyyy') =  c.branchcd||trim(c.acode)||to_char(c.instdt,'dd/mm/yyyy') AND c.type='20' and to_date(c.sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') and to_date(c.sale_dt,'dd/mm/yyyy') > to_date('" + fromdt + "','dd/mm/yyyy') WHERE TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a.BRANCHCD='" + frm_mbr + "' AND a.TYPE='10' and a.instdt < to_date('" + todt + "','dd/mm/yyyy') order by a.GRPCODE,A.VCHNUM ASC,A.LOCN";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "fa_record_LOCN", "fa_record_LOCN", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70433"://FA REG DEPT WISE..//BRANCHCD CHANGS DONE IN CODE                
                #region FA Reg Dept Wise
                header_n = "FA Reg Dept Wise";
                //    SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, a.*,B.NAME, c.sale_dt as saledt, a.invno as sinvno, to_char(c.invdate,'dd/mm/yyyy') as sinvdate, c.iqtyout as qtysale FROM TYPEGRP B, WB_FA_PUR a left join WB_FA_VCH c on a.branchcd||trim(a.acode)||to_char(a.instdt,'dd/mm/yyyy') =  c.branchcd||trim(c.acode)||to_char(c.instdt,'dd/mm/yyyy') AND c.type='20' and to_date(c.sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') and to_date(c.sale_dt,'dd/mm/yyyy') > to_date('" + fromdt + "','dd/mm/yyyy') WHERE TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a.BRANCHCD='" + frm_mbr + "' AND a.TYPE='10' and a.instdt < to_date('" + todt + "','dd/mm/yyyy') order by a.GRPCODE,a.dcode,a.vchnum asc"; //real
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, a.*,B.NAME, c.sale_dt as saledt, c.invno as sinvno, to_char(c.invdate,'dd/mm/yyyy') as sinvdate, c.iqtyout as qtysale,a.instdt FROM TYPEGRP B, WB_FA_PUR a left join WB_FA_VCH c on a.branchcd||trim(a.acode)||to_char(a.instdt,'dd/mm/yyyy') =  c.branchcd||trim(c.acode)||to_char(c.instdt,'dd/mm/yyyy') AND c.type='20' and to_date(c.sale_dt,'dd/mm/yyyy') <= to_date('" + todt + "','dd/mm/yyyy') and to_date(c.sale_dt,'dd/mm/yyyy') > to_date('" + fromdt + "','dd/mm/yyyy') WHERE TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a." + branch_Cd + " AND a.TYPE='10' and a.instdt < to_date('" + todt + "','dd/mm/yyyy') order by a.GRPCODE,a.branchcd,a.dcode,a.vchnum asc";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                SQuery = "select distinct type1,trim(name) as name from type where type1 like '6%' and id='M'";
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery); ///dept name in this
                dt.Columns.Add("dept_name", typeof(string));
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    dt.Rows[i]["dept_name"] = fgen.seek_iname_dt(dt1, "type1='" + dt.Rows[i]["dcode"].ToString().Trim() + "'", "name").Replace('0', '-');
                }
                if (dt.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "fa_record_Dept", "fa_record_Dept", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70434":////////SET NO PRINTER           
                #region Fixed Assets Owner Wise Register
                header_n = "Fixed Assets Owner Wise Register";
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, a.*,(case when a.owner='Y' THEN 'OWNER' when a.owner='H' THEN 'HIRE PURCHASE' WHEN A.OWNER='C' THEN 'CO-OWNER' WHEN A.OWNER='L' THEN 'LEASE' end) as ownn,B.NAME, c.sale_dt as saledt, a.invno as sinvno, to_char(c.invdate,'dd/mm/yyyy') as sinvdate, c.iqtyout as qtysale FROM TYPEGRP B, WB_FA_PUR a left join WB_FA_VCH c on a.branchcd||trim(a.acode)||to_char(a.instdt,'dd/mm/yyyy') =  c.branchcd||trim(c.acode)||to_char(c.instdt,'dd/mm/yyyy') AND c.type='20' and to_date(c.sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') and to_date(c.sale_dt,'dd/mm/yyyy') > to_date('" + fromdt + "','dd/mm/yyyy') WHERE TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a.BRANCHCD='" + frm_mbr + "' AND a.TYPE='10' and a.instdt < to_date('" + todt + "','dd/mm/yyyy') order by a.GRPCODE,a.vchnum asc";
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, a.*,B.NAME, c.sale_dt as saledt, c.invno as sinvno, to_char(c.invdate,'dd/mm/yyyy') as sinvdate, c.iqtyout as qtysale,a.instdt FROM TYPEGRP B, WB_FA_PUR a left join WB_FA_VCH c on a.branchcd||trim(a.acode)||to_char(a.instdt,'dd/mm/yyyy') =  c.branchcd||trim(c.acode)||to_char(c.instdt,'dd/mm/yyyy') AND c.type='20' and to_date(c.sale_dt,'dd/mm/yyyy') <= to_date('" + todt + "','dd/mm/yyyy') and to_date(c.sale_dt,'dd/mm/yyyy') > to_date('" + fromdt + "','dd/mm/yyyy') WHERE TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a." + branch_Cd + " AND a.TYPE='10' and a.instdt < to_date('" + todt + "','dd/mm/yyyy') order by a.GRPCODE,a.branchcd,a.dcode,a.vchnum asc";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "fa_record_owner", "fa_record_owner", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70435": //ASSET WARRANTY.....BRANCHCD CHANGS DONE IN CODE                
                #region Fixed Assets Warranty Wise Register
                header_n = "Fixed Assets Warranty Wise Register";
                //real qry//SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, a.*,(case when a.warranty='Y' THEN A.WARRANTY_DT END) AS WRN_DT,B.NAME, c.sale_dt as saledt, a.invno as sinvno, to_char(c.invdate,'dd/mm/yyyy') as sinvdate, c.iqtyout as qtysale FROM TYPEGRP B, WB_FA_PUR a left join WB_FA_VCH c on a.branchcd||trim(a.acode)||to_char(a.instdt,'dd/mm/yyyy') =  c.branchcd||trim(c.acode)||to_char(c.instdt,'dd/mm/yyyy') AND c.type='20' and to_date(c.sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') and to_date(c.sale_dt,'dd/mm/yyyy') > to_date('" + fromdt + "','dd/mm/yyyy') WHERE TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a.BRANCHCD='" + frm_mbr + "' AND a.TYPE='10' and a.instdt < to_date('" + todt + "','dd/mm/yyyy') and nvl(c.sale_dt,'-')='-' AND warranty='Y' order by a.GRPCODE,a.vchnum asc";
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, a.*,(case when a.warranty='Y' THEN A.WARRANTY_DT END) AS WRN_DT,B.NAME, c.sale_dt as saledt, a.invno as sinvno, to_char(c.invdate,'dd/mm/yyyy') as sinvdate, c.iqtyout as qtysale FROM TYPEGRP B, WB_FA_PUR a left join WB_FA_VCH c on a.branchcd||trim(a.acode)||to_char(a.instdt,'dd/mm/yyyy') =  c.branchcd||trim(c.acode)||to_char(c.instdt,'dd/mm/yyyy') AND c.type='20' and to_date(c.sale_dt,'dd/mm/yyyy') < to_date('" + todt + "','dd/mm/yyyy') and to_date(c.sale_dt,'dd/mm/yyyy') > to_date('" + fromdt + "','dd/mm/yyyy') WHERE TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a." + branch_Cd + " AND a.TYPE='10' and a.instdt < to_date('" + todt + "','dd/mm/yyyy') and nvl(c.sale_dt,'-')='-' AND warranty='Y' order by a.GRPCODE,a.branchcd,a.vchnum asc";
                SQuery = "SELECT '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, a.*,B.NAME, c.sale_dt as saledt, c.invno as sinvno, to_char(c.invdate,'dd/mm/yyyy') as sinvdate, c.iqtyout as qtysale,a.instdt FROM TYPEGRP B, WB_FA_PUR a left join WB_FA_VCH c on a.branchcd||trim(a.acode)||to_char(a.instdt,'dd/mm/yyyy') =  c.branchcd||trim(c.acode)||to_char(c.instdt,'dd/mm/yyyy') AND c.type='20' and to_date(c.sale_dt,'dd/mm/yyyy') <= to_date('" + todt + "','dd/mm/yyyy') and to_date(c.sale_dt,'dd/mm/yyyy') > to_date('" + fromdt + "','dd/mm/yyyy') WHERE TRIM(A.GRPCODE)=TRIM(B.TYPE1) AND B.ID='FA' AND a." + branch_Cd + " AND a.TYPE='10' and a.instdt < to_date('" + todt + "','dd/mm/yyyy') order by a.GRPCODE,a.branchcd,a.dcode,a.vchnum asc";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "fa_record_warranty", "fa_record_warranty", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }

                #endregion
                break;

            case "F70436"://branchcd condition add in code but not in rpt because no data coming in qry..pending add branchcd in rpt file.                     
                #region Depreciation Block Wise
                header_n = "Depreciation Block Wise";
                ph_tbl = new DataTable();
                ph_tbl.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("todt", typeof(DateTime)));
                ph_tbl.Columns.Add(new DataColumn("header", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("branchcd", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("block_code", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("block_name", typeof(string)));
                ph_tbl.Columns.Add(new DataColumn("dep_per", typeof(double))); //DEP%
                //gross block
                ph_tbl.Columns.Add(new DataColumn("op", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("less_180", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("more_180", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("sale", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("closing", typeof(double)));
                ///dep block
                ph_tbl.Columns.Add(new DataColumn("op1", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("less1_180", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("more1_180", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("sale2", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("clos2", typeof(double)));//op bal in this               
                ph_tbl.Columns.Add(new DataColumn("WDV_CURR_YR", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("WDV_PREV_YR", typeof(double)));
                //WB_fA_VCH TYPE=80 MAIN DT ANd BLOCK WISE HAI YE
                //TYPEGRP ME ID DI PE NUM4 ME DEP% SASVE HOTA H 

                param = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PARAMS AS params FROM CONTROLS WHERE ID='R02'", "params");
                mq0 = ""; mq1 = ""; mq2 = "";
                dt = new DataTable(); dt1 = new DataTable(); dt2 = new DataTable(); dt3 = new DataTable(); dt4 = new DataTable(); dt5 = new DataTable(); dt6 = new DataTable(); dt7 = new DataTable(); dt8 = new DataTable(); dt9 = new DataTable();

                //mq0 = "select  nvl(a.more180,0)+nvl(a.less180,0)+nvl(a.dramt,0)-nvl(a.sale_it,0) as op, a.vchnum,a.vchdate,a.block,nvl(a.more180,0) as more180,nvl(a.less180,0) as less180,nvl(a.dramt,0) as dramt,nvl(a.sale_it,0) as sale_it from wb_fa_vch a where a.branchcd='" + frm_mbr + "' and a.type='70' and a.vchdate " + xprdRange + "";
                // mq0 = "select a.block,sum(nvl(a.more180,0))+sum(nvl(a.less180,0))+sum(nvl(a.dramt,0))-sum(nvl(a.sale_it,0)) as op,sum(nvl(a.more180,0)) as more180,sum(nvl(a.less180,0)) as less180,sum(nvl(a.dramt,0)) as dramt,sum(nvl(a.sale_it,0))  as sale_it from wb_fa_vch a where a.branchcd='00' and a.type='70' and a.vchdate  between to_date('01/04/2016','dd/mm/yyyy') and to_date('18/08/2018','dd/mm/yyyy') group by a.block"; //real qry
                mq0 = "select a.block,sum(nvl(a.more180,0))+sum(nvl(a.less180,0))+sum(nvl(a.dramt,0))-sum(nvl(a.sale_it,0)) as op,sum(nvl(a.more180,0)) as more180,sum(nvl(a.less180,0)) as less180,sum(nvl(a.dramt,0)) as dramt,sum(nvl(a.sale_it,0))  as sale_it from wb_fa_vch a where a." + branch_Cd + " and a.type='70' and a.vchdate  between to_date('01/04/2016','dd/mm/yyyy') and to_date('18/08/2018','dd/mm/yyyy') group by a.block";
                dt = fgen.getdata(frm_qstr, frm_cocd, mq0); // 70 type se for gross block......

                //mq2 = "select distinct a.vchnum,to_Char(a.vchdate,'dd/MM/yyyy') as vchdate,A.block,nvl(a.more180,0) as more180,nvl(a.less180,0) as less180,nvl(a.sale_it,0) as sale,nvl(a.dramt,0) as drmt_op  from wb_fa_vch a,typegrp b where a.branchcd='" + frm_mbr + "' and a.type='80' and a.vchdate " + xprdRange + "  order by a.vchnum";
                //mq2 = "select A.block,sum(nvl(a.more180,0)) as more180,sum(nvl(a.less180,0)) as less180,sum(nvl(a.sale_it,0)) as sale,sum(nvl(a.dramt,0)) as drmt_op  from wb_fa_vch a,typegrp b where a.branchcd='" + frm_mbr + "' and a.type='80' and a.vchdate  " + xprdRange + " group by a.block"; //real qry
                mq2 = "select A.block,a.branchcd,sum(nvl(a.more180,0)) as more180,sum(nvl(a.less180,0)) as less180,sum(nvl(a.sale_it,0)) as sale,sum(nvl(a.dramt,0)) as drmt_op  from wb_fa_vch a,typegrp b where a." + branch_Cd + " and a.type='80' and a.vchdate  " + xprdRange + " group by a.block,a.branchcd order by a.branchcd";
                dt2 = fgen.getdata(frm_qstr, frm_cocd, mq2);////main dt

                mq3 = "select distinct type1,name,nvl(num4,0) as depr,nvl(num6,0) as op from typegrp where ID='DI'";
                dt3 = fgen.getdata(frm_qstr, frm_cocd, mq3); //TYPEGRP DT

                db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0;
                for (int i = 0; i < dt2.Rows.Count; i++)
                {
                    dr1 = ph_tbl.NewRow();
                    dr1["fromdt"] = fromdt;
                    dr1["todt"] = todt;
                    dr1["header"] = header_n;
                    dr1["branchcd"] = dt2.Rows[i]["branchcd"].ToString().Trim();
                    dr1["block_code"] = dt2.Rows[i]["block"].ToString().Trim();
                    dr1["block_name"] = fgen.seek_iname_dt(dt3, "TYPE1='" + dt2.Rows[i]["block"].ToString().Trim() + "'", "NAME");
                    dr1["dep_per"] = fgen.make_double(fgen.seek_iname_dt(dt3, "TYPE1='" + dt2.Rows[i]["block"].ToString().Trim() + "'", "depr"));
                    //gross block
                    db1 = fgen.make_double(fgen.seek_iname_dt(dt, "block='" + dt2.Rows[i]["block"].ToString().Trim() + "'", "op"));
                    if (db != 0)
                    {
                        dr1["op"] = db;
                    }
                    else
                    {
                        dr1["op"] = fgen.make_double(fgen.seek_iname_dt(dt3, "TYPE1='" + dt2.Rows[i]["block"].ToString().Trim() + "'", "op"));
                    }
                    dr1["less_180"] = fgen.make_double(fgen.seek_iname_dt(dt, "block='" + dt2.Rows[i]["block"].ToString().Trim() + "'", "less180"));
                    dr1["more_180"] = fgen.make_double(fgen.seek_iname_dt(dt, "block='" + dt2.Rows[i]["block"].ToString().Trim() + "'", "more180"));
                    dr1["sale"] = fgen.make_double(fgen.seek_iname_dt(dt, "block='" + dt2.Rows[i]["block"].ToString().Trim() + "'", "sale_it"));
                    db1 = fgen.make_double(dr1["op"].ToString().Trim()) + fgen.make_double(dr1["less_180"].ToString().Trim()) + fgen.make_double(dr1["more_180"].ToString().Trim()) - fgen.make_double(dr1["sale"].ToString().Trim());
                    dr1["closing"] = db1;

                    //////dep block
                    dr1["op1"] = fgen.make_double(dt2.Rows[i]["drmt_op"].ToString().Trim());
                    dr1["less1_180"] = fgen.make_double(dt2.Rows[i]["less180"].ToString().Trim());
                    dr1["more1_180"] = fgen.make_double(dt2.Rows[i]["more180"].ToString().Trim());
                    dr1["sale2"] = fgen.make_double(dt2.Rows[i]["sale"].ToString().Trim());
                    db2 = fgen.make_double(dr1["op1"].ToString().Trim()) + fgen.make_double(dr1["less1_180"].ToString().Trim()) + fgen.make_double(dr1["more1_180"].ToString().Trim()) - fgen.make_double(dr1["sale2"].ToString().Trim());
                    dr1["clos2"] = db2;
                    dr1["WDV_CURR_YR"] = db1 - db2; ///closing-clos2
                    dr1["WDV_PREV_YR"] = fgen.make_double(dr1["op"].ToString().Trim()) - fgen.make_double(dr1["op1"].ToString().Trim());
                    ph_tbl.Rows.Add(dr1);
                }
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "depr_block", "depr_block", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            //////////25.8.18...MADE BY AKSHAY...MERGED BY YOGITA
            case "F70262":
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                header_n = "Purchase Trend (In Rs.000)";
                SQuery = " select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, a.acode,b.aname,to_char(a.vchdate,'yyyymm') as vdd,to_char(a.vchdate,'MON-YY') AS DATEE , round(sum(a.Cramt )/100000,2) as Cr from voucher a, famst b  where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type like '5%' AND a.VCHDATE " + xprdRange + " and substr(a.acode,1,2) in ('05','06') and a.acode='" + mq0 + "' GROUP BY to_char(a.vchdate,'MON-YY') ,to_char(a.vchdate,'yyyymm'),b.aname,a.acode  ORDER BY VDD";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Purchase_Trend_Party_Graph", "Purchase_Trend_Party_Graph", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70161": //this is also yearly compariosn report ...and this is latest code
                #region this is direct
                header_n = "Yearly Comaprison";
                dt = new DataTable(); dt1 = new DataTable(); dt2 = new DataTable(); dt3 = new DataTable(); dt4 = new DataTable(); dt5 = new DataTable();
                mq0 = fromdt.Substring(6, 4);
                d = Convert.ToInt32(mq0) - 1; //for last year...previous year
                mq2 = "between to_date('01/04/" + d + "','dd/mm/yyyy') and to_date('31/03/" + mq0 + "','dd/mm/yyyy')";

                SQuery = "select mgcode,name,subgrp,subname,acode,aname,sum(bal_CURR) as bal_curr,sum(bal_PREV) as bal_prev from (SELECT SUBSTR(TRIM(A.ACODE),1,2) AS MGCODE, trim(A.ACODE) as acode,trim(B.ANAME) as aname,B.BSSCH AS SUBGRP,TRIM(D.NAME) AS SUBNAME,trim(C.NAME) as name,0 AS bal_PREV, SUM(nvl(A.DRAMT,0))-SUM(nvl(A.CRAMT,0)) AS bal_CURR FROM VOUCHER A,FAMST B,TYPE C ,TYPEGRP D WHERE TRIM(A.ACODE)=TRIM(B.ACODE) AND SUBSTR(TRIM(A.ACODE),1,2)=TRIM(C.TYPE1) AND TRIM(B.BSSCH)=TRIM(D.TYPE1) AND D.ID='A' AND C.ID='Z' AND A.BRANCHCD='" + frm_mbr + "' AND A.vchdate " + xprdRange + " AND SUBSTR(TRIM(A.ACODE),1,2)>='20'  GROUP BY A.ACODE,B.ANAME,C.NAME,B.BSSCH,D.NAME , SUBSTR(TRIM(A.ACODE),1,2) UNION ALL SELECT SUBSTR(TRIM(A.ACODE),1,2) AS MGCODE, trim(A.ACODE) as acode,trim(B.ANAME) as aname,B.BSSCH AS SUBGRP,TRIM(D.NAME) AS SUBNAME,trim(C.NAME) as name,SUM(nvl(A.DRAMT,0))-SUM(nvl(A.CRAMT,0)) AS bal_PREV,0 as bal_CURR FROM VOUCHER A,FAMST B,TYPE C ,TYPEGRP D WHERE TRIM(A.ACODE)=TRIM(B.ACODE) AND SUBSTR(TRIM(A.ACODE),1,2)=TRIM(C.TYPE1) AND TRIM(B.BSSCH)=TRIM(D.TYPE1) AND D.ID='A' AND C.ID='Z' AND A.BRANCHCD='" + frm_mbr + "' AND A.vchdate " + mq2 + " AND SUBSTR(TRIM(A.ACODE),1,2)>='20'  GROUP BY A.ACODE,B.ANAME,C.NAME,B.BSSCH,D.NAME , SUBSTR(TRIM(A.ACODE),1,2))  group by mgcode,name,subgrp,subname,acode,aname  order by subgrp";
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                SQuery = "SELECT MGCODE,NAME,SUM(BAL) AS GRPTOT FROM (SELECT trim(A.ACODE) as acode,trim(B.ANAME) as aname,B.BSSCH AS SUBGRP,TRIM(D.NAME) AS SUBNAME,SUBSTR(TRIM(A.ACODE),1,2) AS MGCODE,trim(C.NAME) as name,SUM(nvl(A.DRAMT,0))-SUM(nvl(A.CRAMT,0)) AS bal FROM VOUCHER A,FAMST B,TYPE C ,TYPEGRP D WHERE TRIM(A.ACODE)=TRIM(B.ACODE) AND SUBSTR(TRIM(A.ACODE),1,2)=TRIM(C.TYPE1) AND TRIM(B.BSSCH)=TRIM(D.TYPE1) AND D.ID='A' AND C.ID='Z' AND A.BRANCHCD='" + frm_mbr + "' AND A.vchdate " + mq2 + " AND SUBSTR(TRIM(A.ACODE),1,2)>='20'  GROUP BY A.ACODE,B.ANAME,C.NAME,B.BSSCH,D.NAME,SUBSTR(TRIM(A.ACODE),1,2)  ORDER BY subgrp) GROUP BY MGCODE,NAME ORDER BY MGCODE";//having SUM(nvl(A.DRAMT,0))-SUM(nvl(A.CRAMT,0))!=0
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);//FOR MAIN GRP WISE TOTAL..for prev yr
                SQuery = "SELECT MGCODE,NAME,SUM(BAL) AS GRPTOT FROM (SELECT trim(A.ACODE) as acode,trim(B.ANAME) as aname,B.BSSCH AS SUBGRP,TRIM(D.NAME) AS SUBNAME,SUBSTR(TRIM(A.ACODE),1,2) AS MGCODE,trim(C.NAME) as name,SUM(nvl(A.DRAMT,0))-SUM(nvl(A.CRAMT,0)) AS bal FROM VOUCHER A,FAMST B,TYPE C ,TYPEGRP D WHERE TRIM(A.ACODE)=TRIM(B.ACODE) AND SUBSTR(TRIM(A.ACODE),1,2)=TRIM(C.TYPE1) AND TRIM(B.BSSCH)=TRIM(D.TYPE1) AND D.ID='A' AND C.ID='Z' AND A.BRANCHCD='" + frm_mbr + "' AND A.vchdate " + xprdRange + " AND SUBSTR(TRIM(A.ACODE),1,2)>='20'  GROUP BY A.ACODE,B.ANAME,C.NAME,B.BSSCH,D.NAME,SUBSTR(TRIM(A.ACODE),1,2)  ORDER BY subgrp) GROUP BY MGCODE,NAME ORDER BY MGCODE";//having SUM(nvl(A.DRAMT,0))-SUM(nvl(A.CRAMT,0))!=0
                dt5 = fgen.getdata(frm_qstr, frm_cocd, SQuery);//FOR MAIN GRP WISE TOTAL.....for curr yr

                ph_tbl = new DataTable();//add dummy column in \ xthis 
                ph_tbl.Columns.Add("header", typeof(string));
                ph_tbl.Columns.Add("fromdt", typeof(DateTime));
                ph_tbl.Columns.Add("todt", typeof(DateTime));
                ph_tbl.Columns.Add("MGCODE", typeof(string));
                ph_tbl.Columns.Add("MNAME", typeof(string));
                ph_tbl.Columns.Add("sCODE", typeof(string));
                ph_tbl.Columns.Add("SNAME", typeof(string));
                ph_tbl.Columns.Add("aname", typeof(string));
                ph_tbl.Columns.Add("acode", typeof(string));
                ph_tbl.Columns.Add("curr_yr", typeof(double));
                ph_tbl.Columns.Add("prev_yr", typeof(double));

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr1 = ph_tbl.NewRow();
                        dr1["fromdt"] = fromdt;
                        dr1["todt"] = todt;
                        dr1["header"] = header_n;
                        dr1["mgcode"] = dt.Rows[i]["mgcode"].ToString().Trim();
                        dr1["mname"] = dt.Rows[i]["name"].ToString().Trim();
                        dr1["scode"] = dt.Rows[i]["subgrp"].ToString().Trim();
                        dr1["sname"] = dt.Rows[i]["subname"].ToString().Trim();
                        dr1["aname"] = dt.Rows[i]["aname"].ToString().Trim();
                        dr1["acode"] = dt.Rows[i]["acode"].ToString().Trim();
                        dr1["curr_yr"] = dt.Rows[i]["bal_curr"].ToString().Trim();
                        dr1["prev_yr"] = dt.Rows[i]["bal_prev"].ToString().Trim();
                        ph_tbl.Rows.Add(dr1);
                    }
                }
                if (ph_tbl.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    ph_tbl.TableName = "Prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Yearly_Comp_direct", "Yearly_Comp_direct", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70267": // MADE BY AKSHAY
                header_n = "Profit Trend Graph (Branch Wise) (In Rs.00000)";
                SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, TO_CHAR(VCHDATE,'YYYYMM') AS VDD,TO_CHAR(VCHDATE,'MON-YY') AS DATEE , round((SUM(DRAMT-CRAMT)*(-1))/100000,2) AS PR FROM  VOUCHER WHERE BRANCHCD='" + frm_mbr + "' and substr(acode,1,2)>='20'  AND VCHDATE " + xprdRange + "  GROUP BY to_char(vchdate,'MON-YY') ,to_char(vchdate,'YYYYMM') ORDER BY VDD";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Profit_Trend", "Profit_Trend", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70268": // MADE BY AKSHAY
                header_n = "Profit Trend Graph (Consolidated) (In Rs.00000)";
                fgenMV.Fn_Set_Mvar(frm_qstr, "U_BRANCH_CD", branch_Cd);
                if (frm_vty.Contains("%"))
                {
                    SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, TO_CHAR(VCHDATE,'YYYYMM') AS VDD,TO_CHAR(VCHDATE,'MON-YY') AS DATEE  , round((SUM(DRAMT-CRAMT)*(-1))/100000,2) AS PR FROM VOUCHER WHERE BRANCHCD not in ('DD','88') and substr(acode,1,2)>='20' AND VCHDATE " + xprdRange + "   GROUP BY to_char(vchdate,'MON-YY') ,to_char(vchdate,'YYYYMM') ORDER BY VDD";
                }
                else
                {
                    SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, TO_CHAR(VCHDATE,'YYYYMM') AS VDD,TO_CHAR(VCHDATE,'MON-YY') AS DATEE  , round((SUM(DRAMT-CRAMT)*(-1))/100000,2) AS PR FROM VOUCHER WHERE BRANCHCD in (" + frm_vty + ") and substr(acode,1,2)>='20' AND VCHDATE " + xprdRange + "   GROUP BY to_char(vchdate,'MON-YY') ,to_char(vchdate,'YYYYMM') ORDER BY VDD";
                }
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Profit_Trend_Consolidated", "Profit_Trend_Consolidated", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70142":
                //SET PRD='N' 
                header_n = "Group Summary";
                dt = new DataTable();
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt,C.NAME, b.aname,a.acode,sum(a.dramt) AS DRAMT,sum(a.cramt) as cramt,sum(a.dramt)-sum(a.cramt) as bal from voucher a,famst b,type c where trim(a.acode)=trim(b.acode) and substr(trim(a.acode),1,2)=trim(c.type1) and C.ID='Z'  and a.branchcd='" + frm_mbr + "' and substr(trim(a.acode),1,2) in (" + mq1 + ") and a.vchdate " + xprdRange + " group by b.aname,a.acode,c.name order by a.acode";
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Grp_Smry", "Grp_Smry", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70143":
                header_n = "Type Summary";
                dt = new DataTable();
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, C.NAME, b.aname,a.acode,sum(a.dramt) AS DRAMT,sum(a.cramt) as cramt,sum(a.dramt)-sum(a.cramt) as bal from voucher a,famst b,type c  where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' AND A.TYPE IN (" + mq1 + ") and TRIM(A.TYPE)=TRIM(C.TYPE1) and c.id='V'  and a.vchdate " + xprdRange + " group by b.aname,a.acode,C.NAME  order by a.acode";
                SQuery = "select '" + header_n + "' as header,'" + fromdt + "' as fromdt,'" + todt + "' as todt, C.NAME, b.aname,a.acode,sum(a.dramt) AS DRAMT,sum(a.cramt) as cramt,sum(a.dramt)-sum(a.cramt) as bal from voucher a,famst b,type c  where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' AND A.TYPE IN ('" + mq1 + "') and TRIM(A.TYPE)=TRIM(C.TYPE1) and c.id='V'  and a.vchdate " + xprdRange + " group by b.aname,a.acode,C.NAME  order by a.acode";
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dsRep = new DataSet();
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Type_Smry", "Type_Smry", dsRep, "");
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70506": // SALE PARTY WISE/ITEM WISE
            case "F70507":// SALE ITEM WISE/PARTY WISE
                #region
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                part_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE");

                if (party_cd.Length > 3) cond = "and a.ACODE in (" + party_cd + ")";
                else cond = "and a.ACODE like '%'";

                if (part_cd.Length > 3) cond += " AND substr(trim(a.ICODE),1,2) in (" + part_cd + ")";
                else cond += " AND trim(a.icode) like '%'";

                //cond = "and a.ACODE in (" + party_cd + ") AND substr(trim(a.ICODE),1,2) in (" + part_cd + ")";
                if (iconID == "F70507")
                {
                    header_n = "Sale Item Wise/ Party Wise";
                }
                else
                {
                    header_n = "Sale Party Wise/ Item Wise(Detail)";
                }
                SQuery = "SELECT '" + fromdt + "' as FRMDATE,'" + todt + "' AS TODATE,'" + header_n + "' as header, vchdate,VCHNUM,iname ,icode,aname,acode, qty, rate,unit,iweight,amount,IGST_VAL,CGST_VAL,SGST_VAL,  AMOUNT+IGST_VAL+CGST_VAL+SGST_VAL AS TOTAL from ( SELECT A.VCHNUM,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,b.INAME ,A.ICODE, C.ANAME ,A.ACODE,sum(A.IQTYOUT) AS QTY ,A.IRATE AS RATE, B.UNIT,b.iweight , sum(A.IAMOUNT) AS AMOUNT ,(sum(a.iamount)*round( (case when a.iopr='IG' then sum(a.exc_RATE)/100 else 0 end ),3)) as igst_val,(sum(a.iamount)*round( (case when a.iopr='CG' then sum(a.exc_RATE)/100 else 0 end ),3)) as cgst_val,(sum(a.iamount)*round( ( case when a.iopr='CG' then sum(a.cess_percent)/100 else 0 end),3)) as sgst_val FROM IVOUCHER A , ITEM B, FAMST C WHERE TRIM(A.ICODE)=TRIM(B.ICODE) AND TRIM(A.ACODE)=TRIM(C.ACODE) AND  A.BRANCHCD='" + frm_mbr + "' AND A.TYPE LIKE '4%' and a.type!='47' AND A.VCHDATE " + xprdRange + " " + cond + " group by a.vchnum,a.vchdate ,a.acode,a.icode,b.iname,c.aname,b.unit,a.irate, a.iopr,b.iweight order by iname)";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    if (frm_cocd == "GDOT" || frm_cocd == "GCAP" || frm_cocd == "SEFL") { pdfView = "N"; }  //IN GDOT ARUN SIR WANT DIRECT VIEW OF REPORT SO THAT THEY CAN EXPORT TO EXCEL
                    if (iconID == "F70507")
                    {
                        Print_Report_BYDS(frm_cocd, frm_mbr, "Sale_Item", "Sale_Item", dsRep, header_n);
                    }
                    else
                    {
                        Print_Report_BYDS(frm_cocd, frm_mbr, "Sale_Party", "Sale_Party", dsRep, header_n);
                    }
                }
                #endregion
                break;

            case "F70508":// PURCHASE PARTY WISE/ITEM WISE
            case "F70509":// PURCHSE ITEM WISE /PARTY WISE
                #region
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                part_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE");
                if (party_cd.Length > 3) cond = "and a.ACODE in (" + party_cd + ")";
                else cond = "and a.ACODE like '%'";

                if (part_cd.Length > 3) cond += " AND substr(trim(a.ICODE),1,2) in (" + part_cd + ")";
                else cond += " AND trim(a.icode) like '%'";

                if (iconID == "F70509")
                {
                    header_n = "Purchase Item Wise/Party Wise";
                    SQuery = "select '" + fromdt + "' as FRMDATE,'" + todt + "' AS TODATE,'" + header_n + "' as header, vchnum,vchdate,invno,invdate,iname,icode,aname,acode,qty,rate,round(nvl(qty,0)*nvl(rate,0),2) as amount,unit,iweight,amount_old,igst_val ,cgst_val,sgst_val,other,frt_amt, (amount_old+igst_val+cgst_val+sgst_val+other+frt_amt) as total_bill from (SELECT a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,nvl(a.invno,'-') as invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,b.INAME ,A.ICODE, C.ANAME ,A.ACODE,sum(A.IQTYIN) AS QTY ,round(A.Ichgs,2) AS RATE,B.UNIT,b.iweight,sum(A.IAMOUNT) AS amount_old,(sum(a.iamount)*round( (case when a.unit='IG' then sum(a.exc_RATE)/100 else 0 end ),3)) as igst_val,(sum(a.iamount)*round( (case when a.unit='CG' then sum(a.exc_RATE)/100 else 0 end ),3)) as cgst_val,(sum(a.iamount)*round( ( case when a.unit='CG' then sum(a.cess_percent)/100 else 0 end),3)) as sgst_val , 0 as other,0 as frt_amt FROM IVOUCHER A , ITEM B, FAMST C WHERE TRIM(A.ICODE)=TRIM(B.ICODE) AND TRIM(A.ACODE)=TRIM(C.ACODE) AND  A.BRANCHCD='" + frm_mbr + "' AND A.TYPE LIKE '0%' and a.type!='04' AND A.VCHDATE " + xprdRange + " " + cond + " and a.store='Y' and length(trim(finvno)) > 15 group by a.vchnum,a.vchdate ,a.acode,a.icode,b.iname,c.aname,b.unit,a.ichgs, a.unit,b.iweight,a.invno,a.invdate order by iname)";
                }
                else
                {
                    header_n = "Purchase Party Wise/Item Wise(Detail)";
                    SQuery = "select '" + fromdt + "' as FRMDATE,'" + todt + "' AS TODATE,'" + header_n + "' as header, vchnum,vchdate,invno,invdate,iname,icode,aname,acode,qty,rate,round(nvl(qty,0)*nvl(rate,0),2) as amount,unit,iweight,amount_old,igst_val ,cgst_val,sgst_val,other,frt_amt, (amount_old+igst_val+cgst_val+sgst_val+other+frt_amt) as total_bill from (SELECT a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,nvl(a.invno,'-') as invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,b.INAME ,A.ICODE, C.ANAME ,A.ACODE,sum(A.IQTYIN) AS QTY ,round(A.Ichgs,2) AS RATE,B.UNIT,b.iweight,sum(A.IAMOUNT) AS amount_old,(sum(a.iamount)*round( (case when a.unit='IG' then sum(a.exc_RATE)/100 else 0 end ),3)) as igst_val,(sum(a.iamount)*round( (case when a.unit='CG' then sum(a.exc_RATE)/100 else 0 end ),3)) as cgst_val,(sum(a.iamount)*round( ( case when a.unit='CG' then sum(a.cess_percent)/100 else 0 end),3)) as sgst_val , d.other,d.frt_amt FROM  ITEM B, FAMST C,IVOUCHER A left join ivchctrl d on trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy')=trim(d.branchcd)||trim(d.type)||trim(d.vchnum)||to_char(d.vchdate,'dd/mm/yyyy')  WHERE TRIM(A.ICODE)=TRIM(B.ICODE) AND TRIM(A.ACODE)=TRIM(C.ACODE) and A.BRANCHCD='" + frm_mbr + "' AND A.TYPE LIKE '0%' and a.type!='04' AND A.VCHDATE " + xprdRange + " " + cond + " and a.store='Y' and length(trim(finvno)) > 15 group by a.vchnum,a.vchdate ,a.acode,a.icode,b.iname,c.aname,b.unit,a.ichgs, a.unit,b.iweight,d.other,d.frt_amt,a.invno,a.invdate order by iname)";
                }
                //  SQuery = "select '" + fromdt + "' as FRMDATE,'" + todt + "' AS TODATE,'" + header_n + "' as header, vchnum,vchdate,iname,icode,aname,acode,qty,rate,unit,iweight,amount,igst_val ,cgst_val,sgst_val,other,frt_amt, (amount+igst_val+cgst_val+sgst_val+other+frt_amt) as total_bill from(SELECT a.vchnum,to_char(a.vchdate,'dd/mm/yyyy') as vchdate,b.INAME ,A.ICODE, C.ANAME ,A.ACODE,sum(A.IQTYIN) AS QTY ,A.IRATE AS RATE,B.UNIT,b.iweight,sum(A.IAMOUNT) AS AMOUNT,(sum(a.iamount)*round( (case when a.unit='IG' then sum(a.exc_RATE)/100 else 0 end ),3)) as igst_val,(sum(a.iamount)*round( (case when a.unit='CG' then sum(a.exc_RATE)/100 else 0 end ),3)) as cgst_val,(sum(a.iamount)*round( ( case when a.unit='CG' then sum(a.cess_percent)/100 else 0 end),3)) as sgst_val , d.other,d.frt_amt FROM IVOUCHER A , ITEM B, FAMST C,ivchctrl d WHERE TRIM(A.ICODE)=TRIM(B.ICODE) AND TRIM(A.ACODE)=TRIM(C.ACODE) and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy')=trim(d.branchcd)||trim(d.type)||trim(d.vchnum)||to_char(d.vchdate,'dd/mm/yyyy') AND  A.BRANCHCD='" + frm_mbr + "' AND A.TYPE LIKE '0%' and a.type!='04' AND A.VCHDATE " + xprdRange + " " + cond + " group by a.vchnum,a.vchdate ,a.acode,a.icode,b.iname,c.aname,b.unit,a.irate, a.unit,b.iweight,d.other,d.frt_amt order by iname)";//old
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    if (frm_cocd == "GDOT" || frm_cocd == "GCAP" || frm_cocd == "SEFL") { pdfView = "N"; }  //IN GDOT ARUN SIR WANT DIRECT VIEW OF REPORT SO THAT THEY CAN EXPORT TO EXCEL
                    if (iconID == "F70509")
                    {
                        Print_Report_BYDS(frm_cocd, frm_mbr, "Purchase_Item", "Purchase_Item", dsRep, header_n);
                    }
                    else if (iconID == "F70508")
                    {
                        Print_Report_BYDS(frm_cocd, frm_mbr, "Purchase_Party", "Purchase_Party", dsRep, header_n);
                    }
                }
                else
                {
                    data_found = "N";
                }

                #endregion
                break;

            case "F70348":
                header_n = "Cheque Deposit Slip / Pay-In-Slip";
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                part_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE");
                if (party_cd.Length <= 1)
                {
                    party_cd = " and a.acode like '%'";
                }
                else
                {
                    party_cd = " and a.acode='" + party_cd + "'";
                }
                if (part_cd.Length <= 1)
                {
                    part_cd = " and a.rcode like '%'";
                }
                else
                {
                    part_cd = " and a.rcode in (" + part_cd + ")";
                }
                SQuery = "select '" + header_n + "' as header, to_char(sysdate,'dd/mm/yyyy') as vchdate,a.rcode,b.aname,trim(a.refnum) as refnum,to_char(a.refdate,'dd/mm/yyyy') as refdate,a.acode,a.dramt,c.aname as bank,trim(c.rtg_addr) as bank_address,trim(c.rtg_acno) as bank_account,nvl(trim(a.cb_bank),'-') as bankname_detail from voucher a,famst b,famst c where trim(a.rcode)=trim(b.acode) and trim(a.acode)=trim(c.acode) and a.branchcd='" + frm_mbr + "' and type like '1%' and a.vchdate " + xprdRange + " " + party_cd + part_cd + "  and a.dramt>0 order by aname";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "chq_slip", "chq_slip", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70335":
            case "F70337":
            case "F70338":
            case "F70335A":
                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                cond = "";
                bsschCond = "";

                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");

                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE").Length > 3)
                    bsschCond = "and trim(b.bbsch) like '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE").Trim() + "%'";

                mktggrp = fgenMV.Fn_Get_Mvar(frm_qstr, "U_III").Left(4);
                if (mktggrp.Length > 2)
                {
                    bsschCond += " and substr(b.mktggrp,1,4)='" + mktggrp + "' ";
                }

                string condRcode = "trim(rcode)";
                if (mq0.Trim().Length > 2)
                {
                    cond = " in (" + mq0.Trim() + ")";
                    if (frm_cocd == "TGIP") cond = " like '" + mq0.Trim() + "%'";
                    condRcode = " trim(rcode) in (" + mq0.Trim() + ")";
                    cond = "trim(a.acodE) in (" + mq0.Trim() + ")";
                }
                else
                {
                    cond = "(b.grp) like '16%'";
                    condRcode = " trim(b.grp) like '16%'";
                }
                todt = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY') AS SYD FROM DUAL", "SYD");
                string pamt, pdt;
                pamt = "0";
                pdt = "00/00/0000";
                dt = new DataTable();
                //dt = fgen.getdata(frm_qstr, frm_cocd, "select vchdate,fstr1,fstr2 from (select vchdate,Vchnum||' Dt '||vchdate as fstr1,sum(dramt) as fstr2 from voucher where branchcd='" + frm_mbr + "' and substr(Acode,1,2) in ('12','03') and "+condRcode+" group by vchdate,Vchnum||' Dt '||vchdate) order by vchdate desc ");
                //dt = fgen.getdata(frm_qstr, frm_cocd, "select vchdate,fstr1,fstr2,rcode from (select vchdate,Vchnum||' Dt '||vchdate as fstr1,sum(dramt) as fstr2,rcode from voucher where branchcd='" + frm_mbr + "' and substr(Acode,1,2) in ('12','03') and "+condRcode+" group by vchdate,Vchnum||' Dt '||vchdate,rcode) order by vchdate desc ");

                if (frm_formID == "F70335" && (frm_cocd == "SGRP" || frm_cocd == "UATS"))  //remv 12,03 acode from below qry as per mg mam...28jan 2022
                {
                    dt = fgen.getdata(frm_qstr, frm_cocd, "select vchdate,fstr1,fstr2,rcode from (select A.vchdate,A.Vchnum||' Dt '||A.vchdate as fstr1,sum(A.dramt) as fstr2,A.rcode from voucher A,FAMST B where TRIM(A.aCODE)=TRIM(b.ACODE) AND A.branchcd='" + frm_mbr + "' and  " + condRcode + " " + bsschCond + " group by A.vchdate,Vchnum||' Dt '||A.vchdate,A.rcode) order by vchdate desc ");
                }
                else
                {
                    dt = fgen.getdata(frm_qstr, frm_cocd, "select vchdate,fstr1,fstr2,rcode from (select A.vchdate,A.Vchnum||' Dt '||A.vchdate as fstr1,sum(A.dramt) as fstr2,A.rcode from voucher A,FAMST B where TRIM(A.aCODE)=TRIM(b.ACODE) AND A.branchcd='" + frm_mbr + "' and substr(B.GRP,1,2) in ('12','03') and " + condRcode + " " + bsschCond + " group by A.vchdate,Vchnum||' Dt '||A.vchdate,A.rcode) order by vchdate desc ");
                }

                if (dt.Rows.Count > 0)
                {
                    pamt = dt.Rows[0][2].ToString().Trim();
                    pdt = dt.Rows[0][1].ToString().Trim();
                    pdt = pdt.Substring(pdt.Length - 10);
                }
                cond1 = " HAVING sum(ODUEdays)>0";
                header_n = "Payment Reminder";
                if (frm_formID == "F70338")
                {
                    cond1 = "";
                    header_n = "Outstanding Report";
                }
                if (frm_formID == "F70335A")
                {
                    cond1 = "";
                }

                if (branch_Cd == "0") branch_Cd = "BRANCHCD='" + frm_mbr + "'";

                if (frm_cocd == "SPPI" || frm_cocd == "HPPI") cond1 = " ";
                SQuery = "SELECT '" + pamt + "' as pamt,'" + pdt + "' as pdt,'" + header_n + "' as headrr, DTREP,SDATE,ACODE,PAYMENT,br_name as aname,br_name,br_addr1,br_addr2,br_addr3,invno,invdate,p_email,Due_Dt,(ODUEdays) AS ODUEdays,SUM(dramt) AS DRAMT,SUM(cramt) AS CRAMT,SUM(net) AS NET,to_char(invdate,'yyyymmdd') as vdd FROM  (select '" + frm_mbr + "' AS DTREP, '" + todt + "' as sdate,TRIM(a.ACODE) as acode,a.branchcd,(case when B.PAY_NUM=0 then b.payment else to_char(B.PAY_NUM) end) PAYMENT,B.aname as br_name,B.addr1 as br_addr1,B.addr2 as br_addr2,B.addr3 as br_addr3,A.invno,A.invdate,to_DatE('" + todt + "','dd/mm/yyyy')-(A.INVDATE+B.PAY_NUM) as ODUEdays,A.INVDATE+B.PAY_NUM AS Due_Dt,A.dramt,A.cramt,A.dramt-A.cramt as net,b.email as p_email from RecDataW_ALL A,FAMST B where TRIM(a.ACODE)=TRIM(b.ACODE) and A." + branch_Cd + " /*AND nvl(trim(b.email),'-') != '-'*/ and " + cond + " " + bsschCond + " ) GROUP BY DTREP,SDATE,ACODE,PAYMENT,br_name,br_addr1,br_addr2,br_addr3,invno,invdate,p_email,Due_Dt,to_char(invdate,'yyyymmdd'),ODUEdays " + cond1 + " order by vdd desc";
                if (frm_cocd == "CENL")
                {
                    SQuery = "SELECT '" + pamt + "' as pamt,'" + pdt + "' as pdt,'" + header_n + "' as headrr, DTREP,SDATE,ACODE,PAYMENT,br_name as aname,br_name,br_addr1,br_addr2,br_addr3,invno,invdate,p_email,cpono,Due_Dt,(ODUEdays) AS ODUEdays,SUM(dramt) AS DRAMT,SUM(cramt) AS CRAMT,SUM(net) AS NET FROM  (select '" + frm_mbr + "' AS DTREP, '" + todt + "' as sdate,TRIM(a.ACODE) as acode,a.branchcd,(case when B.PAY_NUM=0 then b.payment else to_char(B.PAY_NUM) end)  PAYMENT,B.aname as br_name,B.addr1 as br_addr1,B.addr2 as br_addr2,B.addr3 as br_addr3,A.invno,A.invdate,to_DatE('" + todt + "','dd/mm/yyyy')-(A.INVDATE+B.PAY_NUM) as ODUEdays,A.INVDATE+B.PAY_NUM AS Due_Dt,A.dramt,A.cramt,A.dramt-A.cramt as net,b.email as p_email,c.pono as cpono from RecDataW_ALL A,FAMST B,sale c where TRIM(a.ACODE)=TRIM(b.ACODE) and a.branchcd||trim(A.invno)||to_Char(a.invdate,'dd/mm/yyyy')=c.branchcd||trim(c.vchnum)||to_Char(c.vchdate,'dd/mm/yyyy') and A." + branch_Cd + " AND nvl(trim(b.email),'-') != '-' and " + cond + " " + bsschCond + ") GROUP BY DTREP,SDATE,ACODE,PAYMENT,br_name,br_addr1,br_addr2,br_addr3,invno,invdate,p_email,cpono,Due_Dt,ODUEdays  " + cond1 + " ";
                }
                SQuery = "select m.* from (" + SQuery + ") m where m.net!=0 order by m.br_name, m.invdate,m.invno";
                if (frm_cocd == "MLAB")
                {//mail sent to only os debtors...as per mg mam...done by yogita...17/11/2021....in mlab data will be coming where dramt-cramt>0
                    SQuery = "select m.* from (" + SQuery + ") m where m.net>0 order by m.br_name, m.invdate,m.invno";
                }
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt1.Rows.Count > 0)
                {
                    dt1.Columns["pamt"].MaxLength = 15;
                }
                foreach (DataRow dr in dt1.Rows)
                {
                    if (dt.Rows.Count > 0)
                    {
                        dr["pamt"] = fgen.seek_iname_dt(dt, "rcode='" + dr["acode"].ToString().Trim() + "'", "fstr2").toDouble(2);
                        pdt = fgen.seek_iname_dt(dt, "rcode='" + dr["acode"].ToString().Trim() + "'", "fstr1");
                        if (pdt.Trim().Length > 1)
                        {
                            dr["pdt"] = pdt.Substring(pdt.Length - 10);
                        }
                    }
                }
                if (dt1.Rows.Count > 0)
                {
                    dt1.TableName = "Prepcur";
                    dsRep.Tables.Add(dt1);
                    frm_rptName = "Pay_reminder";
                    if (frm_cocd == "HPPI" || frm_cocd == "SPPI") frm_rptName = "Pay_reminderSPPI";
                    if (frm_formID == "F70335A")
                        frm_rptName = "Pay_req";
                    if (frm_cocd == "CENL")
                    {
                        Print_Report_BYDS(frm_cocd, frm_mbr, "CenlPReminder", "CenlPReminder", dsRep, "");
                    }
                    else
                    {
                        Print_Report_BYDS(frm_cocd, frm_mbr, "Pay_reminder", frm_rptName, dsRep, "");
                    }
                }
                else
                {
                    data_found = "N";
                }
                break;
            case "F70336":
                year = fromdt.Substring(6, 4);
                xprdRange1 = "BETWEEN TO_DATE('" + frm_cDt1 + "','DD/MM/YYYY') AND TO_DATE('" + fromdt + "','DD/MM/YYYY')-1";
                cond = "";

                bsschCond = "";

                mq0 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");

                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE").Length > 3)
                    bsschCond = "and trim(b.bbsch) like '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE").Trim() + "%'";

                mktggrp = fgenMV.Fn_Get_Mvar(frm_qstr, "U_III").Left(4);
                if (mktggrp.Length > 2)
                {
                    bsschCond += " and substr(b.mktggrp,1,4)='" + mktggrp + "' ";
                }

                if (mq0.Trim().Length > 2)
                {
                    cond = "trim(a.acode) in (" + mq0.Trim() + ")";
                    if (frm_cocd == "TGIP") cond = "b.grp like '" + mq0.Trim() + "%'";
                }
                else
                {
                    cond = "b.grp like '" + mq0.Trim() + "%'";
                }
                string mtext = "";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, "SELECT * FROM LETTER WHERE BRANCHCD='" + frm_mbr + "' AND TYPE='01' ORDER BY SRNO");
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    mtext += dt.Rows[i]["mtext"].ToString() + "\n";
                }
                // old query
                //SQuery = "select '" + frm_mbr + "' AS DTREP, '" + todt + "' as sdate,B.PAYMENT,b.email,b.email as p_email,B.aname,B.aname as br_name,B.addr1 as br_addr1,B.addr2 as br_addr2,B.addr3 as br_addr3,b.person,b.telnum as br_tele,b.mobile as br_mobile,B.PINCODE AS PIN,trim(a.acode),trim(a.acode) AS ACODE,sum(a.opb) as balance,'" + mtext + "' as mtext from (select acode,yr_" + year + " as opb from famstbal where branchcd='" + frm_mbr + "' and acode " + cond + " union all select acode,sum(Dramt)-sum(cramt) as opb from voucher where branchcd='" + frm_mbr + "' and acode " + cond + " and vchdate " + xprdRange + " group by acode ) a, famst b where trim(A.acode)=trim(b.acode) and trim(a.acode) " + cond + " group by trim(a.Acode),B.PAYMENT,B.aname,B.addr1,B.addr2,B.addr3,b.person,b.telnum,b.mobile,B.PINCODE,b.email order by trim(A.acode)";
                // changed query
                SQuery = "select '" + frm_mbr + "' AS DTREP, '" + todt + "' as sdate,B.PAYMENT,b.email,b.email as p_email,B.aname,B.aname as br_name,B.addr1 as br_addr1,B.addr2 as br_addr2,B.addr3 as br_addr3,b.person,b.telnum as br_tele,b.mobile as br_mobile,B.PINCODE AS PIN,trim(a.acode),trim(a.acode) AS ACODE,trim(b.msme_num) as msme_num,sum(a.opb) as balance,sum(nvl(a.opb,0)) as opening,sum(nvl(a.cdr,0)) as drmt,sum(nvl(a.ccr,0)) as crmt,sum(nvl(a.opb,0))+sum(nvl(a.cdr,0))-sum(nvl(a.ccr,0)) as cl,'" + mtext + "' as mtext from (select acode,yr_" + year + " as opb,0 as cdr,0 as ccr,0 as clos from famstbal where branchcd='" + frm_mbr + "' union all select acode,sum(Dramt)-sum(cramt) as opb,0 as cdr,0 as ccr,0 as clos from voucher where branchcd='" + frm_mbr + "' and vchdate " + xprdRange1 + " group by acode union all select acode,0 as opb,sum(nvl(dramt,0)) as cdr,sum(nvl(cramt,0)) as ccr,0 as clos from voucher where branchcd='" + frm_mbr + "' and vchdate " + xprdRange + " group by acode ) a, famst b where trim(A.acode)=trim(b.acode) and " + cond + " " + bsschCond + " group by trim(a.Acode),B.PAYMENT,B.aname,B.addr1,B.addr2,B.addr3,b.person,b.telnum,b.mobile,B.PINCODE,b.email,b.msme_num order by trim(A.acode)";
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                //F70151 query
                //SQuery = "select b.bssch as subgrpcode,c.type1 as mgcode, d.name as sub_grp,c.name as mgname, a.branchcd,trim(a.acode) as acode,b.aname,sum(nvl(a.opening,0)) as opening,sum(nvl(a.cdr,0)) as drmt,sum(nvl(a.ccr,0)) as crmt,sum(nvl(a.opening,0))+sum(nvl(a.cdr,0))-sum(nvl(a.ccr,0)) as cl from (Select branchcd,trim(acode) as acode, nvl(yr_" + year + ",0) as opening,0 as cdr,0 as ccr,0 as clos from famstbal where branchcd='" + frm_mbr + "' and acode " + cond + "  union all select branchcd,trim(acode),nvl(dramt,0)-nvl(cramt,0) as op,0 as cdr,0 as ccr,0 as clos FROM VOUCHER where branchcd='" + frm_mbr + "'  and acode " + cond + " and type like '%' and vchdate " + xprdRange1 + " union all select branchcd,trim(acode),0 as op,nvl(dramt,0) as cdr,nvl(cramt,0) as ccr,0 as clos from VOUCHER where branchcd='" + frm_mbr + "'  and acode " + cond + " and type like '%' and vchdate " + xprdRange + " ) a,famst b,type c,typegrp d where TRIM(b.bssch)=trim(d.type1) and substr(TRIM(b.grp),1,2)=trim(c.type1) and d.id='A' and c.id='Z' and trim(a.acode)=trim(b.acode)  group by a.branchcd,trim(a.acode),b.aname,c.name,d.name,b.bssch,c.type1,b.aname having abs(sum(nvl(a.opening,0)))+sum(nvl(a.cdr,0))+sum(nvl(a.ccr,0))!=0 ";
                //mq0 = "select subgrpcode,mgcode,sub_grp,mgname,branchcd,acode,aname,opening,drmt,crmt,cl,(case when opening>0 then opening else 0 end ) as op_debit,(case when opening<0 then abs(opening) else 0 end ) as op_crdt,(case when (cl)>0 then (abs(cl)) else 0 end ) as cl_debit,(case when (cl)<0 then (abs(cl)) else 0 end ) as cl_crdt from (" + SQuery + ") ORDER BY mgcode,aCODE";

                if (dt1.Rows.Count > 0)
                {
                    dt1.TableName = "Prepcur";
                    dsRep.Tables.Add(dt1);
                    frm_rptName = "bal_confir";
                    if (frm_cocd == "SVPL")
                    {
                        frm_rptName = "Bal_confir_SVPL";
                        Print_Report_BYDS(frm_cocd, frm_mbr, "Bal_confir_SVPL", frm_rptName, dsRep, "");
                    }
                    if (mtext.Length > 5)
                    {
                        frm_rptName = "Bal_confir_SVPL";
                        Print_Report_BYDS(frm_cocd, frm_mbr, "Bal_confir_SVPL", frm_rptName, dsRep, "");
                    }
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Bal_confir", frm_rptName, dsRep, "");
                }
                break;
            case "F70203":
            case "F70203P":
            case "F70101":
            case "F70106":
                col1 = "Select a.srno,a.branchcd||a.type||TRIM(A.VCHNUM)||TO_CHAR(A.VCHDATE,'DD/MM/YYYY') AS FSTR,a.branchcd||'/'||trim(a.type)||'/'||trim(a.vchnum)||'/'||to_char(a.vchdate,'yyyy') as spnum,a.type,trim(substr(NVL(a.naration,'-'),1,220)) AS NARATION,nvl(a.mrnnum,'-') as mrnnum,NVL(a.mrndate,A.VCHDATE) AS MRNDATE,NVL(a.tax,'-') AS TAX,A.COSTCD,NVL(a.refnum,'-') AS REFNUM,NVL(a.invno,'-') AS INVNO,";
                col2 = " NVL(a.invdate,A.VCHDATE) AS INVDATE,nvl(a.CCENT,'-') as ccent,a.acode,a.rcode,a.vchnum,a.vchdate,nvl(a.app_by,'-') as app_by,nvl(a.app_date,a.vchdate) as app_Date,(case when NVL(A.APP_BY,'-')='-' then a.tfcdr else a.dramt end) as dramt,(case when NVL(A.APP_BY,'-')='-' then a.tfccr else a.cramt end) as cramt,nvl(a.quantity,0)as quantity,NVL(a.refdate,A.VCHDATE) AS REFDATE,";
                col3 = " NVL(b.PERSON,'-') AS PERSON,NVL(b.aname,'-') AS ANAME,NVL(B.ANAME,'-') AS PARTY,a.ent_by,nvl(b.payment,'-') as pnm,a.tfcdr,a.tfccr,b.GST_NO as pGST_NO,nvl(a.FCTYPE,'-') ";

                string rptheader = "";
                switch (frm_formID)
                {
                    case "F70203":
                    case "F70203P":
                        rptheader = "";
                        break;
                    case "F70101":
                        rptheader = "Receipt Voucher";
                        break;
                    case "F70106":
                        rptheader = "Payment Voucher";
                        break;
                }

                mhd = fgen.check_filed_name(frm_qstr, frm_cocd, "VOUCHER", "CHECK_BY");
                if (mhd == "0")
                {
                    SQuery = col1 + col2 + col3 + " FCTYPE,c.name as VchTypeName,'" + rptheader + "' as rptHeader,'-' as check_by,a.NARATION as othRmk,a.depcd,d.name as gstcl,b.grp from VOUCHER a left outer join famst b on TRIM(A.ACODE)=TRIM(B.ACODE) left outer join type d on trim(A.depcd)=trim(d.type1) and d.id='}',type c where a.type=c.type1 and c.id='V' and a.branchcd||a.type||TRIM(A.VCHNUM)||TO_CHAR(A.VCHDATE,'DD/MM/YYYY') in (" + barCode + ") order by a.srno ";
                    mhd = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT TNAME FROM TAB WHERE TNAME LIKE 'WB_PV_HEAD%'", "TNAME");
                    if (mhd != "0")
                        SQuery = col1 + col2 + col3 + " FCTYPE,c.name as VchTypeName,'" + rptheader + "' as rptHeader,'-' as check_by,e.naration as othRmk,a.depcd,d.name as gstcl,b.grp from VOUCHER a left outer join famst b on TRIM(A.ACODE)=TRIM(B.ACODE) left outer join wb_pv_head e on a.branchcd||a.type||TRIM(A.VCHNUM)||TO_CHAR(A.VCHDATE,'DD/MM/YYYY')=e.branchcd||e.type||TRIM(E.VCHNUM)||TO_CHAR(e.VCHDATE,'DD/MM/YYYY')  left outer join type d on trim(A.depcd)=trim(d.type1) and d.id='}',type c where a.type=c.type1 and c.id='V' and a.branchcd||a.type||TRIM(A.VCHNUM)||TO_CHAR(A.VCHDATE,'DD/MM/YYYY') in (" + barCode + ") order by a.srno ";
                }
                else
                {
                    SQuery = col1 + col2 + col3 + " FCTYPE,c.name as VchTypeName,'" + rptheader + " '||(CASE WHEN NVL(A.APP_BY,'-')='-' THEN 'Un-Approved' WHEN NVL(A.CHECK_BY,'-')!='-' AND NVL(A.APP_BY,'-')='-' THEN 'Checked (Un-Approved)' WHEN NVL(A.CHECK_BY,'-')!='-' AND NVL(A.APP_BY,'-')!='-' THEN 'Approved' end) as rptHeader,a.check_by,a.NARATION as othRmk,a.depcd,d.name as gstcl,b.grp from VOUCHER a left outer join famst b on TRIM(A.ACODE)=TRIM(B.ACODE)  left outer join type d on trim(A.depcd)=trim(d.type1) and d.id='}',type c where a.type=c.type1 and c.id='V' and (a.branchcd||a.type||TRIM(A.VCHNUM)||TO_CHAR(A.VCHDATE,'DD/MM/YYYY') in (" + barCode + ") or trim(a.stform) in (" + barCode + ")) order by a.branchcd,a.type,a.vchdate,a.vchnum,a.srno ";
                    mhd = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT TNAME FROM TAB WHERE TNAME LIKE 'WB_PV_HEAD%'", "TNAME");
                    if (mhd != "0" && frm_formID != "F70101" && frm_formID == "F70106")
                        SQuery = col1 + col2 + col3 + " FCTYPE,c.name as VchTypeName,'" + rptheader + " '||(CASE WHEN NVL(A.APP_BY,'-')='-' THEN 'Un-Approved' WHEN NVL(A.CHECK_BY,'-')!='-' AND NVL(A.APP_BY,'-')='-' THEN 'Checked (Un-Approved)' WHEN NVL(A.CHECK_BY,'-')!='-' AND NVL(A.APP_BY,'-')!='-' THEN 'Approved' end) as rptHeader,a.check_by,e.naration as othRmk,a.depcd,d.name as gstcl,b.grp from VOUCHER a left outer join famst b on TRIM(A.ACODE)=TRIM(B.ACODE) left outer join wb_pv_head e on a.branchcd||a.type||TRIM(A.VCHNUM)||TO_CHAR(A.VCHDATE,'DD/MM/YYYY')=e.branchcd||e.type||TRIM(E.VCHNUM)||TO_CHAR(e.VCHDATE,'DD/MM/YYYY')  left outer join type d on trim(A.depcd)=trim(d.type1) and d.id='}',type c where a.type=c.type1 and c.id='V' and a.branchcd||a.type||TRIM(A.VCHNUM)||TO_CHAR(A.VCHDATE,'DD/MM/YYYY') in (" + barCode + ") order by a.srno ";
                    if (frm_cocd == "MEGH")
                        SQuery = col1 + col2 + col3 + " FCTYPE,c.name as VchTypeName,'" + rptheader + " '||(CASE WHEN NVL(A.APP_BY,'-')='-' THEN 'Un-Approved' WHEN NVL(A.CHECK_BY,'-')!='-' AND NVL(A.APP_BY,'-')='-' THEN 'Checked (Un-Approved)' WHEN NVL(A.CHECK_BY,'-')!='-' AND NVL(A.APP_BY,'-')!='-' THEN 'Approved' end) as rptHeader,a.check_by,d.name as gstcl,a.NARATION as othRmk,a.depcd,b.grp from VOUCHER a left outer join famst b on TRIM(A.ACODE)=TRIM(B.ACODE) ,type c,TYPE D where a.type=c.type1 and c.id='V' AND D.ID='}' AND TRIM(A.DEPCD)=TRIM(D.TYPE1) and a.branchcd||a.type||TRIM(A.VCHNUM)||TO_CHAR(A.VCHDATE,'DD/MM/YYYY') in (" + barCode + ") order by a.srno ";
                }
                //naration
                //check_by
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                foreach (DataColumn col in dt.Columns) col.ReadOnly = false;
                if (dt.Rows.Count > 0)
                {
                    dt.Columns.Add("NETPAY");
                    dt.Columns.Add("TAX_PER");
                    dt.Columns.Add("TOTAMTWORD");
                    string mrrnum = "";
                    string mrrGSTTax = "";
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr["type"].ToString().Left(1) == "5")
                        {
                            if (dr["NARATION"].ToString().Length > 3)
                            {
                                if (dr["NARATION"].ToString().ToUpper().Substring(0, 3) == "TDS")
                                {
                                    dr["NARATION"] = fgen.seek_iname_dt(dt, "FSTR='" + dr["FSTR"].ToString().Trim() + "' AND SRNO=1", "NARATION");
                                    dr["othrmk"] = dr["NARATION"];

                                    double tds = dt.Compute("sum(cramt)-sum(dramt)", "(GRP='06' OR GRP='05') and FSTR='" + dr["FSTR"].ToString().Trim() + "'").ToString().toDouble();

                                    dr["NETPAY"] = Math.Round(tds, 2).ToString();
                                }
                                else
                                {
                                    //double drmt = dt.Compute("sum(cramt)", "refnum<>'TDS' and FSTR='" + dr["FSTR"].ToString().Trim() + "'").ToString().toDouble();
                                    double tds = dt.Compute("sum(cramt)-sum(dramt)", "(GRP='06' OR GRP='05') and FSTR='" + dr["FSTR"].ToString().Trim() + "'").ToString().toDouble();

                                    dr["NETPAY"] = Math.Round(tds, 2).ToString();
                                }
                            }
                            if (mrrnum != dr["mrnnum"].ToString().Trim() + Convert.ToDateTime(dr["mrndate"].ToString().Trim()).ToString("dd/MM/yyyy"))
                            {
                                mrrnum = dr["mrnnum"].ToString().Trim() + Convert.ToDateTime(dr["mrndate"].ToString().Trim()).ToString("dd/MM/yyyy");
                                SQuery = "SELECT DISTINCT (CASE WHEN SUBSTR(UNIT,1,2)='CG' THEN 'CGST/SGST' ELSE 'IGST' END)||' : '||(EXC_RATE+CESS_PERCENT)||' %' as gst_rmk from IVOUCHER WHERE BRANCHCD='" + frm_mbr + "' AND TYPE LIKE '0%' AND TRIM(VCHNUM)||TO_cHAR(vCHDATE,'DD/MM/YYYY')='" + dr["mrnnum"].ToString().Trim() + Convert.ToDateTime(dr["mrndate"].ToString().Trim()).ToString("dd/MM/yyyy") + "' AND TRIM(INVNO)||TO_cHAR(INVDATE,'DD/MM/YYYY')='" + dr["invno"].ToString().Trim() + Convert.ToDateTime(dr["invdate"].ToString().Trim()).ToString("dd/MM/yyyy") + "'  ";
                                mrrGSTTax = fgen.seek_iname(frm_qstr, frm_cocd, SQuery, "gst_rmk");
                            }
                            dr["TAX_PER"] = mrrGSTTax;
                        }
                        else
                        {
                            dr["NETPAY"] = "";
                            string myNar = "";
                            foreach (DataRow drx in dt.Rows)
                            {
                                if (drx["dramt"].ToString().toDouble() > 0 && drx["vchnum"].ToString().Trim() == dr["vchnum"].ToString().Trim())
                                {
                                    myNar = drx["NARATION"].ToString();
                                    break;
                                }
                            }
                            dr["NARATION"] = myNar;
                            dr["othrmk"] = dr["NARATION"];
                        }
                    }

                    DataView dv = new DataView(dt, "", "", DataViewRowState.CurrentRows);
                    dt11 = dv.ToTable(true, "FSTR");

                    double amtxx = 0;

                    for (int i = 0; i < dt11.Rows.Count; i++)
                    {
                        amtxx = dt.Compute("SUM(DRAMT)", "FSTR='" + dt11.Rows[i]["FSTR"].ToString().Trim() + "'").ToString().toDouble();
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr["fstr"].ToString().Trim() == dt11.Rows[i]["FSTR"].ToString().Trim())
                            {
                                dr["TOTAMTWORD"] = fgen.ConvertNumbertoWords(amtxx.ToString());
                            }
                        }
                    }



                    dsRep = new DataSet();
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);
                    frm_rptName = "vch_rpt_simple";
                    if (frm_cocd == "MEGH") frm_rptName = "vch_rpt_simple_mrr";
                    if (doc_GST == "GCC") frm_rptName = "vch_rpt_simple_intl";
                    Print_Report_BYDS(frm_cocd, frm_mbr, "vch_rpt_simple", frm_rptName, dsRep, "", "Y");
                }
                break;

            case "F70285":
                string so_title = "";
                so_title = "Order Registration";
                string opt = fgen.getOption(frm_qstr, frm_cocd, "W0018", "OPT_ENABLE");
                mq0 = barCode.Substring(3, 2);
                if (mq0 == "4F")
                {
                    SQuery = "Select a.branchcd||a.type||Trim(A.ordno)||to_Char(A.orddt,'yyyymmdd') as fstr,'" + opt + "' AS btoprint,'SOMASQ' as TAB_NAME,'" + so_title + "' as so_title,'SO Number' as h1,'SO Dated' as h2,g.aname AS CONSNAME, g.addr1 AS COS_ADR1,G.ADDR2 AS CONS_aDR2,G.ADDR3 AS CONS_aDR3, g.telnum AS CONS_TEL,g.girno AS CONS_PAN, SUBSTR(G.GST_NO,0,2) AS CONS_CODE, g.email AS CSMAIL,G.TYPE AS CONS_TYPE,g.staten AS CONS_STATE,  g.gst_no AS CONS_GST,c.cpartno AS IPART, B.ADDR1,B.ADDR2,B.ADDR3,b.addr4,b.del_note,B.RC_NUM,B.EXC_NUM,(case when LENGTH(A.DELR_DATE)>2 THEN TO_CHAR(A.DELR_DATE,'DD/MM/YYYY') ELSE TO_CHAR(A.ORDDT,'DD/MM/YYYY') END) AS EFFECTIVEDT,/*substr(b.gst_no,0,2)*/ B.STAFFCD as statecode,b.staten,b.gst_no,b.girno as pan1,C.UNIT AS ITEM_UNIT,B.ANAME,C.ICODE AS ITEM_CODE,C.INAME AS ITEM_NAME,c.hscode, t.name as So_Type,b.email as p_email,to_char(a.orddt,'dd/mm/yyyy') as vdd,nvl(del_wk,0) as delwk,nvl(a.amdtno,0) as amdtnumb,A.* from SOMASQ a LEFT OUTER JOIN CSMST G ON TRIM(A.CSCODE)=TRIM(G.ACODE),famst b,item c,type t where trim(a.acode)=trim(b.acode) and trim(a.icode)=trim(c.icode)  and trim(a.type)=trim(t.type1) and t.id='V' AND A.BRANCHCD||trim(a.type)||TRIM(a.ordno)||TO_CHAR(A.orddt,'DD/MM/YYYY') in (" + barCode + ") order by a.orddt,a.ordno,a.srno";
                }
                else
                {
                    SQuery = "Select a.branchcd||a.type||Trim(A.ordno)||to_Char(A.orddt,'yyyymmdd') as fstr,'" + opt + "' AS btoprint,'SOMASQ' as TAB_NAME,'" + so_title + "' as so_title,'SO Number' as h1,'SO Dated' as h2,(case when nvl(trim(G.ANAME),'-')='-' then b.aname else g.aname end) AS CONSNAME,(case when nvl(trim(G.ADDR1),'-')='-' then b.addr1 else g.addr1 end) AS COS_ADR1,(case when nvl(trim(G.ADDR2),'-')='-'  then b.addr2 else g.addr2 end) AS CONS_aDR2,(case when nvl(trim(G.ADDR3),'-')='-' then b.addr3 else g.addr3 end) AS CONS_aDR3,(case when nvl(trim(G.TELNUM),'-')='-' then b.telnum else g.telnum end) AS CONS_TEL,(case when nvl(trim(G.GIRNO),'-')='-' then b.girno else g.girno end) AS CONS_PAN,(case when nvl(trim(G.GST_NO),'-')='-' then SUBSTR(b.GST_NO,0,2) else SUBSTR(G.GST_NO,0,2) end) AS CONS_CODE,(case when nvl(trim(G.EMAIL),'-')='-' then b.email else g.email end) AS CSMAIL,G.TYPE AS CONS_TYPE,(case when nvl(trim(G.STATEN),'-')='-' then b.staten else g.staten end) AS CONS_STATE, (case when nvl(trim(G.GST_NO),'-') ='-' then b.gst_no else g.gst_no end) AS CONS_GST,c.cpartno AS IPART, B.ADDR1,B.ADDR2,B.ADDR3,/*substr(b.gst_no,0,2)*/ B.STAFFCD as statecode,b.staten,b.gst_no,b.girno as pan1,C.UNIT AS ITEM_UNIT,B.ANAME,C.ICODE AS ITEM_CODE,C.INAME AS ITEM_NAME,c.hscode, t.name as So_Type,b.email as p_email,to_char(a.orddt,'dd/mm/yyyy') as vdd,nvl(del_wk,0) as delwk,nvl(a.amdtno,0) as amdtnumb,A.* from SOMASQ a LEFT OUTER JOIN CSMST G ON TRIM(A.CSCODE)=TRIM(G.ACODE),famst b,item c,type t where trim(a.acode)=trim(b.acode) and trim(a.icode)=trim(c.icode)  and trim(a.type)=trim(t.type1) and t.id='V' AND A.BRANCHCD||trim(a.type)||TRIM(a.ordno)||TO_CHAR(A.orddt,'DD/MM/YYYY') in (" + barCode + ") order by a.orddt,a.ordno,a.srno";
                }
                dsRep = new DataSet();
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    //BarCode adding
                    dt = fgen.addBarCode(dt, "fstr", true);
                    dsRep.Tables.Add(dt);
                    if (mq0 == "44")
                    {
                        frm_rptName = "ord_reg_stud";
                    }
                    else if (mq0 == "4F")
                    {
                        frm_rptName = "ord_reg_stud_exp";
                    }
                    else
                    {
                        frm_rptName = "ord_reg_stud_all";
                    }
                    Print_Report_BYDS(frm_cocd, frm_mbr, frm_rptName, frm_rptName, dsRep, "S.O. Entry Report", "Y");
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F70378":
                mq2 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                mq3 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL2");
                mq4 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL3");
                ph_tbl = new DataTable();
                dt3 = new DataTable();
                dt3.Columns.Add(new DataColumn("br1", typeof(string)));
                dt3.Columns.Add(new DataColumn("br2", typeof(string)));
                dt3.Columns.Add(new DataColumn("br3", typeof(string)));
                dt3.Columns.Add(new DataColumn("br4", typeof(string)));
                dt3.Columns.Add(new DataColumn("br5", typeof(string)));
                dt3.Columns.Add(new DataColumn("br6", typeof(string)));
                dt3.Columns.Add(new DataColumn("br7", typeof(string)));
                dt3.Columns.Add(new DataColumn("br8", typeof(string)));
                dt3.Columns.Add(new DataColumn("br9", typeof(string)));
                dt = new DataTable();
                mq0 = "SELECT '" + mq4 + "' as month_name,BRANCHCD,to_char(VCHDATE,'dd/mm/yyyy') as vchdate ,SUM(CRAMT) AS CRAMT FROM VOUCHER WHERE BRANCHCD!='88' AND TYPE LIKE '2%' AND TRIM(SUBSTR(RCODE,1,2)) IN ('05','06') AND tO_char(VCHDATE,'MM/YYYY')='" + mq3 + "' GROUP BY BRANCHCD,to_char(VCHDATE,'dd/mm/yyyy') ORDER BY VCHDATE";
                dt = fgen.getdata(frm_qstr, frm_cocd, mq0);

                dt1 = new DataTable();
                mq1 = "select BRANCHCD,to_char(VCHDATE,'dd/mm/yyyy') as vchdate,SUM(DRAMT) AS DRAMT from voucher where branchcd!='88' and type like '1%' and TRIM(SUBSTR(RCODE,1,2)) IN ('16','18') and to_char(vchdate,'MM/YYYY')= '" + mq3 + "' GROUP BY BRANCHCD,to_char(VCHDATE,'dd/mm/yyyy')";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, mq1);

                dt2 = new DataTable();
                mq5 = "select type1,trim(name) as brname from type where id='B' order by type1";
                dt2 = fgen.getdata(frm_qstr, frm_cocd, mq5);

                dt4 = new DataTable();
                mq2 = "SELECT BRANCHCD,SUM(CRAMT) AS CRAMT FROM VOUCHER WHERE BRANCHCD!='88' AND TYPE LIKE '2%' AND TRIM(SUBSTR(RCODE,1,2)) IN ('05','06') AND tO_char(VCHDATE,'MM/YYYY')='" + mq3 + "' GROUP BY BRANCHCD ORDER BY BRANCHCD";
                dt4 = fgen.getdata(frm_qstr, frm_cocd, mq2);

                ph_tbl = new DataTable();
                ph_tbl = dt.Clone();
                ph_tbl.Columns.Add(new DataColumn("V1", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("V2", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("V3", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("V4", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("V5", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("V6", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("V7", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("V8", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("V9", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("TOTAL", typeof(double)));

                ph_tbl.Columns.Add(new DataColumn("BR_CR1", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("BR_CR2", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("BR_CR3", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("BR_CR4", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("BR_CR5", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("BR_CR6", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("BR_CR7", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("BR_CR8", typeof(double)));
                ph_tbl.Columns.Add(new DataColumn("BR_CR9", typeof(double)));

                if (dt.Rows.Count > 0)
                {
                    int k = 1;
                    dr1 = dt3.NewRow();
                    for (int j = 0; j < dt2.Rows.Count; j++)
                    {
                        dr1["br" + k] = dt2.Rows[j]["brname"].ToString();
                        k++;
                    }
                    dt3.Rows.Add(dr1);
                    dt3.TableName = "Heading";
                    dsRep.Tables.Add(dt3);

                    DataView view1im = new DataView(dt);
                    DataTable dtdrsim = new DataTable();
                    dtdrsim = view1im.ToTable(true, "VCHDATE");
                    foreach (DataRow dr0 in dtdrsim.Rows)
                    {
                        DataView viewim = new DataView(dt, "VCHDATE='" + dr0["VCHDATE"] + "'", "", DataViewRowState.CurrentRows);
                        DataTable dty = new DataTable();
                        dty = viewim.ToTable();

                        DataRow dr2 = ph_tbl.NewRow();
                        db1 = 0; db2 = 0;
                        for (int i = 0; i < dty.Rows.Count; i++)
                        {
                            dr2["month_name"] = dty.Rows[i]["month_name"].ToString().Trim();
                            dr2["vchdate"] = Convert.ToDateTime(dty.Rows[i]["VCHDATE"].ToString().Trim()).ToString("dd/MM/yyyy");
                            db1 += fgen.make_double(dty.Rows[i]["CRAMT"].ToString().Trim());
                            dr2["CRAMT"] = db1;
                            mq10 = fgen.seek_iname_dt(dt1, "branchcd='" + dty.Rows[i]["branchcd"].ToString().Trim() + "' and vchdate='" + dty.Rows[i]["vchdate"].ToString().Trim() + "'", "dramt");
                            if (dty.Rows[i]["branchcd"].ToString().Trim() == "00")
                            {
                                dr2["V1"] = fgen.seek_iname_dt(dt1, "branchcd='" + dty.Rows[i]["branchcd"].ToString().Trim() + "' and vchdate='" + dty.Rows[i]["vchdate"].ToString().Trim() + "'", "dramt");
                            }
                            if (dty.Rows[i]["branchcd"].ToString().Trim() == "01")
                            {
                                dr2["V2"] = fgen.seek_iname_dt(dt1, "branchcd='" + dty.Rows[i]["branchcd"].ToString().Trim() + "' and vchdate='" + dty.Rows[i]["vchdate"].ToString().Trim() + "'", "dramt");
                            }
                            if (dty.Rows[i]["branchcd"].ToString().Trim() == "02")
                            {
                                dr2["V3"] = fgen.seek_iname_dt(dt1, "branchcd='" + dty.Rows[i]["branchcd"].ToString().Trim() + "' and vchdate='" + dty.Rows[i]["vchdate"].ToString().Trim() + "'", "dramt");
                            }
                            if (dty.Rows[i]["branchcd"].ToString().Trim() == "03")
                            {
                                dr2["V4"] = fgen.seek_iname_dt(dt1, "branchcd='" + dty.Rows[i]["branchcd"].ToString().Trim() + "' and vchdate='" + dty.Rows[i]["vchdate"].ToString().Trim() + "'", "dramt");
                            }
                            if (dty.Rows[i]["branchcd"].ToString().Trim() == "04")
                            {
                                dr2["V5"] = fgen.seek_iname_dt(dt1, "branchcd='" + dty.Rows[i]["branchcd"].ToString().Trim() + "' and vchdate='" + dty.Rows[i]["vchdate"].ToString().Trim() + "'", "dramt");
                            }
                            if (dty.Rows[i]["branchcd"].ToString().Trim() == "05")
                            {
                                dr2["V6"] = fgen.seek_iname_dt(dt1, "branchcd='" + dty.Rows[i]["branchcd"].ToString().Trim() + "' and vchdate='" + dty.Rows[i]["vchdate"].ToString().Trim() + "'", "dramt");
                            }
                            if (dty.Rows[i]["branchcd"].ToString().Trim() == "06")
                            {
                                dr2["V7"] = fgen.seek_iname_dt(dt1, "branchcd='" + dty.Rows[i]["branchcd"].ToString().Trim() + "' and vchdate='" + dty.Rows[i]["vchdate"].ToString().Trim() + "'", "dramt");
                            }
                            if (dty.Rows[i]["branchcd"].ToString().Trim() == "07")
                            {
                                dr2["V8"] = fgen.seek_iname_dt(dt1, "branchcd='" + dty.Rows[i]["branchcd"].ToString().Trim() + "' and vchdate='" + dty.Rows[i]["vchdate"].ToString().Trim() + "'", "dramt");
                            }
                            if (dty.Rows[i]["branchcd"].ToString().Trim() == "08")
                            {
                                dr2["V9"] = fgen.seek_iname_dt(dt1, "branchcd='" + dty.Rows[i]["branchcd"].ToString().Trim() + "' and vchdate='" + dty.Rows[i]["vchdate"].ToString().Trim() + "'", "dramt");
                            }
                            db2 = fgen.make_double(dr2["V1"].ToString().Trim()) + fgen.make_double(dr2["V4"].ToString().Trim()) + fgen.make_double(dr2["V5"].ToString().Trim()) + fgen.make_double(dr2["V8"].ToString().Trim());
                            dr2["BR_CR1"] = fgen.seek_iname_dt(dt4, "branchcd='00'", "cramt");
                            dr2["BR_CR2"] = fgen.seek_iname_dt(dt4, "branchcd='01'", "cramt");
                            dr2["BR_CR3"] = fgen.seek_iname_dt(dt4, "branchcd='02'", "cramt");
                            dr2["BR_CR4"] = fgen.seek_iname_dt(dt4, "branchcd='03'", "cramt");
                            dr2["BR_CR5"] = fgen.seek_iname_dt(dt4, "branchcd='04'", "cramt");
                            dr2["BR_CR6"] = fgen.seek_iname_dt(dt4, "branchcd='05'", "cramt");
                            dr2["BR_CR7"] = fgen.seek_iname_dt(dt4, "branchcd='06'", "cramt");
                            dr2["BR_CR8"] = fgen.seek_iname_dt(dt4, "branchcd='07'", "cramt");
                            dr2["BR_CR9"] = fgen.seek_iname_dt(dt4, "branchcd='08'", "cramt");
                        }
                        dr2["TOTAL"] = db2;
                        ph_tbl.Rows.Add(dr2);
                    }
                    ph_tbl.TableName = "prepcur";
                    dsRep.Tables.Add(ph_tbl);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_advg_dail_col", "std_advg_dail_col", dsRep, header_n);
                }
                break;
            case "F70608":
            case "F77212":
            case "F70610":
                #region Debtors/Creditor Ageing Detailed Report
                SQuery = ""; cond = ""; m1 = ""; eff_Dt = "";
                bsschCond = "";
                //===================             
                if (frm_ulvl == "M") cond = "and trim(acode) like '" + frm_uname.Trim() + "%'";
                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE").Length > 3)
                    cond = "and trim(acode) in (" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE").Trim() + ")";

                if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE").Length > 3)
                    bsschCond = "and trim(m.bssch) like '" + fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE").Trim() + "%'";


                //SQuery = "select 'Debtor Ageing As on Date " + todt + " with Transaction summary' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.total) as Total_Outstanding,sum(n.slab1) as Current_Os,sum(n.slab2) as OVER_30_60,sum(n.slab3) as OVER_61_90,sum(n.slab4) as OVER_90_180,sum(n.slab5) as OVER_181,n.acode,m.ADDR1 as Address,nvl(m.pay_num,0) as P_days,nvl(m.Climit,0)  as Cr_limit from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  ,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 31 AND 60) THEN dramt-cramt END) as slab2,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 61 AND 90) THEN dramt-cramt END) as slab3,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 91 AND 180) THEN dramt-cramt END) as slab4,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate > 181) THEN dramt-cramt END) as slab5 from  recdataw_" + frm_mbr + " where branchcd='" + frm_mbr + "' and acode like '16%' " + cond + ") n ,famst m where trim(n.acode)=trim(m.acode) group by m.aname,n.invno,m.addr1,nvl(m.climit,0),nvl(m.pay_num,0),n.acode,m.zcode,n.invdate order by m.aname,vdd,n.invno";
                string grp_cond = "16";
                string grp_name = "Debtors";

                string onePageOneParty = fgenMV.Fn_Get_Mvar(frm_qstr, "U_F1").Trim();

                //fgenMV.Fn_Set_Mvar(frm_qstr, "U_CONS_DATA", branch_Cd); 
                string cond_dtl = fgenMV.Fn_Get_Mvar(frm_qstr, "U_CONS_DATA");

                if (mktggrp.Length < 2) mktggrp = fgenMV.Fn_Get_Mvar(frm_qstr, "U_III").Left(4);
                if (mktggrp.Length > 2)
                {
                    bsschCond += " and substr(m.mktggrp,1,4)='" + mktggrp + "' ";
                }

                m1 = fgen.seek_iname(frm_qstr, frm_cocd, "select params from controls where id='R01'", "params");

                eff_Dtd = " a.vchdate>= to_date('" + m1.Trim() + "','dd/mm/yyyy') and a.vchdate<= to_date('" + todt.Trim() + "','dd/mm/yyyy') ";



                if (cond_dtl.Contains("88"))
                {
                    SQuery = "select '00' as branchcd,TRIM(ACODE) AS ACODE,TRIM(upper(INVNO)) AS INVNO,INVDATE,SUM(DRAMT) AS DRAMT,SUM(CRAMT) AS CRAMT,SUM(DRAMT)-SUM(cRAMT) AS NET,trim(Grp) as grp from (SELECT a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM VOUCHER a,famst b WHERE trim(a.acode)=trim(B.acode) and a.BRANCHCD not in ('DD','88') AND " + eff_Dtd + "  and  SUBSTR(b.grp,1,2)IN('02','05','06','16') UNION ALL SELECT a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM RECEBAL a,famst b WHERE trim(a.acode)=trim(b.acode) and a.BRANCHCD not in ('DD','88') and SUBSTR(b.grp,1,2)IN('02','05','06','16') ) c  GROUP BY trim(Grp),TRIM(ACODE),TRIM(upper(INVNO)),INVDATE HAVING SUM(dRAMT)-SUM(CRAMT)<>0";


                    //SQuery = "select '" + grp_name + " Consolidated Pending Bills As on " + todt + " (All Bills)' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'YYYY MONTH') as mthname,to_char(n.invdate,'YYYYMM') as mthnum,to_char(n.invdate,'yyyymmdd') as vdd,n.Dramt as Total_Outstanding,n.Cramt as Current_Os,n.Dramt-n.Cramt as bal,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,n.invdate+nvl(m.pay_num,0) as Due_date,n.branchcd,nvl(m.lbtapp,'N') as lbtapp,m.mktggrp from (SELECT acode,invno,invdate,dramt,cramt,net ,'-' as branchcd from  recdataw_ALL where branchcd not in ('DD','88') and grp like '" + grp_cond + "%'  " + cond + ") n ,famst m where trim(n.acode)=trim(m.acode) " + bsschCond + " order by m.aname,vdd,n.invno";
                    if (iconID == "F70610")
                    {
                        grp_cond = "06";
                        grp_name = "Suppliers";
                        SQuery = "select '" + grp_name + " Consolidated Pending Bills As on " + todt + " (All Bills)' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'YYYY MONTH') as mthname,to_char(n.invdate,'YYYYMM') as mthnum,to_char(n.invdate,'yyyymmdd') as vdd,n.Cramt as Total_Outstanding,n.Dramt as Current_Os,n.Cramt-n.Dramt as bal,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,n.invdate+nvl(m.pay_num,0) as Due_date,n.branchcd,nvl(m.lbtapp,'N') as lbtapp,m.mktggrp from (SELECT acode,invno,invdate,dramt,cramt,net,'-' as branchcd  from  (" + SQuery + ") where branchcd not in ('DD','88') and grp like '" + grp_cond + "%'  " + cond + ") n ,famst m where trim(n.acode)=trim(m.acode) " + bsschCond + " order by m.aname,vdd,n.invno";
                    }
                    else
                    {
                        SQuery = "select '" + grp_name + " Consolidated Pending Bills As on " + todt + " (All Bills)' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'YYYY MONTH') as mthname,to_char(n.invdate,'YYYYMM') as mthnum,to_char(n.invdate,'yyyymmdd') as vdd,n.Dramt as Total_Outstanding,n.Cramt as Current_Os,n.Dramt-n.Cramt as bal,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,n.invdate+nvl(m.pay_num,0) as Due_date,n.branchcd,nvl(m.lbtapp,'N') as lbtapp,m.mktggrp from (SELECT acode,invno,invdate,dramt,cramt,net ,'-' as branchcd from  (" + SQuery + ") where branchcd not in ('DD','88') and grp like '" + grp_cond + "%'  " + cond + ") n ,famst m where trim(n.acode)=trim(m.acode) " + bsschCond + " order by m.aname,vdd,n.invno";
                    }
                }
                else
                {

                    SQuery = "select branchcd,TRIM(ACODE) AS ACODE,TRIM(upper(INVNO)) AS INVNO,INVDATE,SUM(DRAMT) AS DRAMT,SUM(CRAMT) AS CRAMT,SUM(DRAMT)-SUM(cRAMT) AS NET,trim(Grp) as grp from (SELECT a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM VOUCHER a,famst b WHERE trim(a.acode)=trim(B.acode) and a.BRANCHCD='" + frm_mbr + "' AND " + eff_Dtd + "  and  SUBSTR(b.grp,1,2)IN('02','05','06','16') UNION ALL SELECT a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM RECEBAL a,famst b WHERE trim(a.acode)=trim(b.acode) and a.BRANCHCD='" + frm_mbr + "' and SUBSTR(b.grp,1,2)IN('02','05','06','16') ) c  GROUP BY branchcd,trim(Grp),TRIM(ACODE),TRIM(upper(INVNO)),INVDATE HAVING SUM(dRAMT)-SUM(CRAMT)<>0";



                    //SQuery = "select '" + grp_name + " Pending Bills As on " + todt + " (All Bills)' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'YYYY MONTH') as mthname,to_char(n.invdate,'YYYYMM') as mthnum,to_char(n.invdate,'yyyymmdd') as vdd,n.Dramt as Total_Outstanding,n.Cramt as Current_Os,n.Dramt-n.Cramt as bal,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,n.invdate+nvl(m.pay_num,0) as Due_date,n.branchcd,nvl(m.lbtapp,'N') as lbtapp,m.mktggrp from (SELECT acode,invno,invdate,dramt,cramt,net,'-' as branchcd  from  recdataw_" + frm_mbr + " where branchcd='" + frm_mbr + "' and grp like '" + grp_cond + "%'  " + cond + ") n ,famst m where trim(n.acode)=trim(m.acode) " + bsschCond + " order by m.aname,vdd,n.invno";
                    if (iconID == "F70610")
                    {
                        grp_cond = "06";
                        grp_name = "Suppliers";
                        if (fgen.getOption(frm_qstr, frm_cocd, "W0228", "OPT_ENABLE") == "Y")
                        {
                            SQuery = "select '" + grp_name + " Pending Bills As on " + todt + " (All Bills)' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'YYYY MONTH') as mthname,to_char(n.invdate,'YYYYMM') as mthnum,to_char(n.invdate,'yyyymmdd') as vdd,n.Cramt as Total_Outstanding,n.Dramt as Current_Os,n.Cramt-n.Dramt as bal,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,n.invdate+nvl(m.pay_num,0) as Due_date,n.branchcd,nvl(m.lbtapp,'N') as lbtapp,m.mktggrp from (SELECT acode,invno,invdate,dramt,cramt,net,'-' as branchcd  from  (" + SQuery + ") where branchcd='" + frm_mbr + "' and grp like '" + grp_cond + "%'  " + cond + ") n ,famst m where trim(n.acode)=trim(m.acode) " + bsschCond + " order by m.aname,vdd,n.invno";
                        }
                        else
                        {
                            SQuery = "select '" + grp_name + " Pending Bills As on " + todt + " (All Bills)' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'YYYY MONTH') as mthname,to_char(n.invdate,'YYYYMM') as mthnum,to_char(n.invdate,'yyyymmdd') as vdd,n.Cramt as Total_Outstanding,n.Dramt as Current_Os,n.Cramt-n.Dramt as bal,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,n.invdate+nvl(m.pay_num,0) as Due_date,n.branchcd,nvl(m.lbtapp,'N') as lbtapp,m.mktggrp from (SELECT acode,invno,invdate,dramt,cramt,net,'-' as branchcd  from  (" + SQuery + ") where branchcd='" + frm_mbr + "' and grp like '" + grp_cond + "%'  " + cond + ") n ,famst m where trim(n.acode)=trim(m.acode) " + bsschCond + " order by m.aname,vdd,n.invno";
                        }

                    }
                    else
                    {
                        if (fgen.getOption(frm_qstr, frm_cocd, "W0228", "OPT_ENABLE") == "Y")
                        {

                            SQuery = "select '" + grp_name + " Pending Bills As on " + todt + " (All Bills)' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'YYYY MONTH') as mthname,to_char(n.invdate,'YYYYMM') as mthnum,to_char(n.invdate,'yyyymmdd') as vdd,n.Dramt as Total_Outstanding,n.Cramt as Current_Os,n.Dramt-n.Cramt as bal,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,n.invdate+nvl(m.pay_num,0) as Due_date,n.branchcd,nvl(m.lbtapp,'N') as lbtapp,m.mktggrp from (SELECT acode,invno,invdate,dramt,cramt,net,'-' as branchcd  from  (" + SQuery + ") where branchcd='" + frm_mbr + "' and grp like '" + grp_cond + "%'  " + cond + ") n ,(select a.acode,a.aname,a.ADDR1,nvl(b.pay_num,0) as pay_num,nvl(b.Climit,0) as Climit,a.lbtapp,a.mktggrp from famst a left outer join (select acode,nvl(br_paynum,0) as pay_num,nvl(br_climit,0) as Climit from famstbal where branchcd='" + frm_mbr + "') b on trim(a.acode)=trim(B.acode)) m where trim(n.acode)=trim(m.acode) " + bsschCond + " order by m.aname,vdd,n.invno";
                        }
                        else
                        {
                            SQuery = "select '" + grp_name + " Pending Bills As on " + todt + " (All Bills)' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,to_char(n.invdate,'YYYY MONTH') as mthname,to_char(n.invdate,'YYYYMM') as mthnum,to_char(n.invdate,'yyyymmdd') as vdd,n.Dramt as Total_Outstanding,n.Cramt as Current_Os,n.Dramt-n.Cramt as bal,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,n.invdate+nvl(m.pay_num,0) as Due_date,n.branchcd,nvl(m.lbtapp,'N') as lbtapp,m.mktggrp from (SELECT acode,invno,invdate,dramt,cramt,net,'-' as branchcd  from  (" + SQuery + ") where branchcd='" + frm_mbr + "' and grp like '" + grp_cond + "%'  " + cond + ") n ,famst m where trim(n.acode)=trim(m.acode) " + bsschCond + " order by m.aname,vdd,n.invno";
                        }

                    }
                }
                header_n = grp_name;

                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, "SELECT TYPE1,NAME,VCHNUM FROM TYPE WHERE ID='B' ");

                //=============
                dtm = new DataTable();
                dtm.Columns.Add("onepage", typeof(string));
                dtm.Columns.Add("header", typeof(string));
                dtm.Columns.Add("Branch", typeof(string));
                dtm.Columns.Add("Party", typeof(string));
                dtm.Columns.Add("invno", typeof(string));
                dtm.Columns.Add("invdate", typeof(string));
                dtm.Columns.Add("mthname", typeof(string));
                dtm.Columns.Add("mthnum", typeof(string));
                dtm.Columns.Add("vdd", typeof(string));
                dtm.Columns.Add("Total_Outstanding", typeof(decimal));
                dtm.Columns.Add("Current_Os", typeof(decimal));
                dtm.Columns.Add("acode", typeof(string));
                dtm.Columns.Add("Address", typeof(string));
                dtm.Columns.Add("P_days", typeof(string));
                dtm.Columns.Add("Cr_limit", typeof(decimal));
                dtm.Columns.Add("bal", typeof(decimal));
                dtm.Columns.Add("Due_date", typeof(string));
                dtm.Columns.Add("cum_Total", typeof(decimal));
                dtm.Columns.Add("ageing", typeof(string));
                dtm.Columns.Add("mktggrp", typeof(string));
                mq2 = System.DateTime.Now.Date.ToString("dd/MM/yyyy");
                DateTime dd1, dd2;
                dd1 = Convert.ToDateTime(mq2);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        //ageing = system date - bill date + payment terms//asked from vipsir                    
                        dr1 = dtm.NewRow();
                        dr1["onepage"] = onePageOneParty;
                        dr1["header"] = dt.Rows[i]["header"].ToString().Trim();
                        dr1["Party"] = dt.Rows[i]["Party"].ToString().Trim() + (dt.Rows[i]["lbtapp"].ToString().Trim() == "Y" ? "*" : "");
                        dr1["Branch"] = fgen.seek_iname_dt(dt1, "TYPE1='" + dt.Rows[i]["branchcd"].ToString().Trim() + "'", "VCHNUM");
                        dr1["invno"] = dt.Rows[i]["invno"].ToString().Trim();
                        dr1["invdate"] = dt.Rows[i]["invdate"].ToString().Trim();
                        dd2 = Convert.ToDateTime(dr1["invdate"].ToString().Trim());
                        dr1["mthname"] = dt.Rows[i]["mthname"].ToString().Trim();
                        dr1["mthnum"] = dt.Rows[i]["mthnum"].ToString().Trim();
                        dr1["vdd"] = dt.Rows[i]["vdd"].ToString().Trim();
                        dr1["Total_Outstanding"] = fgen.make_double(dt.Rows[i]["Total_Outstanding"].ToString().Trim());
                        dr1["Current_Os"] = fgen.make_double(dt.Rows[i]["Current_Os"].ToString().Trim());
                        dr1["acode"] = dt.Rows[i]["acode"].ToString().Trim();
                        dr1["Address"] = dt.Rows[i]["Address"].ToString().Trim();
                        dr1["P_days"] = dt.Rows[i]["P_days"].ToString().Trim();
                        dr1["Cr_limit"] = fgen.make_double(dt.Rows[i]["Current_Os"].ToString().Trim());
                        dr1["bal"] = fgen.make_double(dt.Rows[i]["bal"].ToString().Trim());
                        dr1["Due_date"] = Convert.ToDateTime(dt.Rows[i]["Due_date"].ToString().Trim()).ToString("dd/MM/yyyy");
                        dr1["cum_Total"] = 0;// dt.Rows[i]["cum_Total"].ToString().Trim();//THIS IS RUNNING TOTAL FIELD IN RPT
                        TimeSpan tS = (dd1 - dd2);
                        int dys = tS.Days;
                        int pdays = Convert.ToInt32(dr1["P_days"]);
                        int gg = dys - pdays;
                        dr1["ageing"] = gg;
                        dr1["mktggrp"] = dt.Rows[i]["mktggrp"].ToString().Trim();

                        if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_CLIENT_GRP") == "SG_TYPE")
                        {
                            if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_YESNO") == "Y" && cond != "")
                            {
                                continue;
                            }
                            else if (dt.Rows[i]["lbtapp"].ToString().Trim() == "Y" && fgen.make_double(dt.Rows[i]["bal"].ToString().Trim()) < 0)
                            {
                                continue;
                            }
                        }

                        dtm.Rows.Add(dr1);
                        //==========                     
                    }
                }
                if (dtm.Rows.Count > 0)
                {
                    dtm.TableName = "Prepcur";
                    dsRep.Tables.Add(dtm);
                    frm_rptName = "billwise_debp";
                    if (onePageOneParty == "N") frm_rptName = "billwise_deb";
                    Print_Report_BYDS(frm_cocd, frm_mbr, "billwise_deb", frm_rptName, dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;

            case "F70380":
            case "F70381":
                header_n = "Bill Receivables";
                #region Bill Receivables & Payable Report
                SQuery = ""; cond = "";
                grp_cond = "";
                string mktgCond = "";
                string typecond = "";
                if (hfhcid.Value == "F70380")
                {
                    header_n = "Bill Receivables (as on " + todt + ")";
                    typecond = "((type like '4%') or (type in('59','58')))  and ";
                }
                else
                {
                    header_n = "Bill Payables (as on " + todt + ")";
                    typecond = "type like '5%' and type not in('59','58') and ";
                }
                //===================             
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                part_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTCODE");

                if (part_cd.Trim().Length <= 1)
                {
                    if (hfhcid.Value == "F70380")
                    {
                        grp_cond = "and substr(acode,1,2) in ('16') ";
                    }
                    else
                    {
                        grp_cond = "and substr(acode,1,2) in ('05','06')";
                    }

                }
                else
                {

                    if (part_cd.Contains("'"))
                    {
                        grp_cond = " and acode in (" + part_cd + ")";
                    }
                    else
                    {
                        grp_cond = " and acode like '" + part_cd + "%'";
                    }
                }
                if (party_cd.Length > 2)
                {
                    mktgCond = " and trim(UPPER(ACMGR_NAME))='" + party_cd + "'";
                }

                if (hfhcid.Value == "F70380")
                {
                    mq10 = "dramt as bill_Amt";
                }
                else
                {
                    mq10 = "cramt as bill_Amt";
                }
                m1 = fgen.seek_iname(frm_qstr, frm_cocd, "select params from controls where id='R01'", "params");

                //ACT_sTDT
                string xprd12 = "and a.VCHDATE<= to_date('" + todt.Trim() + "','dd/mm/yyyy') AND a.VCHDATE>= to_date('" + m1.Trim() + "','dd/mm/yyyy')";
                if (frm_cocd == "AERO")
                {
                    xprd12 = "and vchdate>= to_date('" + m1.Trim() + "','dd/mm/yyyy') and vchdate<= to_date('" + todt.Trim() + "','dd/mm/yyyy')";
                }

                SQuery = "create or replace view RecDataW_" + frm_mbr + " as (select branchcd,TRIM(ACODE) AS ACODE,TRIM(upper(INVNO)) AS INVNO,INVDATE,SUM(DRAMT) AS DRAMT,SUM(CRAMT) AS CRAMT,SUM(DRAMT)-SUM(cRAMT) AS NET,trim(Grp) as grp from (SELECT a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM VOUCHER a,famst b WHERE trim(a.acode)=trim(B.acode) and a.BRANCHCD='" + frm_mbr + "' " + xprd12 + "  and  SUBSTR(b.grp,1,2) IN ('02','05','06','16') UNION ALL SELECT a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM RECEBAL a,famst b WHERE trim(a.acode)=trim(b.acode) and a.BRANCHCD='" + frm_mbr + "' and SUBSTR(b.grp,1,2)IN('02','05','06','16') ) c  GROUP BY branchcd,trim(Grp),TRIM(ACODE),TRIM(upper(INVNO)),INVDATE HAVING SUM(dRAMT)-SUM(CRAMT)<>0)";
                fgen.execute_cmd(frm_qstr, frm_cocd, SQuery);

                SQuery = "select '" + header_n + "' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,d.mthname,d.mthnum,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.total) as Total_Outstanding,sum(n.slab1) as Current_Os,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,sum(n.total)-m.Climit  as bal,n.invdate+nvl(m.pay_num,0) as Due_date from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('26/10/2020','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  from  recdataw_" + frm_mbr + " where   branchcd='" + frm_mbr + "' " + grp_cond + "  ) n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum group by m.aname,n.invno,m.addr1,m.climit,m.pay_num,n.acode,m.zcode,n.invdate,nvl(m.pay_num,0),d.mthname,d.mthnum order by m.aname,vdd,n.invno,d.mthnum";

                SQuery = "select '" + header_n + "' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,d.mthname,d.mthnum,to_char(n.invdate,'yyyymmdd') as vdd,(n.total) as Total_Outstanding,(n.slab1) as Current_Os,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,(n.total) as bal,n.invdate+nvl(m.pay_num,0) as Due_date,n.billdays from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1,TO_DATE('" + todt + "','DD/MM/YYYY')-invdate as billdays from  recdataw_" + frm_mbr + " where   branchcd='" + frm_mbr + "' " + grp_cond + "   ) n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum order by m.aname,vdd,n.invno,d.mthnum";//in this qry pymt term coming from famst
                if (frm_cocd == "AERO")
                {
                    SQuery = "select '" + header_n + "' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,d.mthname,d.mthnum,to_char(n.invdate,'yyyymmdd') as vdd,(n.bill_Amt) as Total_Outstanding,(n.slab1) as Current_Os,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,(n.total) as bal,n.invdate+nvl(W.crdys_party,0) as Due_date,n.billdays from (SELECT acode,invno,invdate," + mq10 + " ,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1,TO_DATE('" + todt + "','DD/MM/YYYY')-invdate as billdays from  recdataw_" + frm_mbr + " where   branchcd='" + frm_mbr + "'   and dramt-cramt<>0  " + grp_cond + "   ) n ,famst m ,(Select distinct acode,crdys_party from wb_famstdtl where branchcd='" + frm_mbr + "' and type='CR' " + mktgCond + ") w,mths d where trim(n.acode)=trim(m.acode) and trim(n.acode)=trim(w.acode) and to_char(n.invdate,'mm')=d.mthnum order by m.aname,vdd,n.invno,d.mthnum";  //in this qry pymt term coming from CR Form ...  and dramt-cramt>0  //old
                }
                else
                {
                    SQuery = "select '" + header_n + "' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,d.mthname,d.mthnum,to_char(n.invdate,'yyyymmdd') as vdd,(n.total) as Total_Outstanding,(n.slab1) as Current_Os,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,(n.total) as bal,n.invdate+nvl(W.crdys_party,0) as Due_date,n.billdays from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1,TO_DATE('" + todt + "','DD/MM/YYYY')-invdate as billdays from  recdataw_" + frm_mbr + " where   branchcd='" + frm_mbr + "'  " + grp_cond + "   ) n ,famst m ,wb_famstdtl w,mths d where trim(n.acode)=trim(m.acode) and trim(n.acode)=trim(w.acode) and w.type='CR' ANd w.branchcd='" + frm_mbr + "' and to_char(n.invdate,'mm')=d.mthnum order by m.aname,vdd,n.invno,d.mthnum";//in this qry pymt term coming from CR Form ...  and dramt-cramt>0 
                }
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                string sqry = ""; //add crdys_party instead of crdys_apl...field add by yogita i below qry on 20.09.2021
                sqry = "select distinct acode,crdys_party,age_due_ds,UPPER(ACMGR_NAME) as ACMGR_NAME,age_Odueds,age_ldueds,AGE_BDAYS as acc_block_days from wb_famstdtl where branchcd='" + frm_mbr + "' and type='CR' " + mktgCond + "";
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, sqry);

                string filtersn = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");

                sqry = "";
                sqry = "select type1,name from type where TYPE1 LIKE '4%'";
                dt2 = new DataTable();
                dt2 = fgen.getdata(frm_qstr, frm_cocd, sqry);

                //=============
                dtm = new DataTable();
                dtm.Columns.Add("header", typeof(string));
                dtm.Columns.Add("mktpername", typeof(string));
                dtm.Columns.Add("Party", typeof(string));
                dtm.Columns.Add("RefNo", typeof(string));
                dtm.Columns.Add("Type", typeof(string));
                dtm.Columns.Add("invdate", typeof(string));
                dtm.Columns.Add("Bill_Amt", typeof(decimal));
                dtm.Columns.Add("Balance", typeof(decimal));
                dtm.Columns.Add("mthname", typeof(string));
                dtm.Columns.Add("mthnum", typeof(string));
                dtm.Columns.Add("vdd", typeof(string));
                dtm.Columns.Add("Total_Outstanding", typeof(decimal));
                dtm.Columns.Add("Current_Os", typeof(decimal));
                dtm.Columns.Add("acode", typeof(string));
                dtm.Columns.Add("Address", typeof(string));
                dtm.Columns.Add("P_days", typeof(string));
                dtm.Columns.Add("Cr_limit", typeof(decimal));
                dtm.Columns.Add("Due_date", typeof(string));
                dtm.Columns.Add("cum_Total", typeof(decimal));
                dtm.Columns.Add("ageing", typeof(string));
                dtm.Columns.Add("undue90H", typeof(string));
                dtm.Columns.Add("due105H", typeof(string));
                dtm.Columns.Add("overdue120H", typeof(string));
                dtm.Columns.Add("Longdueabove120H", typeof(string));
                dtm.Columns.Add("undue90", typeof(double));
                dtm.Columns.Add("due105", typeof(double));
                dtm.Columns.Add("overdue120", typeof(double));
                dtm.Columns.Add("Longdueabove120", typeof(double));
                dtm.Columns.Add("accblock_days_Above", typeof(double));
                dtm.Columns.Add("Duedays", typeof(int));
                dtm.Columns.Add("Acc_Block_Days", typeof(string)); //add by yogita as per sbg sir on 05/10/2021

                mq2 = System.DateTime.Now.Date.ToString("dd/MM/yyyy");
                DateTime duedate, invdate;
                dd1 = Convert.ToDateTime(mq2);
                double bill_amt = 0, bill_amtt = 0;
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        try
                        {
                            dr1 = dtm.NewRow();
                            duedate = Convert.ToDateTime(dt.Rows[i]["Due_date"].ToString().Trim());
                            dd2 = Convert.ToDateTime(dt.Rows[i]["invdate"].ToString().Trim());

                            dr1["header"] = dt.Rows[i]["header"].ToString().Trim();
                            dr1["Party"] = dt.Rows[i]["Party"].ToString().Trim();
                            dr1["RefNo"] = dt.Rows[i]["invno"].ToString().Trim();
                            // dr1["Type"] = fgen.seek_iname(frm_qstr, frm_cocd, "select name from type where type1='40'", "name");
                            dr1["Type"] = "";
                            dr1["invdate"] = dt.Rows[i]["invdate"].ToString().Trim();
                            dr1["Bill_Amt"] = fgen.make_double(dt.Rows[i]["Total_Outstanding"].ToString().Trim());
                            dr1["Balance"] = fgen.make_double(dt.Rows[i]["Bal"].ToString().Trim());

                            dr1["mthname"] = dt.Rows[i]["mthname"].ToString().Trim();
                            dr1["mthnum"] = dt.Rows[i]["mthnum"].ToString().Trim();
                            dr1["vdd"] = dt.Rows[i]["vdd"].ToString().Trim();
                            dr1["Total_Outstanding"] = fgen.make_double(dt.Rows[i]["Total_Outstanding"].ToString().Trim());
                            dr1["Current_Os"] = fgen.make_double(dt.Rows[i]["Current_Os"].ToString().Trim());
                            dr1["acode"] = dt.Rows[i]["acode"].ToString().Trim();
                            dr1["Address"] = dt.Rows[i]["Address"].ToString().Trim();
                            dr1["P_days"] = dt.Rows[i]["P_days"].ToString().Trim();
                            dr1["Cr_limit"] = fgen.make_double(dt.Rows[i]["Cr_limit"].ToString().Trim());

                            double duedays = dt.Rows[i]["billdays"].ToString().Trim().toDouble();
                            dr1["Duedays"] = duedays;

                            double undue90 = 0, due = 0, overdue = 0, longdue = 0, accblockdays = 0;
                            undue90 = 0 + fgen.make_double(fgen.seek_iname_dt(dt1, " acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "crdys_party"));
                            due = 0 + fgen.make_double(fgen.seek_iname_dt(dt1, " acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "age_due_ds"));
                            overdue = 0 + fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dt.Rows[i]["acode"].ToString().Trim() + "'", "age_odueds"));
                            longdue = 0 + fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "age_ldueds"));
                            accblockdays = 0 + fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "acc_block_days"));

                            dr1["undue90H"] = undue90 + " Days"; //old
                            // dr1["undue90H"] = (due - 1) + "Days";
                            dr1["due105H"] = due + " Days";
                            dr1["overdue120H"] = overdue + " Days";
                            dr1["Longdueabove120H"] = longdue + " Days";
                            dr1["Acc_Block_Days"] = accblockdays + " Days";/// add by yogita 

                            dr1["mktpername"] = fgen.seek_iname_dt(dt1, "acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "ACMGR_NAME");
                            try
                            {
                                //done some correction in below by yogita as per rahulp sir on  9.10.21
                                dr1["undue90"] = dt.Compute("sum(Bal)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "' AND INVNO='" + dt.Rows[i]["invno"].ToString().Trim() + "' and invdate='" + dt.Rows[i]["invdate"].ToString().Trim() + "' AND billdays<" + due + " ");//not due
                                dr1["due105"] = dt.Compute("sum(Bal)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "' AND INVNO='" + dt.Rows[i]["invno"].ToString().Trim() + "' and invdate='" + dt.Rows[i]["invdate"].ToString().Trim() + "' AND billdays>=" + due + " and billdays<" + overdue + " ");//due
                                dr1["overdue120"] = dt.Compute("sum(Bal)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "' AND INVNO='" + dt.Rows[i]["invno"].ToString().Trim() + "' and invdate='" + dt.Rows[i]["invdate"].ToString().Trim() + "' AND billdays>=" + overdue + " and billdays<" + longdue + " "); //overdue
                                dr1["Longdueabove120"] = dt.Compute("sum(Bal)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "' AND INVNO='" + dt.Rows[i]["invno"].ToString().Trim() + "' and invdate='" + dt.Rows[i]["invdate"].ToString().Trim() + "' AND billdays>=" + longdue + "  and billdays<" + accblockdays + "  ");//longdue
                                dr1["accblock_days_Above"] = dt.Compute("sum(Bal)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "' AND INVNO='" + dt.Rows[i]["invno"].ToString().Trim() + "' and invdate='" + dt.Rows[i]["invdate"].ToString().Trim() + "' AND billdays>=" + accblockdays + " ");//accblockdays
                            }
                            catch
                            {
                            }
                            dr1["Due_date"] = Convert.ToDateTime(dt.Rows[i]["Due_date"].ToString().Trim()).ToString("dd/MM/yyyy");
                            dr1["cum_Total"] = 0;
                            dr1["ageing"] = duedays;

                            if ((filtersn.Contains("0") && dr1["undue90"].ToString().toDouble() != 0) || (filtersn.Contains("1") && dr1["due105"].ToString().toDouble() != 0) || (filtersn.Contains("2") && dr1["overdue120"].ToString().toDouble() != 0) || (filtersn.Contains("3") && dr1["Longdueabove120"].ToString().toDouble() != 0) || (filtersn.Contains("4") && dr1["accblock_days_Above"].ToString().toDouble() != 0))
                            {
                                dtm.Rows.Add(dr1);
                            }

                            //dtm.Rows.Add(dr1);
                            //==========      
                        }
                        catch
                        {
                        }
                    }
                }
                if (dtm.Rows.Count > 0)
                {
                    dtm.TableName = "Prepcur";
                    dsRep.Tables.Add(dtm);
                    pdfView = "N";
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Bill_Recv", "Bill_Recv", dsRep, header_n, "Y");
                }
                #endregion
                break;

            case "F70380xxx":
            case "F70381xxx":
                header_n = "Bill Receivables";
                #region Bill Receivables & Payable Report
                SQuery = ""; cond = "";
                grp_cond = "";
                typecond = "";
                if (hfhcid.Value == "F70380")
                {
                    header_n = "Bill Receivables (as on " + todt + ")";
                    typecond = "((type like '4%') or (type in('59','58')))  and ";
                }
                else
                {
                    header_n = "Bill Payables (as on " + todt + ")";
                    typecond = "type like '5%' and type not in('59','58') and ";
                }
                //===================             
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");

                if (party_cd.Trim().Length <= 1)
                {
                    if (hfhcid.Value == "F70380")
                    {
                        grp_cond = "and substr(acode,1,2) in ('16') ";
                    }
                    else
                    {
                        grp_cond = "and substr(acode,1,2) in ('05','06')";
                    }

                }
                else
                {

                    if (party_cd.Contains("'"))
                    {
                        grp_cond = " and acode in (" + party_cd + ")";
                    }
                    else
                    {
                        grp_cond = " and acode like '" + party_cd + "%'";
                    }


                }

                xprd12 = "and a.VCHDATE<= to_date('" + todt.Trim() + "','dd/mm/yyyy') AND a.VCHDATE>= to_date('" + m1.Trim() + "','dd/mm/yyyy')";
                SQuery = "create or replace view RecDataW_" + frm_mbr + " as (select branchcd,TRIM(ACODE) AS ACODE,TRIM(upper(INVNO)) AS INVNO,INVDATE,SUM(DRAMT) AS DRAMT,SUM(CRAMT) AS CRAMT,SUM(DRAMT)-SUM(cRAMT) AS NET,trim(Grp) as grp from (SELECT a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM VOUCHER a,famst b WHERE trim(a.acode)=trim(B.acode) and a.BRANCHCD='" + frm_mbr + "' " + xprd12 + "  and  SUBSTR(b.grp,1,2)IN('02','05','06','16') UNION ALL SELECT a.branchcd,a.ACODE,a.INVNO,a.INVDATE ,nvl(a.DRAMT,0) AS DRAMT,nvl(a.CRAMT,0) AS CRAMT ,nvl(a.dramt,0)-nvl(a.cramt,0) as net,b.grp FROM RECEBAL a,famst b WHERE trim(a.acode)=trim(b.acode) and a.BRANCHCD='" + frm_mbr + "' and SUBSTR(b.grp,1,2)IN('02','05','06','16') ) c  GROUP BY branchcd,trim(Grp),TRIM(ACODE),TRIM(upper(INVNO)),INVDATE HAVING SUM(dRAMT)-SUM(CRAMT)<>0)";
                fgen.execute_cmd(frm_qstr, frm_cocd, SQuery);


                SQuery = "select '" + header_n + "' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,d.mthname,d.mthnum,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.total) as Total_Outstanding,sum(n.slab1) as Current_Os,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,sum(n.total)-m.Climit  as bal,n.invdate+nvl(m.pay_num,0) as Due_date from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('26/10/2020','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  from  recdataw_" + frm_mbr + " where   branchcd='" + frm_mbr + "' " + grp_cond + "  ) n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum group by m.aname,n.invno,m.addr1,m.climit,m.pay_num,n.acode,m.zcode,n.invdate,nvl(m.pay_num,0),d.mthname,d.mthnum order by m.aname,vdd,n.invno,d.mthnum";
                //SQuery = "select '" + header_n + "' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,d.mthname,d.mthnum,to_char(n.invdate,'yyyymmdd') as vdd,(n.total) as Total_Outstanding,(n.slab1) as Current_Os,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,(n.total)-m.Climit as bal,n.invdate+nvl(m.pay_num,0) as Due_date,n.billdays from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1,TO_DATE('" + todt + "','DD/MM/YYYY')-invdate as billdays from  recdataw_" + frm_mbr + " where   branchcd='" + frm_mbr + "' " + grp_cond + "  and trim(acode)='16I016') n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum order by m.aname,vdd,n.invno,d.mthnum";
                //SQuery = "select '" + header_n + "' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,d.mthname,d.mthnum,to_char(n.invdate,'yyyymmdd') as vdd,(n.total) as Total_Outstanding,(n.slab1) as Current_Os,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,(n.total) as bal,n.invdate+nvl(m.pay_num,0) as Due_date,n.billdays from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1,TO_DATE('" + todt + "','DD/MM/YYYY')-invdate as billdays from  recdataw_" + frm_mbr + " where   branchcd='" + frm_mbr + "' " + grp_cond + "  " + xprd12 + " ) n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum order by m.aname,vdd,n.invno,d.mthnum";
                SQuery = "select '" + header_n + "' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,d.mthname,d.mthnum,to_char(n.invdate,'yyyymmdd') as vdd,(n.total) as Total_Outstanding,(n.slab1) as Current_Os,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,(n.total) as bal,n.invdate+nvl(m.pay_num,0) as Due_date,n.billdays from (SELECT acode,invno,invdate,dramt-cramt as total,(CASE WHEN (TO_DATE('" + todt + "','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1,TO_DATE('" + todt + "','DD/MM/YYYY')-invdate as billdays from  recdataw_" + frm_mbr + " where   branchcd='" + frm_mbr + "' " + grp_cond + "   ) n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum order by m.aname,vdd,n.invno,d.mthnum";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                sqry = ""; //add crdys_party instead of crdys_apl...field add by yogita i below qry on 20.09.2021
                sqry = "select distinct acode,crdys_party,age_due_ds,age_Odueds,age_ldueds,AGE_BDAYS as acc_block_days from wb_famstdtl where branchcd='" + frm_mbr + "' and type='CR' ";
                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, sqry);

                sqry = "";
                sqry = "select type1,name from type where TYPE1 LIKE '4%'";
                dt2 = new DataTable();
                dt2 = fgen.getdata(frm_qstr, frm_cocd, sqry);


                //=============
                dtm = new DataTable();
                dtm.Columns.Add("header", typeof(string));
                dtm.Columns.Add("Party", typeof(string));
                dtm.Columns.Add("RefNo", typeof(string));
                dtm.Columns.Add("Type", typeof(string));
                dtm.Columns.Add("invdate", typeof(string));
                dtm.Columns.Add("Bill_Amt", typeof(decimal));
                dtm.Columns.Add("Balance", typeof(decimal));
                dtm.Columns.Add("mthname", typeof(string));
                dtm.Columns.Add("mthnum", typeof(string));
                dtm.Columns.Add("vdd", typeof(string));
                dtm.Columns.Add("Total_Outstanding", typeof(decimal));
                dtm.Columns.Add("Current_Os", typeof(decimal));
                dtm.Columns.Add("acode", typeof(string));
                dtm.Columns.Add("Address", typeof(string));
                dtm.Columns.Add("P_days", typeof(string));
                dtm.Columns.Add("Cr_limit", typeof(decimal));
                dtm.Columns.Add("Due_date", typeof(string));
                dtm.Columns.Add("cum_Total", typeof(decimal));
                dtm.Columns.Add("ageing", typeof(string));
                dtm.Columns.Add("undue90H", typeof(string));
                dtm.Columns.Add("due105H", typeof(string));
                dtm.Columns.Add("overdue120H", typeof(string));
                dtm.Columns.Add("Longdueabove120H", typeof(string));
                dtm.Columns.Add("undue90", typeof(double));
                dtm.Columns.Add("due105", typeof(double));
                dtm.Columns.Add("overdue120", typeof(double));
                dtm.Columns.Add("Longdueabove120", typeof(double));
                dtm.Columns.Add("Duedays", typeof(int));
                dtm.Columns.Add("Acc_Block_Days", typeof(double)); //add by yogita as per sbg sir on 05/10/2021

                mq2 = System.DateTime.Now.Date.ToString("dd/MM/yyyy");
                duedate = new DateTime(); invdate = new DateTime();
                dd1 = Convert.ToDateTime(mq2);
                bill_amt = 0; bill_amtt = 0;
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        try
                        {
                            dr1 = dtm.NewRow();
                            duedate = Convert.ToDateTime(dt.Rows[i]["Due_date"].ToString().Trim());
                            dd2 = Convert.ToDateTime(dt.Rows[i]["invdate"].ToString().Trim());

                            dr1["header"] = dt.Rows[i]["header"].ToString().Trim();
                            dr1["Party"] = dt.Rows[i]["Party"].ToString().Trim();
                            dr1["RefNo"] = dt.Rows[i]["invno"].ToString().Trim();
                            // dr1["Type"] = fgen.seek_iname(frm_qstr, frm_cocd, "select name from type where type1='40'", "name");
                            dr1["Type"] = "";
                            dr1["invdate"] = dt.Rows[i]["invdate"].ToString().Trim();
                            dr1["Bill_Amt"] = fgen.make_double(dt.Rows[i]["Total_Outstanding"].ToString().Trim());
                            dr1["Balance"] = fgen.make_double(dt.Rows[i]["Bal"].ToString().Trim());

                            dr1["mthname"] = dt.Rows[i]["mthname"].ToString().Trim();
                            dr1["mthnum"] = dt.Rows[i]["mthnum"].ToString().Trim();
                            dr1["vdd"] = dt.Rows[i]["vdd"].ToString().Trim();
                            dr1["Total_Outstanding"] = fgen.make_double(dt.Rows[i]["Total_Outstanding"].ToString().Trim());
                            dr1["Current_Os"] = fgen.make_double(dt.Rows[i]["Current_Os"].ToString().Trim());
                            dr1["acode"] = dt.Rows[i]["acode"].ToString().Trim();
                            dr1["Address"] = dt.Rows[i]["Address"].ToString().Trim();
                            dr1["P_days"] = dt.Rows[i]["P_days"].ToString().Trim();
                            dr1["Cr_limit"] = fgen.make_double(dt.Rows[i]["Cr_limit"].ToString().Trim());

                            double duedays = dt.Rows[i]["billdays"].ToString().Trim().toDouble();
                            dr1["Duedays"] = duedays;

                            double undue90 = 0, due = 0, overdue = 0, longdue = 0, accblockdays = 0;
                            undue90 = 0 + fgen.make_double(fgen.seek_iname_dt(dt1, " acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "crdys_party"));
                            due = 0 + fgen.make_double(fgen.seek_iname_dt(dt1, " acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "age_due_ds"));
                            overdue = 0 + fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dt.Rows[i]["acode"].ToString().Trim() + "'", "age_odueds"));
                            longdue = 0 + fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "age_ldueds"));
                            accblockdays = 0 + fgen.make_double(fgen.seek_iname_dt(dt1, "acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "acc_block_days"));

                            dr1["undue90H"] = undue90 + " Days";
                            dr1["due105H"] = due + " Days";
                            dr1["overdue120H"] = overdue + " Days";
                            dr1["Longdueabove120H"] = longdue + " Days";
                            dr1["Acc_Block_Days"] = accblockdays;
                            try
                            {
                                dr1["undue90"] = dt.Compute("sum(Total_Outstanding)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "' AND INVNO='" + dt.Rows[i]["invno"].ToString().Trim() + "' and invdate='" + dt.Rows[i]["invdate"].ToString().Trim() + "' AND billdays<=" + undue90 + " ");
                                dr1["due105"] = dt.Compute("sum(Total_Outstanding)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "' AND INVNO='" + dt.Rows[i]["invno"].ToString().Trim() + "' and invdate='" + dt.Rows[i]["invdate"].ToString().Trim() + "' AND billdays>" + undue90 + " and billdays<=" + due + " ");
                                dr1["overdue120"] = dt.Compute("sum(Total_Outstanding)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "' AND INVNO='" + dt.Rows[i]["invno"].ToString().Trim() + "' and invdate='" + dt.Rows[i]["invdate"].ToString().Trim() + "' AND billdays>" + due + " and billdays<=" + overdue + " ");
                                dr1["Longdueabove120"] = dt.Compute("sum(Total_Outstanding)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "' AND INVNO='" + dt.Rows[i]["invno"].ToString().Trim() + "' and invdate='" + dt.Rows[i]["invdate"].ToString().Trim() + "' AND billdays>" + overdue + " ");

                            }

                            catch
                            {

                            }
                            dr1["Due_date"] = Convert.ToDateTime(dt.Rows[i]["Due_date"].ToString().Trim()).ToString("dd/MM/yyyy");
                            dr1["cum_Total"] = 0;
                            dr1["ageing"] = duedays;
                            dtm.Rows.Add(dr1);
                            //==========      
                        }
                        catch
                        {
                        }
                    }
                }
                if (dtm.Rows.Count > 0)
                {
                    dtm.TableName = "Prepcur";
                    dsRep.Tables.Add(dtm);
                    pdfView = "N";
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Bill_Recv", "Bill_Recv", dsRep, header_n, "Y");
                }
                #endregion
                break;

            case "F70382xx"://old
            case "F70383xx"://old

                #region Payment Receipt & Voucher Report
                SQuery = ""; cond = "";
                string squery2 = "";
                //===================    
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");

                if (party_cd.Trim().Length <= 1)
                {
                    if (hfhcid.Value == "F70383")
                    {
                        cond = "and substr(trim(acode),1,2) in ('16')";
                    }

                    else
                    {
                        cond = "and substr(trim(acode),1,2) in ('05','06')";
                    }
                }
                else
                {

                    if (party_cd.Contains("'"))
                    {
                        cond = " and acode in (" + party_cd + ")";
                    }
                    else
                    {
                        cond = " and acode like '" + party_cd + "%'";
                    }
                }

                string header2 = "";
                if (hfhcid.Value == "F70383")
                {
                    header_n = "Payment Receipt";
                    header2 = "Intimation of Payment Receipt";
                }
                else
                {
                    header_n = "Receipt voucher";
                    header2 = "Receipt Intimation to Customer";
                }
                string typ = "";
                if (hfhcid.Value == "F70383")
                {
                    typ = "and type like '1%'";
                }
                else
                {
                    typ = "and type like '2%'";
                }

                m1 = fgen.seek_iname(frm_qstr, frm_cocd, "select params from controls where id='R01'", "params");
                eff_Dt = "and vchdate>= to_date('" + m1.Trim() + "','dd/mm/yyyy') and vchdate<= to_date('" + todt.Trim() + "','dd/mm/yyyy')";


                grp_cond = "";

                SQuery = "select '" + header_n + "' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,d.mthname,d.mthnum,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.total) as Total_Outstanding,sum(n.slab1) as Current_Os,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,sum(n.total)-m.Climit  as bal,n.invdate+nvl(m.pay_num,0) as Due_date,naration as Remarks,cramt as received from (SELECT acode,invno,invdate,cramt-dramt as total,(CASE WHEN (TO_DATE('12/10/2020','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1,naration,cramt  from voucher where branchcd='" + frm_mbr + "' " + typ + " " + cond + " ) n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum group by m.aname,n.invno,m.addr1,m.climit,m.pay_num,n.acode,m.zcode,n.invdate,nvl(m.pay_num,0),d.mthname,d.mthnum,naration,cramt order by m.aname,vdd,n.invno,d.mthnum";
                squery2 = "select '" + header2 + "' as header1,m.aname as Party1,n.invno as invnoo,to_char(n.invdate,'dd/mm/yyyy') as invdate1,d.mthname as mthnamee,d.mthnum as mthnumm,to_char(n.invdate,'yyyymmdd') as vddd,sum(n.total) as Total_Outstanding1,sum(n.slab1) as Current_Os1,n.acode as acodee,m.ADDR1 as Address1,m.pay_num as P_days1,m.Climit  as Cr_limit1,sum(n.total)-m.Climit  as bal1,n.invdate+nvl(m.pay_num,0) as Due_date1,naration as Remarkss,cramt as received from (SELECT acode,invno,invdate,cramt-dramt as total,(CASE WHEN (TO_DATE('12/10/2020','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1 ,naration,cramt from voucher where branchcd='" + frm_mbr + "' " + typ + "  " + cond + " " + eff_Dt + "  ) n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum group by m.aname,n.invno,m.addr1,m.climit,m.pay_num,n.acode,m.zcode,n.invdate,nvl(m.pay_num,0),d.mthname,d.mthnum,naration,cramt order by m.aname,vddd,n.invno,d.mthnum";

                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);


                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, squery2);
                //=============
                dtm = new DataTable();
                DataTable dtm1;
                dtm1 = new DataTable();

                dtm1.Columns.Add("header1", typeof(string));
                dtm1.Columns.Add("Party1", typeof(string));
                dtm1.Columns.Add("invnoo", typeof(string));
                dtm1.Columns.Add("Typee", typeof(string));
                dtm1.Columns.Add("invdate1", typeof(string));
                dtm1.Columns.Add("Bill_Amtt", typeof(decimal));
                dtm1.Columns.Add("BalanceMm", typeof(decimal));
                dtm1.Columns.Add("RecAmt", typeof(decimal));
                dtm1.Columns.Add("Balancee", typeof(decimal));
                dtm1.Columns.Add("shortexc", typeof(decimal));
                dtm1.Columns.Add("NetBal", typeof(decimal));
                dtm1.Columns.Add("Remarkss", typeof(string));


                dtm.Columns.Add("header", typeof(string));
                dtm.Columns.Add("Party", typeof(string));
                dtm.Columns.Add("RefNo", typeof(string));
                dtm.Columns.Add("Type", typeof(string));
                dtm.Columns.Add("invdate", typeof(string));
                dtm.Columns.Add("Bill_Amt", typeof(decimal));
                dtm.Columns.Add("BalanceM", typeof(decimal));
                dtm.Columns.Add("mthname", typeof(string));
                dtm.Columns.Add("mthnum", typeof(string));
                dtm.Columns.Add("vdd", typeof(string));
                dtm.Columns.Add("Total_Outstanding", typeof(decimal));
                dtm.Columns.Add("Current_Os", typeof(decimal));
                dtm.Columns.Add("acode", typeof(string));
                dtm.Columns.Add("Address", typeof(string));
                dtm.Columns.Add("P_days", typeof(string));
                dtm.Columns.Add("Cr_limit", typeof(decimal));
                dtm.Columns.Add("Due_date", typeof(string));
                dtm.Columns.Add("cum_Total", typeof(decimal));
                dtm.Columns.Add("Due_Position", typeof(string));
                dtm.Columns.Add("Received", typeof(decimal));
                dtm.Columns.Add("balance", typeof(decimal));
                dtm.Columns.Add("shortexc", typeof(decimal));
                dtm.Columns.Add("Remarks", typeof(string));

                mq2 = System.DateTime.Now.Date.ToString("dd/MM/yyyy");
                dd1 = Convert.ToDateTime(mq2);

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        //due days = due date - system date
                        //due amt = test_aero
                        bill_amt = 0;
                        dr1 = dtm.NewRow();
                        dr1["header"] = dt.Rows[i]["header"].ToString().Trim();
                        dr1["Party"] = dt.Rows[i]["Party"].ToString().Trim();
                        dr1["RefNo"] = dt.Rows[i]["invno"].ToString().Trim();
                        dr1["Type"] = "Sale";
                        duedate = Convert.ToDateTime(dt.Rows[i]["Due_date"].ToString().Trim());
                        dr1["invdate"] = dt.Rows[i]["invdate"].ToString().Trim();
                        bill_amt = fgen.make_double(fgen.seek_iname(frm_qstr, frm_cocd, "SELECT BILL_TOT FROM SALE WHERE TRIM(ACODE)='" + dt.Rows[i]["Acode"].ToString().Trim() + "' AND BRANCHCD='" + frm_mbr + "' AND TYPE LIKE '4%' AND VCHNUM='" + dt.Rows[i]["invno"].ToString().Trim() + "' and vchdate =TO_DATE('" + dt.Rows[i]["invdate"].ToString().Trim() + "','dd/mm/yyyy')", "Bill_Tot"));
                        dr1["Bill_Amt"] = fgen.make_double(fgen.seek_iname(frm_qstr, frm_cocd, "SELECT BILL_TOT FROM SALE WHERE TRIM(ACODE)='" + dt.Rows[i]["Acode"].ToString().Trim() + "' AND BRANCHCD='" + frm_mbr + "' AND TYPE LIKE '4%' AND VCHNUM='" + dt.Rows[i]["invno"].ToString().Trim() + "' and vchdate =TO_DATE('" + dt.Rows[i]["invdate"].ToString().Trim() + "','dd/mm/yyyy')", "Bill_Tot"));
                        dr1["BalanceM"] = bill_amt - fgen.make_double(dt.Rows[i]["Cr_limit"].ToString().Trim());
                        dd2 = Convert.ToDateTime(dr1["invdate"].ToString().Trim());
                        dr1["mthname"] = dt.Rows[i]["mthname"].ToString().Trim();
                        dr1["mthnum"] = dt.Rows[i]["mthnum"].ToString().Trim();
                        dr1["vdd"] = dt.Rows[i]["vdd"].ToString().Trim();
                        dr1["Total_Outstanding"] = fgen.make_double(dt.Rows[i]["Total_Outstanding"].ToString().Trim());
                        dr1["Current_Os"] = fgen.make_double(dt.Rows[i]["Current_Os"].ToString().Trim());
                        dr1["acode"] = dt.Rows[i]["acode"].ToString().Trim();
                        dr1["Address"] = dt.Rows[i]["Address"].ToString().Trim();
                        dr1["P_days"] = dt.Rows[i]["P_days"].ToString().Trim();
                        dr1["Cr_limit"] = fgen.make_double(dt.Rows[i]["Cr_limit"].ToString().Trim());

                        dr1["Due_Position"] = "";
                        dr1["Received"] = dt.Rows[i]["Received"].ToString().Trim();
                        dr1["balance"] = bill_amt - fgen.make_double(dt.Rows[i]["Cr_limit"].ToString().Trim()) - fgen.make_double(dt.Rows[i]["Received"].ToString().Trim());
                        dr1["shortexc"] = bill_amt - fgen.make_double(dt.Rows[i]["Cr_limit"].ToString().Trim()) - fgen.make_double(dt.Rows[i]["Received"].ToString().Trim());
                        dr1["Due_date"] = Convert.ToDateTime(dt.Rows[i]["Due_date"].ToString().Trim()).ToString("dd/MM/yyyy");
                        dr1["cum_Total"] = 0;
                        dr1["Remarks"] = dt.Rows[i]["Remarks"].ToString().Trim();
                        TimeSpan tS = (dd1 - dd2);
                        int dys = tS.Days;
                        int pdays = Convert.ToInt32(dr1["P_days"]);
                        int gg = dys - pdays;

                        dtm.Rows.Add(dr1);
                        //==========                     
                    }
                }

                if (dt1.Rows.Count > 0)
                {
                    for (int j = 0; j < dt1.Rows.Count; j++)
                    {
                        bill_amtt = 0;
                        DataRow dr2 = dtm1.NewRow();
                        dr2["header1"] = dt1.Rows[j]["header1"].ToString().Trim();
                        dr2["Party1"] = dt1.Rows[j]["Party1"].ToString().Trim();
                        dr2["invnoo"] = dt1.Rows[j]["invnoo"].ToString().Trim();
                        dr2["Typee"] = "Sale";
                        duedate = Convert.ToDateTime(dt.Rows[j]["Due_date"].ToString().Trim());
                        dr2["invdate1"] = dt1.Rows[j]["invdate1"].ToString().Trim();
                        bill_amtt = fgen.make_double(fgen.seek_iname(frm_qstr, frm_cocd, "SELECT BILL_TOT FROM SALE WHERE TRIM(ACODE)='" + dt1.Rows[j]["Acodee"].ToString().Trim() + "' AND BRANCHCD='" + frm_mbr + "' AND TYPE LIKE '4%' AND VCHNUM='" + dt1.Rows[j]["invnoo"].ToString().Trim() + "' and vchdate =TO_DATE('" + dt1.Rows[j]["invdate1"].ToString().Trim() + "','dd/mm/yyyy')", "Bill_Tot"));
                        dr2["Bill_Amtt"] = bill_amtt;
                        dr2["BalanceMm"] = bill_amtt - fgen.make_double(dt1.Rows[j]["Cr_limit1"].ToString().Trim());
                        dr2["RecAmt"] = 0;
                        dr2["Balancee"] = bill_amtt - fgen.make_double(dt1.Rows[j]["Cr_limit1"].ToString().Trim()) - fgen.make_double(dt1.Rows[j]["Received"].ToString().Trim());
                        dr2["shortexc"] = bill_amtt - fgen.make_double(dt1.Rows[j]["Cr_limit1"].ToString().Trim()) - fgen.make_double(dt1.Rows[j]["Received"].ToString().Trim());
                        dr2["NetBal"] = 0;
                        dr2["Remarkss"] = dt1.Rows[j]["Remarkss"].ToString().Trim();
                        dtm1.Rows.Add(dr2);
                    }
                }

                if (dtm.Rows.Count > 0)
                {
                    dtm.TableName = "Prepcur";
                    dsRep.Tables.Add(dtm);
                    dtm1.TableName = "subprep";
                    dsRep.Tables.Add(dtm1);
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Pay_Voucher", "Pay_Voucher", dsRep, header_n, "Y");
                }

                #endregion
                break;
            case "F70382":
            case "F70383":
                #region Payment Receipt & Voucher Report
                SQuery = ""; cond = "";
                squery2 = "";
                //===================    
                party_cd = fgenMV.Fn_Get_Mvar(frm_qstr, "U_PARTYCODE");
                col1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");

                if (party_cd.Trim().Length <= 1)
                {
                    if (hfhcid.Value == "F70383")
                    {
                        cond = "and substr(trim(acode),1,2) in ('16')";
                    }

                    else
                    {
                        cond = "and substr(trim(acode),1,2) in ('05','06')";
                    }
                }
                else
                {

                    if (party_cd.Contains("'"))
                    {
                        cond = " and acode in (" + party_cd + ")";
                        cond1 = "and a.acode in (" + party_cd + ")";
                    }
                    else
                    {
                        cond = " and acode like '" + party_cd + "%'";
                        cond1 = "and a.acode like '" + party_cd + "%'";
                    }


                }

                header2 = "";
                if (hfhcid.Value == "F70382")
                {
                    header_n = "Payment Voucher";
                    header2 = "Intimation of Payment Voucher";
                }
                else
                {
                    header_n = "Receipt Voucher";
                    header2 = "Receipt Intimation to Customer";
                }
                typ = "";
                if (hfhcid.Value == "F70383")
                {
                    typ = "and type like '1%'";
                    mq6 = "cramt - dramt";
                }
                else
                {
                    typ = "and type like '2%'";
                    mq6 = "dramt - cramt";
                }


                m1 = fgen.seek_iname(frm_qstr, frm_cocd, "select params from controls where id='R01'", "params");
                eff_Dt = "and vchdate>= to_date('" + m1.Trim() + "','dd/mm/yyyy') and vchdate<= to_date('" + todt.Trim() + "','dd/mm/yyyy')";


                grp_cond = "";

                SQuery = "select '" + header_n + "' as header,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,d.mthname,d.mthnum,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.total) as Total_Outstanding,sum(n.slab1) as Current_Os,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,sum(n.total) as bal,n.invdate+nvl(m.pay_num,0) as Due_date,naration as Remarks,cramt as received,SUM(FCRATE) AS BILL_AMT,SUM(FCRATE)-SUM(FCRATE1) AS BALANCE  from (SELECT acode,invno,invdate," + mq6 + " as total,TO_DATE('" + todt + "','DD/MM/YYYY')-invdate as slab1,naration,cramt,FCRATE,FCRATE1  from voucher where branchcd='" + frm_mbr + "' " + typ + " " + cond + "  ) n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum group by m.aname,n.invno,m.addr1,m.climit,m.pay_num,n.acode,m.zcode,n.invdate,nvl(m.pay_num,0),d.mthname,d.mthnum,naration,cramt order by m.aname,vdd,n.invno,d.mthnum";
                squery2 = "select '" + header2 + "' as header1,m.aname as Party1,n.invno as invnoo,to_char(n.invdate,'dd/mm/yyyy') as invdate1,d.mthname as mthnamee,d.mthnum as mthnumm,to_char(n.invdate,'yyyymmdd') as vddd,sum(n.total) as Total_Outstanding1,sum(n.slab1) as Current_Os1,n.acode as acodee,m.ADDR1 as Address1,m.pay_num as P_days1,m.Climit  as Cr_limit1,sum(n.total)  as bal1,n.invdate+nvl(m.pay_num,0) as Due_date1,naration as Remarkss,cramt as received,SUM(FCRATE) AS BILL_AMTT,SUM(FCRATE)-SUM(FCRATE1) AS BALANCEE from (SELECT acode,invno,invdate," + mq6 + " as total,(CASE WHEN (TO_DATE('12/10/2020','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1 ,naration,cramt,FCRATE,FCRATE1 from voucher where branchcd='" + frm_mbr + "' " + typ + "  " + cond + " " + eff_Dt + "  ) n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum group by m.aname,n.invno,m.addr1,m.climit,m.pay_num,n.acode,m.zcode,n.invdate,nvl(m.pay_num,0),d.mthname,d.mthnum,naration,cramt order by m.aname,vddd,n.invno,d.mthnum";

                SQuery = "select '" + header_n + "' as header,n.type,n.vchnum,n.vchdate,m.aname as Party,n.invno,to_char(n.invdate,'dd/mm/yyyy') as invdate,d.mthname,d.mthnum,to_char(n.invdate,'yyyymmdd') as vdd,sum(n.total) as Total_Outstanding,sum(n.slab1) as Current_Os,n.acode,m.ADDR1 as Address,m.pay_num as P_days,m.Climit  as Cr_limit,sum(n.total) as bal,n.invdate+nvl(m.pay_num,0) as Due_date,naration as Remarks,cramt as received,SUM(FCRATE) AS BILL_AMT,SUM(FCRATE)-SUM(FCRATE1) AS BALANCE  from (SELECT type,vchnum,vchdate,acode,invno,invdate," + mq6 + " as total,TO_DATE('" + todt + "','DD/MM/YYYY')-invdate as slab1,naration,cramt,FCRATE,FCRATE1  from voucher where branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + col1 + "' " + cond + "  ) n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum group by n.type,n.vchnum,n.vchdate,m.aname,n.invno,m.addr1,m.climit,m.pay_num,n.acode,m.zcode,n.invdate,nvl(m.pay_num,0),d.mthname,d.mthnum,naration,cramt order by m.aname,vdd,n.invno,d.mthnum";
                squery2 = "select '" + header2 + "' as header1,n.type as typee,n.vchnum as vchnumm,n.vchdate as vchdatee,m.aname as Party1,n.invno as invnoo,to_char(n.invdate,'dd/mm/yyyy') as invdate1,d.mthname as mthnamee,d.mthnum as mthnumm,to_char(n.invdate,'yyyymmdd') as vddd,sum(n.total) as Total_Outstanding1,sum(n.slab1) as Current_Os1,n.acode as acodee,m.ADDR1 as Address1,m.pay_num as P_days1,m.Climit  as Cr_limit1,sum(n.total)  as bal1,n.invdate+nvl(m.pay_num,0) as Due_date1,naration as Remarkss,cramt as received,SUM(FCRATE) AS BILL_AMTT,SUM(FCRATE)-SUM(FCRATE1) AS BALANCEE from (SELECT type,vchnum,vchdate,acode,invno,invdate," + mq6 + " as total,(CASE WHEN (TO_DATE('12/10/2020','DD/MM/YYYY')-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1 ,naration,cramt,FCRATE,FCRATE1 from voucher where branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + col1 + "'  " + cond + "  ) n ,famst m ,mths d where trim(n.acode)=trim(m.acode) and to_char(n.invdate,'mm')=d.mthnum group by n.type,n.vchnum,n.vchdate,m.aname,n.invno,m.addr1,m.climit,m.pay_num,n.acode,m.zcode,n.invdate,nvl(m.pay_num,0),d.mthname,d.mthnum,naration,cramt order by m.aname,vddd,n.invno,d.mthnum";

                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);


                dt1 = new DataTable();
                dt1 = fgen.getdata(frm_qstr, frm_cocd, squery2);

                //due days from customer registration form
                if (hfhcid.Value == "F70383")
                    sqry = "select distinct acode,crdys_party,age_due_ds,age_Odueds,age_ldueds from wb_famstdtl where branchcd='" + frm_mbr + "' and type='CR'"; //
                else
                    sqry = "select distinct acode,crdys_party,age_due_ds,age_Odueds,age_ldueds from wb_famstdtl where branchcd='" + frm_mbr + "' ";//and type='VR'
                dt2 = new DataTable();
                dt2 = fgen.getdata(frm_qstr, frm_cocd, sqry);

                //opening Bal
                dt3 = new DataTable();
                mq9 = "select yr_" + frm_myear + ",trim(acode) as acode from famstbal where branchcd='" + frm_mbr + "' " + cond + "";
                dt3 = fgen.getdata(frm_qstr, frm_cocd, mq9);

                //ledger Bal
                string frmcdt2 = col1.Substring(10, 10);
                string xprd11 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt1 + "','dd/mm/yyyy') -1";
                xprd12 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frmcdt2 + "','dd/mm/yyyy')";
                string SQueryx = "select sum(opb)+sum(inbal)-sum(outbal) as bal from (select sum(yr_" + frm_myear + ") as opb,0 as inbal,0 as outbal from famstbal where branchcd IN ('" + frm_mbr + "')  " + cond + " group by acode union all select sum(nvl(DRAMT,0))-sum(nvl(CRAMT,0)) as obal,0 as inbal,0 as outbal from voucher where branchcd IN ('" + frm_mbr + "') and VCHDATE " + xprd11 + " " + cond + " union all select 0 as opbal,(case when sum(A.DRAMT)-sum(A.CRAMT)>0 then ABS(sum(A.DRAMT)-sum(A.CRAMT)) else 0 end) AS IQTYIN,(case when sum(A.DRAMT)-sum(A.CRAMT)>0 then 0 else abs(sum(A.DRAMT)-sum(A.CRAMT)) end) AS IQTYOUT from voucher A where a.branchcd IN ('" + frm_mbr + "') and A.VCHDATE " + xprd12 + " " + cond1 + " )";
                dt4 = new DataTable();
                dt4 = fgen.getdata(frm_qstr, frm_cocd, SQueryx);

                //=============
                dtm = new DataTable();
                //DataTable dtm1;
                dtm1 = new DataTable();

                dtm1.Columns.Add("header1", typeof(string));
                dtm1.Columns.Add("Party1", typeof(string));
                dtm1.Columns.Add("invnoo", typeof(string));
                dtm1.Columns.Add("Typee", typeof(string));
                dtm1.Columns.Add("invdate1", typeof(string));
                dtm1.Columns.Add("Bill_Amtt", typeof(decimal));
                dtm1.Columns.Add("BalanceMm", typeof(decimal));
                dtm1.Columns.Add("RecAmt", typeof(decimal));
                dtm1.Columns.Add("Balancee", typeof(decimal));
                dtm1.Columns.Add("shortexc", typeof(decimal));
                dtm1.Columns.Add("NetBal", typeof(decimal));
                dtm1.Columns.Add("Remarkss", typeof(string));
                dtm1.Columns.Add("vchnumm", typeof(string));
                dtm1.Columns.Add("vchdatee", typeof(DateTime));


                dtm.Columns.Add("header", typeof(string));
                dtm.Columns.Add("Party", typeof(string));
                dtm.Columns.Add("RefNo", typeof(string));
                dtm.Columns.Add("Type", typeof(string));
                dtm.Columns.Add("invdate", typeof(string));
                dtm.Columns.Add("Bill_Amt", typeof(decimal));
                dtm.Columns.Add("BalanceM", typeof(decimal));
                dtm.Columns.Add("mthname", typeof(string));
                dtm.Columns.Add("mthnum", typeof(string));
                dtm.Columns.Add("vdd", typeof(string));
                dtm.Columns.Add("Total_Outstanding", typeof(decimal));
                dtm.Columns.Add("Current_Os", typeof(decimal));
                dtm.Columns.Add("acode", typeof(string));
                dtm.Columns.Add("Address", typeof(string));
                dtm.Columns.Add("P_days", typeof(string));
                dtm.Columns.Add("Cr_limit", typeof(decimal));
                dtm.Columns.Add("Due_date", typeof(string));
                dtm.Columns.Add("cum_Total", typeof(decimal));
                dtm.Columns.Add("Due_Position", typeof(string));
                dtm.Columns.Add("Received", typeof(decimal));
                dtm.Columns.Add("balance", typeof(decimal));
                dtm.Columns.Add("shortexc", typeof(decimal));
                dtm.Columns.Add("Remarks", typeof(string));
                dtm.Columns.Add("openingbal", typeof(decimal));
                dtm.Columns.Add("openingbalDate", typeof(DateTime));
                dtm.Columns.Add("undue90", typeof(decimal));
                dtm.Columns.Add("due105", typeof(decimal));
                dtm.Columns.Add("overdue120", typeof(decimal));
                dtm.Columns.Add("Longdueabove120", typeof(decimal));
                dtm.Columns.Add("LedgerBal", typeof(decimal));
                dtm.Columns.Add("vchnum", typeof(string));
                dtm.Columns.Add("vchdate", typeof(DateTime));


                mq2 = System.DateTime.Now.Date.ToString("dd/MM/yyyy");
                dd1 = Convert.ToDateTime(mq2);

                mq8 = todt.Trim();

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        //due days = due date - system date
                        //due amt = test_aero
                        bill_amt = 0;
                        dr1 = dtm.NewRow();
                        dr1["header"] = dt.Rows[i]["header"].ToString().Trim();
                        dr1["Party"] = dt.Rows[i]["Party"].ToString().Trim();
                        dr1["RefNo"] = dt.Rows[i]["invno"].ToString().Trim();
                        dr1["Type"] = dt.Rows[i]["type"].ToString().Trim();
                        dr1["vchnum"] = dt.Rows[i]["vchnum"].ToString().Trim();
                        dr1["vchdate"] = Convert.ToDateTime(dt.Rows[i]["vchdate"].ToString().Trim()).ToShortDateString();
                        duedate = Convert.ToDateTime(dt.Rows[i]["Due_date"].ToString().Trim());
                        dr1["invdate"] = dt.Rows[i]["invdate"].ToString().Trim();
                        bill_amt = fgen.make_double(dt.Rows[i]["BILL_AMT"].ToString().Trim());
                        dr1["Bill_Amt"] = bill_amt;
                        dr1["BalanceM"] = fgen.make_double(dt.Rows[i]["Balance"].ToString().Trim());
                        dd2 = Convert.ToDateTime(dr1["invdate"].ToString().Trim());
                        dr1["mthname"] = dt.Rows[i]["mthname"].ToString().Trim();
                        dr1["mthnum"] = dt.Rows[i]["mthnum"].ToString().Trim();
                        dr1["vdd"] = dt.Rows[i]["vdd"].ToString().Trim();
                        dr1["Total_Outstanding"] = fgen.make_double(dt.Rows[i]["Total_Outstanding"].ToString().Trim());
                        dr1["Current_Os"] = fgen.make_double(dt.Rows[i]["Current_Os"].ToString().Trim());
                        dr1["acode"] = dt.Rows[i]["acode"].ToString().Trim();
                        dr1["Address"] = dt.Rows[i]["Address"].ToString().Trim();
                        dr1["P_days"] = dt.Rows[i]["P_days"].ToString().Trim();
                        dr1["Cr_limit"] = fgen.make_double(dt.Rows[i]["Cr_limit"].ToString().Trim());
                        dr1["openingbal"] = fgen.make_double(fgen.seek_iname_dt(dt3, "", "yr_" + frm_myear + ""));
                        dr1["openingbalDate"] = Convert.ToDateTime(frm_cDt1).ToShortDateString();
                        dr1["LedgerBal"] = fgen.make_double(fgen.seek_iname_dt(dt4, "", "bal"));
                        TimeSpan ts1 = Convert.ToDateTime(mq8) - duedate;
                        int dys1 = ts1.Days;
                        int undue90 = 0, due = 0, overdue = 0, longdue = 0;

                        undue90 = fgen.make_int(fgen.seek_iname_dt(dt2, " acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "crdys_party"));
                        due = fgen.make_int(fgen.seek_iname_dt(dt2, " acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "age_due_ds"));
                        overdue = fgen.make_int(fgen.seek_iname_dt(dt2, " acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "age_odueds"));
                        longdue = fgen.make_int(fgen.seek_iname_dt(dt2, " acode='" + dt.Rows[i]["acode"].ToString().Trim() + "' ", "age_ldueds"));
                        dys1 = dt.Rows[i]["Current_Os"].ToString().Trim().toInt();//bill days
                        if (dys1 <= undue90)
                            dr1["Due_Position"] = "Not Due";
                        else if (dys1 > undue90 && dys1 <= due)
                            dr1["Due_Position"] = "Due";
                        else if (dys1 > due && dys1 <= overdue)
                            dr1["Due_Position"] = "Over Due";
                        else if (dys1 > overdue && dys1 <= longdue)
                            dr1["Due_Position"] = "Long Due";
                        else if (dys1 >= longdue)
                            dr1["Due_Position"] = "Long Due";
                        try
                        {
                            dr1["undue90"] = dt.Compute("sum(Total_Outstanding)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "'  AND Current_Os<=" + undue90 + " ");
                            dr1["due105"] = dt.Compute("sum(Total_Outstanding)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "'  AND Current_Os>" + undue90 + " and Current_Os<=" + due + " ");
                            dr1["overdue120"] = dt.Compute("sum(Total_Outstanding)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "' AND Current_Os>" + due + " and Current_Os<=" + overdue + " ");
                            dr1["Longdueabove120"] = dt.Compute("sum(Total_Outstanding)", "ACODE='" + dt.Rows[i]["acode"].ToString().Trim() + "' AND Current_Os>" + overdue + " ");

                        }

                        catch
                        {

                        }

                        dr1["Received"] = fgen.make_double(dt.Rows[i]["Total_Outstanding"].ToString().Trim());
                        dr1["balance"] = bill_amt - fgen.make_double(dt.Rows[i]["Total_Outstanding"].ToString().Trim());
                        //dr1["shortexc"] = bill_amt - fgen.make_double(dt.Rows[i]["Cr_limit"].ToString().Trim()) - fgen.make_double(dt.Rows[i]["Received"].ToString().Trim());
                        dr1["shortexc"] = 0;
                        dr1["Due_date"] = Convert.ToDateTime(dt.Rows[i]["Due_date"].ToString().Trim()).ToString("dd/MM/yyyy");
                        dr1["cum_Total"] = 0;
                        dr1["Remarks"] = dt.Rows[i]["Remarks"].ToString().Trim();
                        TimeSpan tS = (dd1 - dd2);
                        int dys = tS.Days;
                        int pdays = Convert.ToInt32(dr1["P_days"]);
                        int gg = dys - pdays;
                        dtm.Rows.Add(dr1);
                        //==========                     
                    }
                }

                if (dt1.Rows.Count > 0)
                {
                    for (int j = 0; j < dt1.Rows.Count; j++)
                    {
                        bill_amtt = 0;
                        DataRow dr2 = dtm1.NewRow();
                        dr2["header1"] = dt1.Rows[j]["header1"].ToString().Trim();
                        dr2["Party1"] = dt1.Rows[j]["Party1"].ToString().Trim();
                        dr2["invnoo"] = dt1.Rows[j]["invnoo"].ToString().Trim();
                        dr2["Typee"] = dt1.Rows[j]["typee"].ToString().Trim();
                        dr2["vchnumm"] = dt1.Rows[j]["vchnumm"].ToString().Trim();
                        dr2["vchdatee"] = Convert.ToDateTime(dt1.Rows[j]["vchdatee"].ToString().Trim()).ToShortDateString();
                        duedate = Convert.ToDateTime(dt.Rows[j]["Due_date"].ToString().Trim());
                        dr2["invdate1"] = dt1.Rows[j]["invdate1"].ToString().Trim();
                        bill_amtt = fgen.make_double(dt1.Rows[j]["bill_amtt"].ToString().Trim());
                        dr2["Bill_Amtt"] = bill_amtt;
                        dr2["BalanceMm"] = fgen.make_double(dt1.Rows[j]["Balancee"].ToString().Trim());
                        dr2["RecAmt"] = fgen.make_double(dt1.Rows[j]["Total_Outstanding1"].ToString().Trim());
                        dr2["Balancee"] = bill_amtt - fgen.make_double(dt1.Rows[j]["Total_Outstanding1"].ToString().Trim());
                        dr2["shortexc"] = bill_amtt - fgen.make_double(dt1.Rows[j]["Received"].ToString().Trim());
                        dr2["NetBal"] = 0;
                        dr2["Remarkss"] = dt1.Rows[j]["Remarkss"].ToString().Trim();
                        dtm1.Rows.Add(dr2);
                    }
                }

                if (dtm.Rows.Count > 0)
                {
                    dtm.TableName = "Prepcur";
                    dsRep.Tables.Add(dtm);
                    dtm1.TableName = "subprep";
                    dsRep.Tables.Add(dtm1);
                    pdfView = "N";
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Pay_Voucher", "Pay_Voucher", dsRep, header_n, "Y");
                }

                #endregion
                break;
            case "F70724":
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COl1");
                header_n = "Block Transaction With Party";
                SQuery = "select distinct '" + header_n + "' as Header,a.*,b.aname from WB_TRAN_CTRL a,famst b where trim(A.acode)=trim(B.acode) and  a.branchcd='" + frm_mbr + "' and a.type='BL' and a.CTRLNO||to_char(a.CTRLDT,'dd/mm/yyyy') ='" + mq1 + "'  ";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "Block_Trans", "Block_Trans", dsRep, header_n, "Y");
                }
                else
                {
                    data_found = "N";
                }
                break;

            case "F05100F"://need diff id
                #region
                string numbr_fmt = "9,99,99,99,999.99";
                header_n = "MONTHLY SALES REPORT PRINTABLE (All Affiliates)";
                dt1 = new DataTable();
                SQuery = "select * from mths order by mthsno";
                dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                h1 = ""; h2 = ""; h3 = ""; h4 = ""; h5 = ""; h6 = ""; h7 = ""; h8 = ""; h9 = ""; h10 = ""; h11 = ""; h12 = "";

                if (dt1.Rows.Count > 0)
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {

                        col1 = col1 + "a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + " +";
                        col2 = col2 + ", sum(a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + ") as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";
                        // col2 = col2 + ", to_char(sum(a." + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "),'" + numbr_fmt + "') as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";//this format for convert number into to_Char
                        //col3 = col3 + ", (Case when to_char(vchdate,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then dramt-cramt   else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";
                        col3 = col3 + ", (Case when to_char(vchdate,'mm')='" + dt1.Rows[i]["mthnum"].ToString().Trim() + "' then (dramt-cramt)*(-1)   else 0 end) as " + dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3) + "";

                        if (i == 0) { h1 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 1) { h2 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 2) { h3 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 3) { h4 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 4) { h5 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 5) { h6 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 6) { h7 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 7) { h8 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 8) { h9 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 9) { h10 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 10) { h11 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                        if (i == 11) { h12 = dt1.Rows[i]["mthname"].ToString().Trim().Substring(0, 3); }
                    }
                }

                if (col1.Length > 2) col1 = col1.TrimEnd('+');
                if (col2.Length > 2) col2 = col2.TrimStart(',');
                if (col3.Length > 2) col3 = col3.TrimStart(',');

                if (frm_vty.Contains("%"))
                {
                    //SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,substr(trim(b.grp),1,2) as acc,c.name as accname,a.acode,b.aname,sum(" + col1 + ") as total," + col2 + " from (select acode," + col3 + " from VOUCHER where branchcd not in '88' and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C  where trim(a.acode)=trim(b.acode) and substr(trim(b.grp),1,2)=trim(c.type1) AND C.ID='Z' and substr(trim(b.grp),1,1)>='2' group by a.acode,substr(trim(b.grp),1,2),b.aname,c.name order by acc,acode";
                    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,a.branchcd,D.NAME AS BRANCH_NAME,a.type,e.name as type_name,a.acode,b.aname,sum(" + col1 + ") as total," + col2 + " from (select acode,branchcd,TYPE," + col3 + " from VOUCHER where branchcd not in '88' and (type like '4%' or type like '65%')  and vchdate " + xprdRange + " ) a,famst b,type d,TYPE E where trim(a.acode)=trim(b.acode)  and trim(a.branchcd)=trim(d.type1) and d.id='B' and a.type=trim(e.type1) and e.id='V' and substr(trim(b.grp),1,1)>='2' group by a.acode,b.aname,D.NAME,a.type,e.name,a.branchcd  order by a.branchcd asc,a.type";//by yogita with help of pkg sir
                    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,a.branchcd,D.NAME AS BRANCH_NAME,a.type,e.name as type_name,sum(" + col1 + ") as total," + col2 + " from (select acode,branchcd,TYPE," + col3 + " from VOUCHER where branchcd not in '88' and (type like '4%' or type like '65%') and vchdate " + xprdRange + " ) a,famst b,type d,TYPE E where trim(a.acode)=trim(b.acode)  and trim(a.branchcd)=trim(d.type1) and d.id='B' and a.type=trim(e.type1) and e.id='V' and substr(trim(b.grp),1,1)>='2' group by D.NAME,a.type,e.name,a.branchcd  order by a.branchcd asc,a.type";//by yogita with help of pkg sir
                }
                else
                {
                    //SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,substr(trim(b.grp),1,2) as acc,c.name as accname,a.acode,b.aname,sum(" + col1 + ") as total," + col2 + " from (select acode," + col3 + " from VOUCHER where branchcd in (" + frm_vty + ") and type like '%' and vchdate " + xprdRange + " ) a,famst b,TYPE C  where trim(a.acode)=trim(b.acode) and substr(trim(b.grp),1,2)=trim(c.type1) AND C.ID='Z' and substr(trim(b.grp),1,1)>='2' group by a.acode,b.aname,c.name,substr(trim(b.grp),1,2) order by acc,acode";
                    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,a.branchcd,D.NAME AS BRANCH_NAME,a.type,e.name as type_name,a.acode,b.aname,sum(" + col1 + ") as total," + col2 + " from (select acode,branchcd,TYPE," + col3 + " from VOUCHER where branchcd in (" + frm_vty + ") and (type like '4%' or type like '65%') and vchdate " + xprdRange + " )  a,famst b,type d,TYPE E where trim(a.acode)=trim(b.acode)  and trim(a.branchcd)=trim(d.type1) and d.id='B' and a.type=trim(e.type1) and e.id='V' and substr(trim(b.grp),1,1)>='2' group by a.acode,b.aname,D.NAME,a.type,e.name,a.branchcd  order by a.branchcd asc,a.type";
                    SQuery = "select '" + fromdt + "' as frmdt,'" + todt + "' as todt,'" + header_n + "' as header,a.branchcd,D.NAME AS BRANCH_NAME,a.type,e.name as type_name,sum(" + col1 + ") as total," + col2 + " from (select acode,branchcd,TYPE," + col3 + " from VOUCHER where branchcd in (" + frm_vty + ") and (type like '4%' or type like '65%') and vchdate " + xprdRange + " )  a,famst b,type d,TYPE E where trim(a.acode)=trim(b.acode)  and trim(a.branchcd)=trim(d.type1) and d.id='B' and a.type=trim(e.type1) and e.id='V' and substr(trim(b.grp),1,1)>='2' group by D.NAME,a.type,e.name,a.branchcd  order by a.branchcd asc,a.type";
                }
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

                dt.Columns.Add("mth0", typeof(string));
                dt.Columns.Add("mth1", typeof(string));
                dt.Columns.Add("mth2", typeof(string));
                dt.Columns.Add("mth3", typeof(string));
                dt.Columns.Add("mth4", typeof(string));
                dt.Columns.Add("mth5", typeof(string));
                dt.Columns.Add("mth6", typeof(string));
                dt.Columns.Add("mth7", typeof(string));
                dt.Columns.Add("mth8", typeof(string));
                dt.Columns.Add("mth9", typeof(string));
                dt.Columns.Add("mth10", typeof(string));
                dt.Columns.Add("mth11", typeof(string));

                dt.Columns.Add("mthv0", typeof(double));
                dt.Columns.Add("mthv1", typeof(double));
                dt.Columns.Add("mthv2", typeof(double));
                dt.Columns.Add("mthv3", typeof(double));
                dt.Columns.Add("mthv4", typeof(double));
                dt.Columns.Add("mthv5", typeof(double));
                dt.Columns.Add("mthv6", typeof(double));
                dt.Columns.Add("mthv7", typeof(double));
                dt.Columns.Add("mthv8", typeof(double));
                dt.Columns.Add("mthv9", typeof(double));
                dt.Columns.Add("mthv10", typeof(double));
                dt.Columns.Add("mthv11", typeof(double));

                if (dt.Rows.Count > 0)
                {

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["mth0"] = h1;
                        dt.Rows[i]["mth1"] = h2;
                        dt.Rows[i]["mth2"] = h3;
                        dt.Rows[i]["mth3"] = h4;
                        dt.Rows[i]["mth4"] = h5;
                        dt.Rows[i]["mth5"] = h6;
                        dt.Rows[i]["mth6"] = h7;
                        dt.Rows[i]["mth7"] = h8;
                        dt.Rows[i]["mth8"] = h9;
                        dt.Rows[i]["mth9"] = h10;
                        dt.Rows[i]["mth10"] = h11;
                        dt.Rows[i]["mth11"] = h12;

                        dt.Rows[i]["mthv0"] = fgen.make_double(dt.Rows[i]["" + h1 + ""].ToString());
                        dt.Rows[i]["mthv1"] = fgen.make_double(dt.Rows[i]["" + h2 + ""].ToString());
                        dt.Rows[i]["mthv2"] = fgen.make_double(dt.Rows[i]["" + h3 + ""].ToString());
                        dt.Rows[i]["mthv3"] = fgen.make_double(dt.Rows[i]["" + h4 + ""].ToString());
                        dt.Rows[i]["mthv4"] = fgen.make_double(dt.Rows[i]["" + h5 + ""].ToString());
                        dt.Rows[i]["mthv5"] = fgen.make_double(dt.Rows[i]["" + h6 + ""].ToString());
                        dt.Rows[i]["mthv6"] = fgen.make_double(dt.Rows[i]["" + h7 + ""].ToString());
                        dt.Rows[i]["mthv7"] = fgen.make_double(dt.Rows[i]["" + h8 + ""].ToString());
                        dt.Rows[i]["mthv8"] = fgen.make_double(dt.Rows[i]["" + h9 + ""].ToString());
                        dt.Rows[i]["mthv9"] = fgen.make_double(dt.Rows[i]["" + h10 + ""].ToString());
                        dt.Rows[i]["mthv10"] = fgen.make_double(dt.Rows[i]["" + h11 + ""].ToString());
                        dt.Rows[i]["mthv11"] = fgen.make_double(dt.Rows[i]["" + h12 + ""].ToString());
                    }
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_PL_Trend_N", "std_PL_Trend_N", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                #endregion
                break;
            case "F49212F":
                mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_COL1");
                header_n = "BILLS CHECKED";
                SQuery = "select '" + header_n + "' as Header,a.vchnum,a.vchdate,trim(a.acode) as acode,a.col1,a.col2,a.col3,a.col4,b.aname from multivch a,famst b where trim(a.acode)=trim(b.acode) and a.branchcd='" + frm_mbr + "' and a.type='AC' and a.vchnum||to_char(a.vchdate,'dd/mm/yyyy')='" + mq1 + "'";
                dt = new DataTable();
                dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
                if (dt.Rows.Count > 0)
                {
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(fgen.mTitle(dt, repCount));
                    Print_Report_BYDS(frm_cocd, frm_mbr, "std_bills_check", "std_bills_check", dsRep, header_n);
                }
                else
                {
                    data_found = "N";
                }
                break;
        }
    }

    public void Print_Report_BYDS(string co_Cd, string mbr, string xml, string report, DataSet data_set, string title)
    {
        string xfilepath = Server.MapPath("~/tej-base/XMLFILE/" + xml.Trim() + ".xml");
        string rptfile = "~/tej-base/Report/" + report.Trim() + ".rpt";

        data_set.Tables.Add(fgen.Get_Type_Data(frm_qstr, co_Cd, mbr));
        data_set.WriteXml(xfilepath, XmlWriteMode.WriteSchema);
        if (data_set.Tables[0].Rows.Count > 0)
        {
            CrystalReportViewer1.DisplayPage = true;
            CrystalReportViewer1.DisplayToolbar = true;
            CrystalReportViewer1.DisplayGroupTree = false;
            CrystalReportViewer1.ReportSource = GetReportDocument(data_set, rptfile);
            CrystalReportViewer1.DataBind();
            Session["data_set"] = data_set;
            Session["rptfile"] = rptfile;
            data_found = "Y";
            if ((frm_cocd == "WING" || frm_cocd == "AEPL" || frm_cocd == "MLGI" || frm_cocd == "SAIL" || frm_cocd == "SAIP") && (frm_formID == "P70106D" || frm_formID == "P70106C"))
            {
                printDsc(data_set, rptfile);
            }
            //activate by pkgs 23/06/2021
            if (pdfView == "X")
                conv_pdf(data_set, rptfile);
        }
        else
        {
        }
        data_set.Dispose();
    }

    public void Print_Report_BYDS(string co_Cd, string mbr, string xml, string report, DataSet data_set, string title, string addlogo)
    {
        string xfilepath = "", rptfile = "";
        //for dr and cr note same rpt is used ..rpt is std_Vch_rpt from fin-base folder..which is used on print dsc dr/cr note in main..only for some clients this is diff       
        if ((frm_formID == "P70106C" || frm_formID == "P70106D") && (frm_cocd != "BONY" && frm_cocd != "SFAB" && frm_cocd != "SAIP" && frm_cocd != "WING" && frm_cocd != "AEPL" && frm_cocd != "MLG1" && (frm_cocd == "SDM" && sdm_rep == "NO")))
        {
            xfilepath = Server.MapPath("~/tej-base/XMLFILE/" + xml.Trim() + ".xml");
            rptfile = "~/tej-base/REPORT/" + report.Trim() + ".rpt";
        }
        //else if ((frm_formID == "F70203M") && (frm_cocd == "GGRP"))
        //{
        //    xfilepath = Server.MapPath("~/tej-base/XMLFILE/" + xml.Trim() + ".xml");
        //    rptfile = "~/tej-base/REPORT/" + report.Trim() + ".rpt";
        //}
        //std_Vch_Rpt_IRNQR
        else
        {
            xfilepath = Server.MapPath("~/tej-base/XMLFILE/" + xml.Trim() + ".xml");
            rptfile = "~/tej-base/Report/" + report.Trim() + ".rpt";
        }

        if (addlogo == "Y") data_set.Tables.Add(fgen.Get_Type_Data(frm_qstr, co_Cd, mbr, "Y"));
        else data_set.Tables.Add(fgen.Get_Type_Data(frm_qstr, co_Cd, mbr));


        data_set.WriteXml(xfilepath, XmlWriteMode.WriteSchema);
        if (data_set.Tables[0].Rows.Count > 0)
        {
            CrystalReportViewer1.DisplayPage = true;
            CrystalReportViewer1.DisplayToolbar = true;
            CrystalReportViewer1.DisplayGroupTree = false;
            CrystalReportViewer1.ReportSource = GetReportDocument(data_set, rptfile);
            CrystalReportViewer1.DataBind();
            Session["data_set"] = data_set;
            Session["rptfile"] = rptfile;
            data_found = "Y";
            if ((frm_cocd == "WING" || frm_cocd == "AEPL" || frm_cocd == "MLGI" || frm_cocd == "SAIL" || frm_cocd == "SAIP" || frm_cocd == "SDM") && (frm_formID == "P70106D" || frm_formID == "P70106C"))
            {
                printDsc(data_set, rptfile);
            }
            //  else if (pdfView == "Y")
            // conv_pdf(data_set, rptfile);
        }
        else
        {
        }
        data_set.Dispose();
    }
    public void Print_Chq_BYDS(string co_Cd, string mbr, string xml, string report, DataSet data_set, string title)
    {
        string xfilepath = Server.MapPath("~/tej-base/XMLFILE/" + xml.Trim() + ".xml");
        string rptfile = "~/tej-base/Report/" + report.Trim() + ".rpt";

        data_set.Tables.Add(fgen.Get_Type_Data(frm_qstr, co_Cd, mbr));

        data_set.WriteXml(xfilepath, XmlWriteMode.WriteSchema);
        if (data_set.Tables[0].Rows.Count > 0)
        {
            CrystalReportViewer1.DisplayPage = true;
            CrystalReportViewer1.DisplayToolbar = true;
            CrystalReportViewer1.DisplayGroupTree = false;
            CrystalReportViewer1.ReportSource = GetReportDocument(data_set, rptfile, "Y");
            CrystalReportViewer1.DataBind();
            Session["data_set"] = data_set;
            Session["rptfile"] = rptfile;
            data_found = "Y";
            if (pdfView == "Y")
                conv_pdf(data_set, rptfile);
        }
        else
        {
        }
        data_set.Dispose();
    }

    public override void VerifyRenderingInServerForm(Control control)
    { return; }

    private ReportDocument GetReportDocument(DataSet rptDS, string rptFileName)
    {
        string repFilePath = Server.MapPath("" + rptFileName + "");
        repDoc = new ReportDocument();
        repDoc.Load(repFilePath);
        repDoc.Refresh();
        repDoc.SetDataSource(rptDS);
        return repDoc;
    }

    private ReportDocument GetReportDocument(DataSet rptDS, string rptFileName, string chqPrint)
    {
        string repFilePath = Server.MapPath("" + rptFileName + "");
        repDoc = new ReportDocument();
        repDoc.Load(repFilePath);
        repDoc.Refresh();
        repDoc.SetDataSource(rptDS);

        if (rptDS.Tables["Prepcur"].Rows.Count > 0)
        {
            frm_vty = rptDS.Tables["Prepcur"].Rows[0]["type"].ToString().Trim();

            DataTable dtPos = new DataTable();
            dtPos = fgen.getdata(frm_qstr, frm_cocd, "SELECT * FROM TYPE WHERE ID='V' AND TYPE1='" + frm_vty + "'");
            double allZero = 0;
            if (dtPos.Rows.Count > 0)
            {
                //Ac Payee
                if (fgen.make_int(dtPos.Rows[0]["ZIPCODE"].ToString()) == 0 && fgen.make_int(dtPos.Rows[0]["EMAIL"].ToString()) == 0)
                {
                    repDoc.ReportDefinition.ReportObjects["acp1"].Height = 0;
                    repDoc.ReportDefinition.ReportObjects["acp1"].Height = 0;
                }
                else
                {
                    allZero++;
                    repDoc.ReportDefinition.ReportObjects["acp1"].Top = fgen.make_int(dtPos.Rows[0]["ZIPCODE"].ToString());
                    repDoc.ReportDefinition.ReportObjects["acp1"].Left = fgen.make_int(dtPos.Rows[0]["EMAIL"].ToString());
                }
                //Date 
                if (fgen.make_int(dtPos.Rows[0]["WEBSITE"].ToString()) == 0 && fgen.make_int(dtPos.Rows[0]["TCS_NUM"].ToString()) == 0)
                {
                    repDoc.ReportDefinition.ReportObjects["VCHDATE1"].Height = 0;
                    repDoc.ReportDefinition.ReportObjects["VCHDATE1"].Height = 0;
                }
                else
                {
                    allZero++;
                    repDoc.ReportDefinition.ReportObjects["VCHDATE1"].Top = fgen.make_int(dtPos.Rows[0]["WEBSITE"].ToString());
                    repDoc.ReportDefinition.ReportObjects["VCHDATE1"].Left = fgen.make_int(dtPos.Rows[0]["TCS_NUM"].ToString());
                }
                //PARTY NAME
                if (fgen.make_int(dtPos.Rows[0]["VAT_FORM"].ToString()) == 0 && fgen.make_int(dtPos.Rows[0]["CSTNO"].ToString()) == 0)
                {
                    repDoc.ReportDefinition.ReportObjects["ANAME1"].Height = 0;
                    repDoc.ReportDefinition.ReportObjects["ANAME1"].Height = 0;
                }
                else
                {
                    allZero++;
                    repDoc.ReportDefinition.ReportObjects["ANAME1"].Top = fgen.make_int(dtPos.Rows[0]["VAT_FORM"].ToString());
                    repDoc.ReportDefinition.ReportObjects["ANAME1"].Left = fgen.make_int(dtPos.Rows[0]["CSTNO"].ToString());
                }
                //AMT IN WORD
                if (fgen.make_int(dtPos.Rows[0]["NOTIFICATION"].ToString()) == 0 && fgen.make_int(dtPos.Rows[0]["RADDR"].ToString()) == 0)
                {
                    repDoc.ReportDefinition.ReportObjects["totAmtWord1"].Height = 0;
                    repDoc.ReportDefinition.ReportObjects["totAmtWord1"].Height = 0;
                }
                else
                {
                    allZero++;
                    repDoc.ReportDefinition.ReportObjects["totAmtWord1"].Top = fgen.make_int(dtPos.Rows[0]["NOTIFICATION"].ToString());
                    repDoc.ReportDefinition.ReportObjects["totAmtWord1"].Left = fgen.make_int(dtPos.Rows[0]["RADDR"].ToString());
                }
                //AMT IN FIG
                if (fgen.make_int(dtPos.Rows[0]["RADDR1"].ToString()) == 0 && fgen.make_int(dtPos.Rows[0]["RPHONE"].ToString()) == 0)
                {
                    repDoc.ReportDefinition.ReportObjects["dr1"].Height = 0;
                    repDoc.ReportDefinition.ReportObjects["dr1"].Height = 0;
                }
                else
                {
                    allZero++;
                    repDoc.ReportDefinition.ReportObjects["dr1"].Top = fgen.make_int(dtPos.Rows[0]["RADDR1"].ToString());
                    repDoc.ReportDefinition.ReportObjects["dr1"].Left = fgen.make_int(dtPos.Rows[0]["RPHONE"].ToString());
                }
                //FIRM
                if (fgen.make_int(dtPos.Rows[0]["HADDR"].ToString()) == 0 && fgen.make_int(dtPos.Rows[0]["HADDR1"].ToString()) == 0)
                {
                    repDoc.ReportDefinition.ReportObjects["forFirm1"].Height = 0;
                    repDoc.ReportDefinition.ReportObjects["forFirm1"].Height = 0;
                }
                else
                {
                    allZero++;
                    repDoc.ReportDefinition.ReportObjects["forFirm1"].Top = fgen.make_int(dtPos.Rows[0]["HADDR"].ToString());
                    repDoc.ReportDefinition.ReportObjects["forFirm1"].Left = fgen.make_int(dtPos.Rows[0]["HADDR1"].ToString());
                }
                //AUTH.SIGN
                if (fgen.make_int(dtPos.Rows[0]["HPHONE"].ToString()) == 0 && fgen.make_int(dtPos.Rows[0]["BANKNAME"].ToString()) == 0)
                {
                    repDoc.ReportDefinition.ReportObjects["authsig1"].Height = 0;
                    repDoc.ReportDefinition.ReportObjects["authsig1"].Height = 0;
                }
                else
                {
                    allZero++;
                    repDoc.ReportDefinition.ReportObjects["authsig1"].Top = fgen.make_int(dtPos.Rows[0]["HPHONE"].ToString());
                    repDoc.ReportDefinition.ReportObjects["authsig1"].Left = fgen.make_int(dtPos.Rows[0]["BANKNAME"].ToString());
                }
                //AC.NUM
                if (fgen.make_int(dtPos.Rows[0]["BANKADDR"].ToString()) == 0 && fgen.make_int(dtPos.Rows[0]["BANKAC"].ToString()) == 0)
                {
                    repDoc.ReportDefinition.ReportObjects["REFNUM1"].Height = 0;
                    repDoc.ReportDefinition.ReportObjects["REFNUM1"].Height = 0;
                }
                else
                {
                    allZero++;
                    repDoc.ReportDefinition.ReportObjects["REFNUM1"].Top = fgen.make_int(dtPos.Rows[0]["BANKADDR"].ToString());
                    repDoc.ReportDefinition.ReportObjects["REFNUM1"].Left = fgen.make_int(dtPos.Rows[0]["BANKAC"].ToString());
                }
            }

            if (allZero == 0)
            {
                Response.Write("<script>");
                Response.Write("alert('Cheque Setting is not correct !!')");
                Response.Write("</script>");
            }
        }

        return repDoc;
    }

    protected void Page_UnLoad(object sender, EventArgs e)
    {
        //try
        //{
        if (repDoc == null)
        { }
        else
        {
            repDoc.Close();
            repDoc.Dispose();

            CrystalReportViewer1.Dispose();
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }
        //}
        //catch (Exception ex) { fgen.FILL_ERR(ex.Message.ToString().Trim() + "==> dprint ==> At the Time of Page UnLoad."); }
    }

    protected override void OnUnload(EventArgs e)
    {
        //try
        //{
        base.OnUnload(e);
        this.Unload += new EventHandler(Report_Default_Unload);
        //}
        //catch { }
    }

    void Report_Default_Unload(object sender, EventArgs e)
    {
        try
        {
            repDoc.Close();
            repDoc.Dispose();
        }
        catch { }
    }

    protected void CrystalReportViewer1_Unload(object sender, EventArgs e)
    {
        if (data_found == "N")
        {
            return;
        }
        else
        {
            if (repDoc == null) return;
            else
            {
                repDoc.Close();
                repDoc.Dispose();
            }
        }
    }

    public void conv_pdf(DataSet dataSet, string rptFile)
    {
        //if (1 == 2)
        {
            if (frm_formID == "F70555" || frm_formID == "F70555CHQ") repDoc = GetReportDocument(dataSet, rptFile, "Y");
            else repDoc = GetReportDocument(dataSet, rptFile);
            Stream oStream = repDoc.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
            byte[] byteArray = null;
            byteArray = new byte[oStream.Length];
            oStream.Read(byteArray, 0, Convert.ToInt32(oStream.Length - 1));
            Response.ClearContent();
            Response.ClearHeaders();
            Response.ContentType = "application/pdf";
            Response.BinaryWrite(byteArray);

            Response.Flush();
            Response.Close();
            repDoc.Close();
            repDoc.Dispose();
        }
    }

    public void del_file(string path)
    {
        try
        {
            fpath = Server.MapPath(path);
            if (System.IO.File.Exists(fpath)) System.IO.File.Delete(fpath);
        }
        catch { }
    }

    protected void btnexp_Click(object sender, EventArgs e)
    {
        DataSet ds = (DataSet)Session["data_set"];
        if (ds.Tables[0].Rows.Count > 0)
        {
            frm_FileName = frm_cocd + "_" + DateTime.Now.ToString().Trim();
            fgen.exp_to_excel(ds.Tables[0], "ms-excel", "xls", frm_FileName);
        }
    }

    protected void btnexptopdf_Click(object sender, EventArgs e)
    {
        try
        {
            try
            {
                frm_FileName = frm_cocd + "_" + fgen.seek_iname(frm_qstr, frm_cocd, "SELECT TEXT FROM FIN_MSYS WHERE ID='" + frm_formID + "'", "TEXT").Replace(" ", "_") + "_" + DateTime.Now.ToString().Trim();
            }
            catch
            {
                frm_FileName = frm_cocd + "_" + DateTime.Now.ToString().Trim();
            }
            DataSet ds = (DataSet)Session["data_set"];
            string rpt = (string)Session["rptfile"];
            if (hfhcid.Value.Trim() == "F70337" || hfhcid.Value.Trim() == "F70338")
            {
                DataTable dtDistEntryNo = new DataTable();
                DataView dv = new DataView(ds.Tables[0], "", "", DataViewRowState.CurrentRows);
                dtDistEntryNo = dv.ToTable(true, "ACODE", "ANAME");
                string[] allFiles = new string[dtDistEntryNo.Rows.Count];
                int k = 0;
                foreach (DataRow dr in dtDistEntryNo.Rows)
                {
                    DataTable newDt = new DataTable();
                    DataSet newDs = new DataSet();
                    DataView dvN = new DataView(ds.Tables[0], "ACODE='" + dr["acode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    newDt = dvN.ToTable();
                    newDs.Tables.Add(newDt);
                    DataRow nedr;
                    for (int i = 0; i < ds.Tables.Count; i++)
                    {
                        if (ds.Tables[i].TableName.ToUpper() != "PREPCUR")
                        {
                            newDt = new DataTable();
                            newDt = ds.Tables[i].Clone();
                            for (int x = 0; x < ds.Tables[i].Rows.Count; x++)
                            {
                                nedr = newDt.NewRow();
                                for (int y = 0; y < ds.Tables[i].Columns.Count; y++)
                                {
                                    nedr[y] = ds.Tables[i].Rows[x][y];
                                }
                                newDt.Rows.Add(nedr);
                            }
                            newDt.TableName = ds.Tables[i].TableName;
                            newDs.Tables.Add(newDt);
                        }
                    }
                    frm_FileName = "C:\\tej_erp\\" + dr["aname"].ToString().Trim().Replace(@"/", "").Replace(@"\", "") + "_" + DateTime.Now.ToString("dd_mm_yy") + ".pdf";
                    repDoc = GetReportDocument(newDs, rpt);
                    try
                    {
                        repDoc.Refresh();
                        repDoc.ExportToDisk(ExportFormatType.PortableDocFormat, frm_FileName);

                        allFiles[k] = frm_FileName;

                        k++;
                    }
                    catch { }
                }

                //using (ZipFile zip = new ZipFile())
                //{
                //    zip.AlternateEncodingUsage = ZipOption.AsNecessary;
                //    zip.AddDirectoryByName("Files");
                //    for (int x = 0; x < allFiles.Length; x++)
                //    {
                //        string zfilePath = allFiles[x].ToString();
                //        zip.AddFile(zfilePath, "Files");
                //    }
                //    Response.Clear();
                //    Response.BufferOutput = false;
                //    string zipName = String.Format("{0}.zip", "PaymentReminderLetter" + "_" + DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss"));
                //    Response.ContentType = "application/zip";
                //    Response.AddHeader("content-disposition", "attachment; filename=" + zipName);
                //    zip.Save(Response.OutputStream);
                //    Response.End();
                //}
            }
            else
            {
                if (frm_formID == "F70555" || frm_formID == "F70555CHQ") repDoc = GetReportDocument(ds, rpt, "Y");
                else repDoc = GetReportDocument(ds, rpt);
                repDoc.ExportToHttpResponse(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, Response, true, frm_FileName);
                repDoc.Close();
                repDoc.Dispose();
            }
        }
        catch { }
    }

    protected void btnexptoexl_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            frm_FileName = frm_cocd + "_" + DateTime.Now.ToString().Trim();
            DataSet ds = (DataSet)Session["data_set"];
            string rpt = (string)Session["rptfile"];
            repDoc = GetReportDocument(ds, rpt);
            ExportOptions exportOption = repDoc.ExportOptions;
            {
                exportOption.ExportFormatType = ExportFormatType.Excel;
                exportOption.FormatOptions = new ExcelFormatOptions();
            }
            repDoc.ExportToHttpResponse(exportOption, Response, true, frm_FileName);
            repDoc.Close();
            repDoc.Dispose();
        }
        catch { }
    }

    protected void btnexptoword_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            frm_FileName = frm_cocd + "_" + DateTime.Now.ToString().Trim();
            DataSet ds = (DataSet)Session["data_set"];
            string rpt = (string)Session["rptfile"];
            repDoc = GetReportDocument(ds, rpt);
            repDoc.ExportToHttpResponse(CrystalDecisions.Shared.ExportFormatType.WordForWindows, Response, true, frm_FileName);
            repDoc.Close();
            repDoc.Dispose();
        }
        catch { }
    }

    protected void btnprint1_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            DataSet ds = (DataSet)Session["data_set"];
            string rpt = (string)Session["rptfile"];
            conv_pdf(ds, rpt);
        }
        catch (Exception ex) { ex.Message.ToString(); }
    }

    protected void btnsendmail_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            string aname1 = "", mq1 = ""; mq10 = "";
            frm_formID = fgenMV.Fn_Get_Mvar(frm_qstr, "U_FORMID");
            DataTable dt = new DataTable();
            DataTable mdt = new DataTable();
            DataTable fdt = new DataTable();
            DataSet data_set = new DataSet();
            data_set = (DataSet)Session["data_set"];
            DataView dv = new DataView(data_set.Tables[0], "", "acode", DataViewRowState.CurrentRows);

            fdt = data_set.Tables[0];
            mdt = dv.ToTable(true, "acode", "p_email");
            DataSet dsRep = new DataSet();
            DataRow dr;
            dt = fdt.Clone();

            foreach (DataRow dr1 in mdt.Rows)
            {
                if (dr1["p_email"].ToString().Length > 2)
                {
                    dsRep = new DataSet();// FOR REMOVING DATATABLE ALREADY BELONGS TO ANOTHER DATASET
                    dt = new DataTable();// FOR REMOVING DATATABLE ALREADY BELONGS TO THIS DATASET
                    dt = fdt.Clone();
                    DataTable dt1 = new DataTable();
                    dv = new DataView(fdt, "acode='" + dr1["acode"].ToString().Trim() + "'", "acode", DataViewRowState.CurrentRows);
                    dt1 = dv.ToTable();
                    foreach (DataRow drdt1 in dt1.Rows)
                    {
                        dr = dt.NewRow();
                        aname1 = drdt1["aname"].ToString().Trim();
                        foreach (DataColumn dcdt in dt.Columns)
                        {
                            if (drdt1[dcdt.ColumnName] == null) dr[dcdt.ColumnName] = 0;
                            else dr[dcdt.ColumnName] = drdt1[dcdt.ColumnName];
                        }
                        if (frm_formID == "F70285")
                        {
                            mq10 = drdt1["type"].ToString().Trim();
                            mq1 = "Order Registration No. : (" + drdt1["ordno"].ToString().Trim() + ") Dated (" + drdt1["vdd"].ToString().Trim() + ")";
                        }
                        dt.Rows.Add(dr);
                    }

                    string repname = "";
                    frm_formID = fgenMV.Fn_Get_Mvar(frm_qstr, "U_FORMID");
                    if (frm_formID == "F70240" || frm_formID == "F70145")
                    {
                        repname = "std_pymt_advise_N";
                        if (frm_cocd == "KLAS") repname = "std_pymt_advise_klas";
                    }
                    else if (frm_formID == "F70336")
                    {
                        repname = "Bal_confir";
                    }
                    else if (frm_formID == "F70335" || frm_formID == "F70337")
                    {
                        if (frm_cocd == "CENL")
                        {
                            repname = "CenlPReminder";
                        }
                        else if (frm_cocd == "HPPI" || frm_cocd == "SPPI") repname = "Pay_reminderSPPI";
                        else
                        {
                            repname = "Pay_reminder";
                        }
                    }
                    else if (frm_formID == "F70298") { repname = "stac"; }
                    else if (frm_formID == "F70285")
                    {
                        if (mq10 == "44")
                        {
                            repname = "ord_reg_stud";
                        }
                        else if (mq10 == "4F")
                        {
                            repname = "ord_reg_stud_exp";
                        }
                        else
                        {
                            repname = "ord_reg_stud_all";
                        }
                    }
                    html_body(aname1, mq1);
                    dt.TableName = "Prepcur";
                    dsRep.Tables.Add(dt);

                    if (frm_cocd == "MLGI" || frm_cocd == "MLGA" && (frm_formID == "F70335"))
                    {
                        mq10 = dt1.Compute("SUM(NET)", "").ToString();
                        subj = "Tejaxo ERP: Request for clearing dues " + aname1 + " " + DateTime.Now.ToString("dd/MM/yyyy") + " Rs. " + mq10;
                        xhtml_tag = "";
                        xhtml_tag = xhtml_tag + "<body><html>";
                        xhtml_tag = xhtml_tag + "M/s <b>" + aname1 + "</b><br>";
                        xhtml_tag = xhtml_tag + "Dear Sir/Madam," + "<br>";
                        xhtml_tag = xhtml_tag + "<BR>Greetings for the day!" + "<br>";
                        xhtml_tag = xhtml_tag + "We are thankful for your patronage." + "<br>";
                        xhtml_tag = xhtml_tag + "As per our records, some bills are overdue, and we request for your kind attention for the same." + "<br>";
                        xhtml_tag = xhtml_tag + "The PDF file is attached." + "<br><br>";
                        xhtml_tag = xhtml_tag + "An early payment shall be highly appreciated." + "<br>";
                        xhtml_tag = xhtml_tag + "We Request you for clearing our dues amounting to Rs. " + mq10 + "" + "<br>";
                        xhtml_tag = xhtml_tag + "<b>Kindly clear all our dues and AMC charges so as to serve you on priority basis.</b>" + "<br>";
                        xhtml_tag = xhtml_tag + "<b>In case of any query/non reconciliation with your account, please send us our Ledger account in your books..</b>" + "<br>";
                        xhtml_tag = xhtml_tag + "Please feel free to get back to us or call us at 9555333195/9310008914." + "<br>";
                        xhtml_tag = xhtml_tag + "We shall be obliged to reconcile the same." + "<br>";
                        xhtml_tag = xhtml_tag + "<br><br>Thanks & Regards," + "<br>";
                        xhtml_tag = xhtml_tag + "For " + firm + "" + "<br>";
                        xhtml_tag = xhtml_tag + "<br><br><br>Note: This is an automatically generated email from Tejaxo ERP" + "<br>";
                        xhtml_tag = xhtml_tag + "The above details are to be best of information and data available to the ERP system." + "<br>";
                        xhtml_tag = xhtml_tag + "Errors or Omissions if any are regretted." + "<br>";
                        xhtml_tag = xhtml_tag + "</body></html>";
                    }
                    if (frm_cocd == "PROG" && (frm_formID == "F70335"))
                    {
                        mq10 = dt1.Compute("SUM(NET)", "").ToString();
                        subj = firm + " - Outstanding";
                        xhtml_tag = "";
                        xhtml_tag = xhtml_tag + "<body><html>";
                        xhtml_tag = xhtml_tag + "M/s <b>" + aname1 + "</b><br>";
                        xhtml_tag = xhtml_tag + "Dear Sir/Madam," + "<br>";
                        xhtml_tag = xhtml_tag + "<BR>Greetings for the day!" + "<br>";

                        xhtml_tag = xhtml_tag + "As per our records there is outstanding of Rs. " + mq10 + ",The invoice details are attached for your reference. We request you to kindly advise accounts to clear the same." + "<br><br>";

                        xhtml_tag = xhtml_tag + "In case of any query/non reconciliation with your account, please send us our Ledger account in your books. We shall be obliged to reconcile the same." + "<br>";

                        xhtml_tag = xhtml_tag + "<br><br>Thanks & Regards," + "<br>";
                        xhtml_tag = xhtml_tag + "For " + firm + "" + "<br>";
                        xhtml_tag = xhtml_tag + "Finance Team" + "<br>";
                        xhtml_tag = xhtml_tag + "0129-4054793" + "<br>";
                        xhtml_tag = xhtml_tag + "finance@progressiveboard.com" + "<br>";
                        xhtml_tag = xhtml_tag + "<br><br><br>Note: This is an automatically generated email from Tejaxo ERP, Please do not reply" + "<br>";
                        xhtml_tag = xhtml_tag + "</body></html>";
                    }
                    if (frm_cocd == "MLAB" && (frm_formID == "F70335"))
                    {
                        mq10 = dt1.Compute("SUM(NET)", "").ToString();
                        subj = "Request for clearing dues " + aname1 + " " + DateTime.Now.ToString("dd/MM/yyyy") + " Rs. " + mq10;
                        xhtml_tag = "";
                        xhtml_tag = xhtml_tag + "<body><html>";
                        xhtml_tag = xhtml_tag + "M/s <b>" + aname1 + "</b><br>";
                        xhtml_tag = xhtml_tag + "Respected Sir/Madam," + "<br>";
                        xhtml_tag = xhtml_tag + "<BR>Greetings for the day!" + "";
                        xhtml_tag = xhtml_tag + "We are thankful for your patronage." + "<br>";
                        xhtml_tag = xhtml_tag + "As per our records, some bills are overdue, and we request for your kind attention for the same." + "";
                        xhtml_tag = xhtml_tag + "The PDF file is attached." + "<br><br>";
                        xhtml_tag = xhtml_tag + "An early payment shall be highly appreciated." + "";
                        xhtml_tag = xhtml_tag + "We Request you for clearing our dues amounting to Rs. " + mq10 + "" + "<br>";

                        xhtml_tag = xhtml_tag + "<b>In case of any query/non reconciliation with your account, please send us our Ledger account in your books..</b>" + "<br>";
                        xhtml_tag = xhtml_tag + "We shall be obliged to reconcile the same." + "<br>";
                        xhtml_tag = xhtml_tag + "<br><br>Thanks & Regards," + "<br>";
                        xhtml_tag = xhtml_tag + "For " + firm + "" + "<br>";
                        xhtml_tag = xhtml_tag + "<br><br><br>Note: This is an automatically generated email from Tejaxo ERP" + "<br>";
                        xhtml_tag = xhtml_tag + "The above details are to be best of information and data available to the ERP system." + "<br>";
                        xhtml_tag = xhtml_tag + "Errors or Omissions if any are regretted." + "<br>";
                        xhtml_tag = xhtml_tag + "</body></html>";
                    }

                    Print_Report_BYDS(frm_cocd, frm_mbr, repname, repname, dsRep, "", "Y");
                    Attachment atchfile = new Attachment(repDoc.ExportToStream(ExportFormatType.PortableDocFormat), frm_cocd + "_" + subj.Replace(" ", "_") + ".pdf");
                    fgen.send_mail(frm_qstr, frm_cocd, ((frm_cocd == "KLAS" || frm_cocd == "MLAB" || frm_cocd == "SGM") ? "" : "Tejaxo ERP"), dr1["p_email"].ToString().Trim(), txtemailcc.Text, txtemailbcc.Text, subj, xhtml_tag, atchfile, "2");
                    try
                    {
                        CrystalReportViewer1.Dispose();
                        repDoc.Close();
                        repDoc.Dispose();

                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                    }
                    catch { }
                }
            }
            fgen.send_cookie("Send_Mail", "N");
            ScriptManager.RegisterStartupScript(this, this.GetType(), "abc", "closePopup('#btnsendmail');", true);
        }
        catch (Exception ex)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "abc", "closePopup2();", true);
        }
    }

    public void html_body(string party_name, string oth_var1)
    {
        xhtml_tag = "";
        xhtml_tag = xhtml_tag + "<body><html>";
        if (frm_cocd == "OTTO" && (frm_formID == "F70336" || frm_formID == "F70240" || frm_formID == "F70335"))
        {
            firm = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT NAME FROM TYPE WHERE ID='B' AND TYPE1='" + frm_mbr + "'", "NAME");
        }
        else
        {
            firm = fgenCO.chk_co(frm_cocd);
        }
        firm = firm.Replace("XXXX", frm_cocd);
        xhtml_tag = xhtml_tag + "<br>M/s " + party_name + "<br>";
        if (frm_formID == "F70285" || frm_formID == "F70145" || frm_formID == "F70240")
        {
            xhtml_tag = xhtml_tag + "<h4><B> Dear Sir/Madam, </B></h4>";
        }
        else
        {
            xhtml_tag = xhtml_tag + "<h4><B> Respected Sir/Madam, </B></h4>";
        }

        switch (frm_formID)
        {
            case "34100":
            case "F70298":
                subj = "Tejaxo ERP: Statement of A/c from " + firm + "";
                xhtml_tag = xhtml_tag + "<BR>Please find attached the";
                xhtml_tag = xhtml_tag + "<br>Statement of A/c<br>";
                break;
            case "34101":
                subj = "Tejaxo ERP: Request for Clearane of dues from  " + firm + "";
                if (frm_cocd == "SGM") subj = firm + " : Request for Clearane of dues";
                xhtml_tag = xhtml_tag + "<BR>Our following payment become old. Kindly arrange to release the same as early as possible.";
                string val = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PERSON||' Tel No.'||mobile as val from famst where trim(aname)='" + party_name + "' ", "val");
                if (val != "0") xhtml_tag = xhtml_tag + "<BR><BR><b>Kind Attn</b>: " + val;
                xhtml_tag = xhtml_tag + "<BR>Please find attached the File";
                //xhtml_tag = xhtml_tag + "<br>due bills as on date<br>";
                break;
            case "34102":
                subj = "Tejaxo ERP: A/m Sales Report from " + firm + "";
                xhtml_tag = xhtml_tag + "<BR>Please find attached the ";
                xhtml_tag = xhtml_tag + "<br>despatch detials for material despatch<br>";
                break;
            case "F70240":
            case "F70145":
                subj = "Tejaxo ERP: Payment Advice Report from " + firm + "";
                if (frm_cocd == "KLAS")
                    subj = "Payment Advice Report from " + firm + "";
                xhtml_tag = xhtml_tag + "<BR>Please find attached the Payment Advice";
                xhtml_tag = xhtml_tag + "<br>The bill wise detail of the bill passed for value and deductions if any are attached. Please feel free to get in touch with the accounts department for clarifications if any.";
                if (frm_cocd != "KLAS")
                    xhtml_tag = xhtml_tag + "<br>It is a pleasure doing business with your company.";
                break;
            case "34104":
                subj = "Tejaxo ERP: Balance Confirmation Report from " + firm + "";
                xhtml_tag = xhtml_tag + "<BR>Please find attached the";
                xhtml_tag = xhtml_tag + "<br>Balance Confirmation<br>";
                break;
            case "34105":
                subj = "Tejaxo ERP: Form Reminder Report from " + firm + "";
                xhtml_tag = xhtml_tag + "<BR>Please find attached the";
                xhtml_tag = xhtml_tag + "<br>Form Reminder<br>";
                break;
            case "34106":
                subj = "Tejaxo ERP: RTGS/NEFT Report from " + firm + "";
                xhtml_tag = xhtml_tag + "<BR>Please find attached the";
                xhtml_tag = xhtml_tag + "<br>RTGS/NEFT<br>";
                break;
            case "34107":
                subj = "Tejaxo ERP: Payment Reminder(Due Bills) Report from " + firm + "";
                xhtml_tag = xhtml_tag + "<BR>Please find attached the";
                xhtml_tag = xhtml_tag + "<br>Payment Reminder(Due Bills)<br>";
                break;
            case "34108":
                subj = "Tejaxo ERP: Debit Note Report from " + firm + "";
                xhtml_tag = xhtml_tag + "<BR>Please find attached the";
                xhtml_tag = xhtml_tag + "<br>Debit Note<br>";
                break;
            case "20163E":
                subj = "Tejaxo ERP: 31-Day Purchase Schedule from " + firm + "";
                xhtml_tag = xhtml_tag + "<BR>We are glad to release schedule for the month of '" + oth_var1 + "'. ";
                xhtml_tag = xhtml_tag + "<br>Requested Please ensure delivery as per schedule date enclosed here with.<br>";
                xhtml_tag = xhtml_tag + "<br>PFA<br>";
                break;

            case "F70335":
            case "F70337":
                subj = "Tejaxo ERP: Request for Clearance of dues " + firm + "";
                val = "";
                val = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PERSON||' Tel No.'||mobile as val from famst where trim(aname)='" + party_name + "' ", "val");
                if (val != "0") xhtml_tag = xhtml_tag + "<BR><b>Kind Attn</b>: " + val;
                xhtml_tag = xhtml_tag + "<BR><BR>Greetings for the day!";
                xhtml_tag = xhtml_tag + "We are thankful for your patronage.";
                xhtml_tag = xhtml_tag + "As per our records, some bills are overdue, and we request for your kind attention for the same.";
                xhtml_tag = xhtml_tag + "The PDF file is attached.";
                xhtml_tag = xhtml_tag + "An early payment shall be highly appreciated.";
                xhtml_tag = xhtml_tag + "We Request you for clearing our dues. ";
                xhtml_tag = xhtml_tag + "In case of any query/non reconciliation with your account, please send us our Ledger account in your books..";
                xhtml_tag = xhtml_tag + "We shall be obliged to reconcile the same.";
                if (frm_cocd == "IPP")
                {
                    xhtml_tag = "";
                }
                //val = "";
                //val = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PERSON||' Tel No.'||mobile as val from famst where trim(aname)='" + party_name + "' ", "val");
                //if (val != "0") xhtml_tag = xhtml_tag + "<BR><BR><b>Kind Attn</b>: " + val;
                if (frm_cocd == "IPP")
                {
                    xhtml_tag += "<br><br>Dear Sir/Madam <br><br>";
                    xhtml_tag += "Please find attached statement of bills due for payment. Request you to kindly clear the same on priority and oblige. In case of any query/non reconciliation with your account, please send us our Ledger account in your books on this mail address(infomum@indpack.in, Contact no-8097088748.), so we can reconcile the same. <br>";
                }
                break;
            case "F70336":
                subj = "Tejaxo ERP: Balance Confirmation Report from " + firm + "";
                xhtml_tag = xhtml_tag + "<BR>Please find attached the";
                xhtml_tag = xhtml_tag + "<br>Balance Confirmation<br>";
                break;
            case "F70285":
                subj = oth_var1;
                xhtml_tag += "Thank you for your order. Your Order has been successfully registered and summary of your order is attached. Please note that order will be processed as per our current stocks and balance order will remain as the pending order. <br>";
                break;
        }
        xhtml_tag = xhtml_tag + "<br><br><b>Thanks & Regards,</b>";
        xhtml_tag = xhtml_tag + "<br><b>" + firm + "</b>";
        if (frm_formID == "F70285")
        {
            xhtml_tag += "<br><br><b> Note:Please do not reply as this is system generated report. For any discrepancy / clarification kindly get in touch with the concerned official's.</b>";
        }
        else
        {
            string donotreply = ", Please do not reply";
            if (frm_cocd == "MLGI") donotreply = "";
            if (frm_cocd != "CLPL")
                xhtml_tag = xhtml_tag + "<br><br><br>Note: This is an automatically generated email from Tejaxo ERP" + donotreply;
        }
        xhtml_tag = xhtml_tag + "</body></html>";
    }

    public void Gen_stk_pl(string xdt, string igrp)
    {
        //mq1 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Col1");
        //if (mq1 == "63") { cond = "and substr(a.icode,1,2) in ('10')"; header_n = "Component Store"; val = mq1; }
        //else if (mq1 == "6F") { cond = "and substr(a.icode,1,2) in ('20','25','30','35','40','45','50','55','56')"; header_n = "General Store"; val = mq1; }
        //else if (mq1 == "6E") { cond = "and substr(a.icode,1,2) in ('15')"; header_n = "Raw Material"; val = mq1; }
        //else
        //{
        //    val = "";
        //    if (mq1.Length > 2) cond = "and substr(a.icode,1,2) in (" + mq1 + ")";
        //    else cond = "and substr(a.icode,1,2) in ('" + mq1 + "')"; header_n = "";
        //    if (mq1 == "NO") cond = "";
        //}
        //string value1 = "";
        mq4 = "type='" + mq1 + "'";
        cond = "substr(a.icode,1,2)='" + mq1 + "'";
        cond1 = "substr(icode,1,2)='" + mq1 + "'";
        header_n = "Stock Value : Working Sheet";
        mrs = new DataTable(); DataRow mrrow = null; DataTable dt = new DataTable(); DataTable dt1 = new DataTable();
        string opbalyr = "", param = "", mq0 = "", xprd2 = "";
        mrs.Columns.Add(new DataColumn("fromdt", typeof(string)));
        mrs.Columns.Add(new DataColumn("todt", typeof(string)));
        mrs.Columns.Add(new DataColumn("Icode", typeof(string)));
        mrs.Columns.Add(new DataColumn("Iname", typeof(string)));
        mrs.Columns.Add(new DataColumn("Aname", typeof(string)));
        mrs.Columns.Add(new DataColumn("mrr", typeof(string)));
        mrs.Columns.Add(new DataColumn("mrrdt", typeof(DateTime)));
        mrs.Columns.Add(new DataColumn("qty", typeof(double)));
        mrs.Columns.Add(new DataColumn("rate", typeof(double)));
        mrs.Columns.Add(new DataColumn("value", typeof(double)));
        mrs.Columns.Add(new DataColumn("stock", typeof(double)));
        mrs.Columns.Add(new DataColumn("unit", typeof(string)));
        DataRow dr4 = mrs.NewRow();
        //fgen.execute_cmd(frm_qstr, frm_cocd, "Delete from itemvbal13 a where a.branchcd='" + frm_mbr + "' " + cond + "");
        opbalyr = "yr_" + fgen.seek_iname(frm_qstr, frm_cocd, "SELECT TO_CHAR(TO_DATE(PARAMS,'DD/MM/YYYY'),'YYYY') AS params FROM CONTROLS WHERE ID='R02'", "params");
        param = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PARAMS AS params FROM CONTROLS WHERE ID='R02'", "params");
        opbalyr = "yr_" + frm_myear;
        xprd1 = "BETWEEN TO_dATE('" + frm_cDt1 + "','dd/mm/yyyy') and to_Date('" + fromdt + "','dd/mm/yyyy')-1 ";
        xprd2 = "BETWEEN TO_dATE('" + fromdt + "','dd/mm/yyyy') and to_Date('" + xdt + "','dd/mm/yyyy') ";

        //SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y' " + cond + " and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + xdt + "','dd/mm/yyyy') and a.iqtyin>0  order by trim(a.icode),a.vchdate desc,a.vchnum desc";//vip sir
        //SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,c.aname,trim(a.icode) as icode,b.iname,b.unit,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b,FAMST C where trim(A.icode)=trim(B.icode)  and trim(a.acode)=trim(c.acode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y' and " + cond + " and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + xdt + "','dd/mm/yyyy') and a.iqtyin>0  order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //OLD QRY
        SQuery = "select a.type,(CASE when nvl(a.store,'-')='Y' then a.VCHNUM else a.VCHNUM||' '||'(Under Insp.)' end) as vchnumnew,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,c.aname,trim(a.icode) as icode,b.iname,b.unit,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b,FAMST C where trim(A.icode)=trim(B.icode)  and trim(a.acode)=trim(c.acode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store in ('Y','N') and " + cond + " and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + xdt + "','dd/mm/yyyy') and a.iqtyin>0  order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //IN THIS ADD STORE N..QKI EK MAIN FINS ME SORE Y,N DONO MRR SHOW HOTI HAI        

        dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);

        mq0 = "select c.irate,trim(a.icode) as icode,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as closing from (Select icode, " + opbalyr + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where branchcd='" + frm_mbr + "' and " + cond.Replace("a.", "") + " union all  ";

        //mq1 = "select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprd1 + " and store='Y' and " + cond.Replace("a.", "") + " GROUP BY ICODE union all ";//OLD
        mq1 = "select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprd1 + " and store IN ('Y','Nx') and " + cond.Replace("a.", "") + " GROUP BY ICODE union all "; //ADD STORE N

        //mq2 = "select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprd2 + " and store='Y' and " + cond.Replace("a.", "") + " GROUP BY ICODE )a, type b,item c  where trim(A.icode)=trim(c.icodE) and substr(a.icode,1,2)=b.type1 and b.id='Y' and nvl(b.rcnum,'Y')!='N' group by c.irate,trim(a.icode) having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>=0 order by trim(a.icode)"; //OLD
        mq2 = "select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprd2 + " and store IN ('Y','Nx') and " + cond.Replace("a.", "") + " GROUP BY ICODE )a, type b,item c  where trim(A.icode)=trim(c.icodE) and substr(a.icode,1,2)=b.type1 and b.id='Y' and nvl(b.rcnum,'Y')!='N' group by c.irate,trim(a.icode) having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>=0 order by trim(a.icode)";//ADD STORE Y,N

        SQuery = mq0 + mq1 + mq2;
        dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery);

        double itot_stk = 0, to_cons = 0, itv = 0; db = 0; db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0;
        foreach (DataRow drrstk in dt1.Rows)
        {
            to_cons = fgen.make_double(drrstk["closing"].ToString());
            foreach (DataRow stk_chk in dt.Rows)
            {

                if (dt.Rows.Count == 0)
                {
                    dr4 = mrs.NewRow();
                    dr4["icode"] = stk_chk["icode"].ToString().Trim();
                    dr4["fromdt"] = fromdt;
                    dr4["todt"] = todt;
                    dr4["iname"] = stk_chk["iname"].ToString().Trim();
                    dr4["aname"] = stk_chk["aname"].ToString().Trim();
                    dr4["unit"] = stk_chk["unit"].ToString().Trim();
                    // dr4["mrr"] = stk_chk["vchnum"].ToString().Trim(); //old
                    dr4["mrr"] = stk_chk["vchnumnew"].ToString().Trim();
                    dr4["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                    dr4["qty"] = stk_chk["balance"].ToString().Trim();
                    dr4["rate"] = stk_chk["irate"].ToString().Trim();
                    dr4["value"] = fgen.make_double(dr4["qty"].ToString().Trim()) * fgen.make_double(dr4["rate"].ToString().Trim());
                    dr4["stock"] = drrstk["closing"].ToString().Trim();
                    mrs.Rows.Add(dr4);
                    to_cons = 0;
                }
                else
                {
                    if (stk_chk["icode"].ToString().Trim() == drrstk["icode"].ToString().Trim())
                    {
                        if (Convert.ToDouble(stk_chk["balance"].ToString()) >= to_cons && to_cons > 0)
                        {
                            itot_stk = itot_stk + (to_cons * Convert.ToInt32(stk_chk["irate"]));
                            itv = itv + (to_cons * Convert.ToInt32(stk_chk["irate"]));
                            value1 = stk_chk["invno"].ToString();
                            if (value1.ToString().Trim().Length > 10) value1 = value1.Trim().Substring(0, 10);
                            //fgen.execute_cmd(frm_qstr, frm_cocd, "insert into itemvbal13(irate,branchcd,type,vchnum,vchdate,invno,invdate,acode,icode,iqtyin)values(" + Convert.ToInt32(stk_chk["irate"]) + ",'" + mbr + "','" + stk_chk["type"].ToString() + "','" + stk_chk["vchnum"].ToString() + "',to_datE('" + stk_chk["vchdate"].ToString() + "','dd/mm/yyyy'),'" + value1 + "',to_Date('" + stk_chk["invdate"].ToString() + "','dd/mm/yyyy'),'" + stk_chk["acode"].ToString().Trim() + "','" + stk_chk["icode"].ToString().Trim() + "'," + to_cons + ")");
                            dr4 = mrs.NewRow();
                            dr4["icode"] = stk_chk["icode"].ToString().Trim();
                            dr4["fromdt"] = fromdt;
                            dr4["todt"] = todt;
                            dr4["iname"] = stk_chk["iname"].ToString().Trim();
                            dr4["aname"] = stk_chk["aname"].ToString().Trim();
                            dr4["unit"] = stk_chk["unit"].ToString().Trim();
                            // dr4["mrr"] = stk_chk["vchnum"].ToString().Trim();
                            dr4["mrr"] = stk_chk["vchnumnew"].ToString().Trim();
                            dr4["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                            dr4["qty"] = to_cons;
                            dr4["rate"] = stk_chk["irate"].ToString().Trim();
                            dr4["value"] = fgen.make_double(dr4["qty"].ToString().Trim()) * fgen.make_double(dr4["rate"].ToString().Trim());
                            dr4["stock"] = drrstk["closing"].ToString().Trim();
                            mrs.Rows.Add(dr4);
                            to_cons = 0;
                        }
                        else
                        {
                            if (to_cons > 0)
                            {
                                value1 = stk_chk["invno"].ToString();
                                if (value1.ToString().Trim().Length > 10) value1 = value1.Trim().Substring(0, 10);
                                //stk_chk["vchnum"].ToString() + "',to_datE('" + stk_chk["vchdate"] + "','dd/mm/yyyy'),'" + value1 + "',to_Date('" + stk_chk["invdate"].ToString() + "','dd/mm/yyyy'),'" + stk_chk["acode"].ToString().Trim() + "','" + stk_chk["icode"].ToString().Trim() + "'," + Convert.ToInt32(stk_chk["balance"]) + ")";
                                dr4 = mrs.NewRow();
                                dr4["icode"] = stk_chk["icode"].ToString().Trim();
                                dr4["fromdt"] = fromdt;
                                dr4["todt"] = todt;
                                dr4["iname"] = stk_chk["iname"].ToString().Trim();
                                dr4["aname"] = stk_chk["aname"].ToString().Trim();
                                dr4["unit"] = stk_chk["unit"].ToString().Trim();
                                //dr4["mrr"] = stk_chk["vchnum"].ToString().Trim();//old
                                dr4["mrr"] = stk_chk["vchnumnew"].ToString().Trim();
                                dr4["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                                dr4["rate"] = stk_chk["irate"].ToString().Trim();
                                dr4["stock"] = drrstk["closing"].ToString().Trim();
                                fgen.execute_cmd(frm_qstr, frm_cocd, SQuery);
                                itot_stk = itot_stk + (Convert.ToInt32(stk_chk["balance"]) * Convert.ToInt32(stk_chk["irate"]));
                                itv = itv + (Convert.ToInt32(stk_chk["balance"]) * Convert.ToInt32(stk_chk["irate"]));
                                to_cons = to_cons - Convert.ToInt32(stk_chk["balance"]);
                                dr4["qty"] = stk_chk["balance"].ToString().Trim();
                                dr4["value"] = fgen.make_double(dr4["qty"].ToString().Trim()) * fgen.make_double(dr4["rate"].ToString().Trim());
                                mrs.Rows.Add(dr4);
                            }
                        }
                    }
                }
            }
        }
    }

    public void Gen_stk_pl_Sxxxxx(string xdt, string igrp) //this fun for closing summary
    {
        header_n = "RM Closing Stock Summary";
        //mq4 = fgenMV.Fn_Get_Mvar(frm_qstr, "U_Col1");
        //if (mq4 == "63") { cond = "and substr(a.icode,1,2) in ('10')"; header_n = "RM Closing Stock Summary"; val = mq4; }
        //else if (mq4 == "6F") { cond = "and substr(a.icode,1,2) in ('20','25','30','35','40','45','50','55','56')"; header_n = "RM Closing Stock Summary"; ; val = mq4; }
        //else if (mq4 == "6E") { cond = "and substr(a.icode,1,2) in ('15')"; header_n = "RM Closing Stock Summary"; ; val = mq4; }
        //else
        //{
        //    val = "";
        //    if (mq4.Length > 2) cond = "and substr(a.icode,1,2) in (" + mq4 + ")";
        //    else cond = "substr(a.icode,1,2) in ('" + mq4 + "')"; header_n = "RM Closing Stock Summary"; ;
        //    if (mq1 == "NO") cond = "trim(a.icode) like '%'";
        //}
        //if (mq1.Length > 2)
        //{
        mq4 = "type='" + mq1 + "'";
        cond = "substr(a.icode,1,2)='" + mq1 + "'";
        cond1 = "substr(icode,1,2)='" + mq1 + "'";
        // }
        //else
        //{
        //    mq4 = " type1 like '%'"; cond = "trim(a.icode) like '%'"; cond1 = "trim(icode) like '%'";
        //}
        header_n = "RM Closing Stock Summary";
        string value1 = "";
        mrs = new DataTable(); DataRow mrrow = null; DataTable dt = new DataTable(); DataTable dt1 = new DataTable(); DataTable dt3 = new DataTable();
        DataTable dt6 = new DataTable(); DataTable dt7 = new DataTable(); DataTable dtm = new DataTable();
        string opbalyr = "", param = "", mq0 = "", xprd2 = "";
        ////////////ph_tbl is final cursor for report
        #region
        ph_tbl = new DataTable();
        ph_tbl.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
        ph_tbl.Columns.Add(new DataColumn("todt", typeof(DateTime)));
        ph_tbl.Columns.Add(new DataColumn("header", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("mcode", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("mname", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("scode", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("sname", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("icode", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("iname", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("unit", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("opening", typeof(double)));//op bal in this
        ph_tbl.Columns.Add(new DataColumn("op_value", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("inw_Qty", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("inw_val", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("out_qty", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("out_val", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("cons_qty", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("cons_val", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("clos_qty", typeof(double)));//show clos bal in this 
        ph_tbl.Columns.Add(new DataColumn("clos_val", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("avg_rate", typeof(double)));
        ///////////////////////mrs is cursor for detail report
        mrs.Columns.Add(new DataColumn("Icode", typeof(string)));
        mrs.Columns.Add(new DataColumn("Iname", typeof(string)));
        mrs.Columns.Add(new DataColumn("mrr", typeof(string)));
        mrs.Columns.Add(new DataColumn("mrrdt", typeof(DateTime)));
        mrs.Columns.Add(new DataColumn("qty", typeof(double)));
        mrs.Columns.Add(new DataColumn("rate", typeof(double)));
        mrs.Columns.Add(new DataColumn("stock", typeof(double)));
        ////////////
        dtm.Columns.Add(new DataColumn("Icode", typeof(string)));
        dtm.Columns.Add(new DataColumn("Iname", typeof(string)));
        dtm.Columns.Add(new DataColumn("mrr", typeof(string)));
        dtm.Columns.Add(new DataColumn("mrrdt", typeof(DateTime)));
        dtm.Columns.Add(new DataColumn("qty", typeof(double)));
        dtm.Columns.Add(new DataColumn("rate", typeof(double)));
        dtm.Columns.Add(new DataColumn("stock", typeof(double)));
        #endregion
        DataRow dr4 = mrs.NewRow();
        DataRow dr3 = ph_tbl.NewRow();
        fgen.execute_cmd(frm_qstr, frm_cocd, "Delete from itemvbal13 a where a.branchcd='" + frm_mbr + "' " + cond + "");
        opbalyr = "yr_" + fgen.seek_iname(frm_qstr, frm_cocd, "SELECT TO_CHAR(TO_DATE(PARAMS,'DD/MM/YYYY'),'YYYY') AS params FROM CONTROLS WHERE ID='R02'", "params");
        param = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PARAMS AS params FROM CONTROLS WHERE ID='R02'", "params");
        xprd1 = "BETWEEN TO_dATE('" + param + "','dd/mm/yyyy') and to_Date('" + xdt + "','dd/mm/yyyy')-1 ";
        xprd2 = "BETWEEN TO_dATE('" + xdt + "','dd/mm/yyyy') and to_Date('" + xdt + "','dd/mm/yyyy') ";
        #region for closing
        //SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y' " + cond + " and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + xdt + "','dd/mm/yyyy') " + cond + " and a.iqtyin>0 and substr(trim(a.icode),1,2)='" + mq4 + "' order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //changes by yogita...old
        SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y' and " + cond + " and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + xdt + "','dd/mm/yyyy') and a.iqtyin>0  order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //changes by yogita........
        //SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y'  and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + xdt + "','dd/mm/yyyy') and substr(trim(a.icode),1,4)='0706' and a.iqtyin>0  order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //for testing on single icode
        dt = fgen.getdata(frm_qstr, frm_cocd, SQuery); //this is mrr dt for only closing 
        //////////////////
        // SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y' " + cond + " and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + fromdt + "','dd/mm/yyyy') " + cond + " and a.iqtyin>0 and substr(trim(a.icode),1,2)='" + mq4 + "' order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //changes by yogita.....old
        SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y' and " + cond + " and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + fromdt + "','dd/mm/yyyy') and a.iqtyin>0  order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //changes by yogita
        //SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y'  and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + xdt + "','dd/mm/yyyy') and substr(trim(a.icode),1,4)='0706' and a.iqtyin>0  order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //for testing on single icode
        DataTable dt9 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //this is mrr dt for only opening 
        //////////////=================below is closing dt
        #endregion
        #region this is old query only for closing balance
        //mq0 = "select c.irate,trim(a.icode) as icode,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as closing from (Select icode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where branchcd='" + frm_mbr + "' " + cond.Replace("a.", "") + " union all  ";      //by yogita    
        //mq1 = "select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + " and store='Y' " + cond.Replace("a.", "") + " GROUP BY ICODE union all ";//BY ME     
        //mq2 = "select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + " and store='Y' " + cond.Replace("a.", "") + " GROUP BY ICODE )a, type b,item c  where trim(A.icode)=trim(c.icodE) and substr(a.icode,1,2)=b.type1 and b.id='Y' and nvl(b.rcnum,'Y')!='N' and substr(trim(a.icode),1,2)='" + mq4 + "' group by c.irate,trim(a.icode) having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>0  order by trim(a.icode)";
        //SQuery = mq0 + mq1 + mq2;
        #endregion
        //SQuery = "select c.irate,trim(a.icode) as icode,sum(a.opening) as opening,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as closing   from (Select icode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal  where branchcd='" + frm_mbr + "' and substr(trim(icode),1,2)='" + mq4 + "'  union all select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  and store='Y' and substr(trim(icode),1,2)='" + mq4 + "' GROUP BY ICODE union all  select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + "  and store='Y' and substr(trim(icode),1,2)='" + mq4 + "' GROUP BY ICODE )a, item c  where trim(A.icode)=trim(c.icodE)  group by c.irate,trim(a.icode) /*having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>0*/  order by trim(a.icode)";//old
        SQuery = "select c.irate,trim(a.icode) as icode,sum(a.opening) as opening,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as closing   from (Select icode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal  where branchcd='" + frm_mbr + "' and " + cond1 + " union all select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  and store='Y' and " + cond1 + " GROUP BY ICODE union all  select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + "  and store='Y' and " + cond1 + " GROUP BY ICODE ) a, item c  where trim(A.icode)=trim(c.icodE)  group by c.irate,trim(a.icode) /*having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>0*/  order by trim(a.icode)";
        dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //closing bal dt1
        ///////////////
        //mq5 = "select c.irate,trim(a.icode) as icode,sum(a.opening) as opening from (Select icode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where branchcd='" + frm_mbr + "' and substr(trim(icode),1,2)='" + mq4 + "'  union all";
        mq5 = "select c.irate,trim(a.icode) as icode,sum(a.opening) as opening from (Select icode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where branchcd='" + frm_mbr + "' and " + cond1 + " union all";
        //mq6 = " select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  and store='Y' and substr(trim(icode),1,2)='" + mq4 + "' GROUP BY ICODE union all ";//old
        mq6 = " select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  and store='Y' and " + cond1 + " GROUP BY ICODE union all ";
        //mq7 = " select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + "  and store='Y' and substr(trim(icode),1,2)='" + mq4 + "' GROUP BY ICODE )a, type b,item c  where trim(A.icode)=trim(c.icodE) and substr(a.icode,1,2)=b.type1 and b.id='Y' and nvl(b.rcnum,'Y')!='N' group by c.irate,trim(a.icode) having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>=0  order by trim(a.icode)";
        mq7 = " select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + "  and store='Y' and " + cond1 + " GROUP BY ICODE )a, type b,item c  where trim(A.icode)=trim(c.icodE) and substr(a.icode,1,2)=b.type1 and b.id='Y' and nvl(b.rcnum,'Y')!='N' group by c.irate,trim(a.icode) having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>=0  order by trim(a.icode)";
        SQuery = mq5 + mq6 + mq7;
        dt7 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt for opening balance
        ////////////////
        //SQuery = "select icode,iname from item where substr(trim(icode),1,2) in ('" + mq4 + "') and length(trim(icode))=4";//old
        SQuery = "select icode,iname from item where " + cond1 + " and length(trim(icode))=4";
        DataTable dt4 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt for subgroup name and code
        SQuery = "select TYPE1 AS MGCODE,NAME AS MNAME from type where " + mq4 + " and id='Y'";////-------------need chnages in this
        DataTable dt5 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt for MAINGROUP name and code
        //SQuery = "select distinct icode,iname,unit from item where length(trim(icode))>=8 and substr(trim(icode),1,2) in ('" + mq4 + "') order by icode";//old
        SQuery = "select distinct icode,iname,unit from item where length(trim(icode))>=8 and " + cond1 + " order by icode";
        DataTable dt2 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt for main item or name
        SQuery = "select sum(iqtyin) as qty ,sum((iqtyin)*irate) as val,irate ,icode from ivoucher where branchcd='" + frm_mbr + "' and type like '0%'  and vchdate " + xprdRange + "  group by icode,irate,TYPE  ORDER BY TYPE";
        dt3 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt3 for inward qty and value
        SQuery = "select sum(iqtyin) as qty ,sum((iqtyin)*irate) as val,irate ,icode from ivoucher where branchcd='" + frm_mbr + "' and  type like '2%' OR TYPE LIKE '4%'  and vchdate " + xprdRange + "  group by icode,irate,TYPE ORDER BY TYPE";
        DataTable dt8 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt8 for inward qty and value
        ///////////      
        for (int k = 0; k < dt2.Rows.Count; k++)
        {
            // foreach (DataRow drrstk in dt1.Rows) //stock dt...this is for closing bal fill in dt
            //foreach (DataRow drrstk in dt2.Rows) //dt2 for all item for selected group
            //{
            #region end of foreach loop
            itot_stk = 0; to_cons = 0; itv = 0; db = 0; db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0; db7 = 0; db8 = 0; m = 0; int n; db10 = 0; db11 = 0;
            // to_cons = Convert.ToDouble(drrstk["closing"]);
            to_cons = Convert.ToDouble(fgen.seek_iname_dt(dt1, "icode='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "closing"));
            db2 = to_cons;
            foreach (DataRow stk_chk in dt.Rows) //ivoucher dt
            {
                /// //dt.Select(drrstk["icode"].ToString());
                #region for details of closing balance
                if (dt.Rows.Count == 0)
                {
                    #region
                    // fgen.execute_cmd(frm_qstr, frm_cocd, "insert into itemvbal13(irate,branchcd,type,vchnum,vchdate,invno,invdate,acode,icode,iqtyin)values(" + Convert.ToInt32(stk_chk["irate"]) + ",'" + frm_mbr + "','" + stk_chk["type"].ToString() + "','" + stk_chk["vchnum"].ToString() + "',to_datE('" + stk_chk["vchdate"].ToString() + "','dd/mm/yyyy'),'" + value1 + "',to_Date('" + stk_chk["invdate"].ToString() + "','dd/mm/yyyy'),'" + stk_chk["acode"].ToString().Trim() + "','" + stk_chk["icode"].ToString().Trim() + "'," + to_cons + ")");
                    dr4 = mrs.NewRow();
                    dr4["icode"] = stk_chk["icode"].ToString().Trim();
                    dr4["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr4["icode"].ToString().Trim() + "'", "iname");
                    dr4["mrr"] = stk_chk["vchnum"].ToString().Trim();
                    dr4["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                    dr4["qty"] = stk_chk["balance"].ToString().Trim();
                    dr4["rate"] = stk_chk["irate"].ToString().Trim();
                    db1 += fgen.make_double(dr4["qty"].ToString().Trim()) * fgen.make_double(dr4["rate"].ToString().Trim()); //for closing val
                    db3 += fgen.make_double(dr4["qty"].ToString().Trim());
                    dr4["stock"] = db2;
                    mrs.Rows.Add(dr4);
                    to_cons = 0;
                    #endregion
                }
                else
                {
                    #region
                    if (stk_chk["icode"].ToString().Trim() == dt2.Rows[k]["icode"].ToString().Trim())
                    {
                        if (Convert.ToDouble(stk_chk["balance"].ToString()) >= to_cons && to_cons > 0)
                        {
                            itot_stk = itot_stk + (to_cons * Convert.ToInt32(stk_chk["irate"]));
                            itv = itv + (to_cons * Convert.ToInt32(stk_chk["irate"]));
                            value1 = stk_chk["invno"].ToString();
                            if (value1.ToString().Trim().Length > 10) value1 = value1.Trim().Substring(0, 10);
                            dr4 = mrs.NewRow();
                            dr4["icode"] = stk_chk["icode"].ToString().Trim();
                            dr4["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr4["icode"].ToString().Trim() + "'", "iname");
                            dr4["mrr"] = stk_chk["vchnum"].ToString().Trim();
                            dr4["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                            dr4["qty"] = to_cons;
                            dr4["rate"] = stk_chk["irate"].ToString().Trim();
                            dr4["stock"] = db2;// drrstk["closing"].ToString().Trim();
                            db1 += fgen.make_double(dr4["qty"].ToString().Trim()) * fgen.make_double(dr4["rate"].ToString().Trim()); //for closing val
                            db3 += fgen.make_double(dr4["qty"].ToString().Trim());
                            mrs.Rows.Add(dr4);
                            to_cons = 0;
                            // db1 = 0;
                        }
                        else
                        {
                            if (to_cons > 0)
                            {
                                value1 = stk_chk["invno"].ToString();
                                if (value1.ToString().Trim().Length > 10) value1 = value1.Trim().Substring(0, 10);
                                dr4 = mrs.NewRow();
                                dr4["icode"] = stk_chk["icode"].ToString().Trim();
                                dr4["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr4["icode"].ToString().Trim() + "'", "iname");
                                dr4["mrr"] = stk_chk["vchnum"].ToString().Trim();
                                dr4["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                                dr4["rate"] = stk_chk["irate"].ToString().Trim();
                                dr4["stock"] = db2;// drrstk["closing"].ToString().Trim();
                                fgen.execute_cmd(frm_qstr, frm_cocd, SQuery);
                                itot_stk = itot_stk + (Convert.ToInt32(stk_chk["balance"]) * Convert.ToInt32(stk_chk["irate"]));
                                itv = itv + (Convert.ToInt32(stk_chk["balance"]) * Convert.ToInt32(stk_chk["irate"]));
                                to_cons = to_cons - Convert.ToInt32(stk_chk["balance"]);
                                dr4["qty"] = stk_chk["balance"].ToString().Trim();
                                db3 += fgen.make_double(dr4["qty"].ToString().Trim());
                                db1 += fgen.make_double(dr4["qty"].ToString().Trim()) * fgen.make_double(dr4["rate"].ToString().Trim()); //for closing val
                                mrs.Rows.Add(dr4);
                            }
                        }
                        #endregion
                    }
                    #endregion end of foreach loop
                }
            }
            #region fill data into final cursor
            if (db3 == db2 && db2 != 0)
            {
                db12 = 0; db13 = 0;
                dr3 = ph_tbl.NewRow();
                dr3["fromdt"] = fromdt;
                dr3["todt"] = todt;
                dr3["header"] = header_n;
                dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
                dr3["mcode"] = mq1;
                dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
                dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
                dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
                dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
                dr3["clos_val"] = db1;
                dr3["clos_qty"] = db2;
                dr3["avg_rate"] = db1 / db2;
                #region
                dt6 = new DataTable();
                //view isley lagaya qki same icode pe more thAN 1 ROW THI USKO 1 ROW BANANE KE LIYE
                db4 = 0; db5 = 0;
                if (dt3.Rows.Count > 0)
                {
                    DataView view2 = new DataView(dt3, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    dt6 = view2.ToTable();
                    for (int x = 0; x < dt6.Rows.Count; x++)
                    {
                        db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                        db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                    }
                }
                dr3["inw_Qty"] = db4;
                dr3["inw_val"] = db5;
                //  ph_tbl.Rows.Add(dr3);
                //////for outward qty and value
                db4 = 0; db5 = 0; dt6 = new DataTable();
                if (dt8.Rows.Count > 0)
                {
                    DataView view2 = new DataView(dt8, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    dt6 = view2.ToTable();
                    for (int x = 0; x < dt6.Rows.Count; x++)
                    {
                        db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                        db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                    }
                }
                dr3["out_qty"] = db4;
                dr3["out_val"] = db5;

                #endregion
                ph_tbl.Rows.Add(dr3);
            }
            #region
            else
            {
                if (db2 != 0)
                {
                    #region
                    dr3 = ph_tbl.NewRow();
                    dr3["fromdt"] = fromdt;
                    dr3["todt"] = todt;
                    dr3["header"] = header_n;
                    dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                    dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
                    dr3["mcode"] = mq1;
                    dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
                    dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
                    dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
                    dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
                    dr3["clos_val"] = db1;
                    dr3["clos_qty"] = db2;
                    dr3["avg_rate"] = db1 / db2;
                    #region
                    dt6 = new DataTable();
                    //view isley lagaya qki same icode pe more thAN 1 ROW THI USKO 1 ROW BANANE KE LIYE
                    db4 = 0; db5 = 0;
                    if (dt3.Rows.Count > 0)
                    {
                        DataView view2 = new DataView(dt3, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        dt6 = view2.ToTable();
                        for (int x = 0; x < dt6.Rows.Count; x++)
                        {
                            db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                            db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                        }
                    }
                    dr3["inw_Qty"] = db4;
                    dr3["inw_val"] = db5;
                    //   ph_tbl.Rows.Add(dr3);
                    //////for outward qty and value
                    db10 = 0; db11 = 0; dt6 = new DataTable();
                    if (dt8.Rows.Count > 0)
                    {
                        DataView view2 = new DataView(dt8, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        dt6 = view2.ToTable();
                        for (int x = 0; x < dt6.Rows.Count; x++)
                        {
                            db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                            db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                        }
                    }
                    if (db10 != 0 && db11 != 0)
                    {
                        // dr3 = ph_tbl.NewRow();
                        dr3["out_qty"] = db10;
                        dr3["out_val"] = db11;
                    }
                    ph_tbl.Rows.Add(dr3);
                }
                #endregion
                #endregion
            }


            #endregion

            #endregion
            #endregion
            // }
            //////////for opening summsry and detail

            #region  opening blance loop
            itot_stk = 0; to_cons = 0; itv = 0; db = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0; db7 = 0; db8 = 0;

            // to_cons = Convert.ToDouble(fgen.seek_iname_dt(dt7, "icode='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "opening"));
            to_cons = Convert.ToDouble(fgen.seek_iname_dt(dt1, "icode='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "opening"));
            db9 = to_cons;
            foreach (DataRow stk_chk in dt9.Rows) //ivoucher dt
            {
                #region for details of opening balance
                if (dt9.Rows.Count == 0)
                {
                    // fgen.execute_cmd(frm_qstr, frm_cocd, "insert into itemvbal13(irate,branchcd,type,vchnum,vchdate,invno,invdate,acode,icode,iqtyin)values(" + Convert.ToInt32(stk_chk["irate"]) + ",'" + frm_mbr + "','" + stk_chk["type"].ToString() + "','" + stk_chk["vchnum"].ToString() + "',to_datE('" + stk_chk["vchdate"].ToString() + "','dd/mm/yyyy'),'" + value1 + "',to_Date('" + stk_chk["invdate"].ToString() + "','dd/mm/yyyy'),'" + stk_chk["acode"].ToString().Trim() + "','" + stk_chk["icode"].ToString().Trim() + "'," + to_cons + ")");
                    mrrow = dtm.NewRow();
                    mrrow["icode"] = stk_chk["icode"].ToString().Trim();
                    mrrow["iname"] = fgen.seek_iname_dt(dt2, "icode='" + mrrow["icode"].ToString().Trim() + "'", "iname");
                    mrrow["mrr"] = stk_chk["vchnum"].ToString().Trim();
                    mrrow["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                    mrrow["qty"] = stk_chk["balance"].ToString().Trim();
                    mrrow["rate"] = stk_chk["irate"].ToString().Trim();
                    db7 += fgen.make_double(mrrow["qty"].ToString().Trim()) * fgen.make_double(mrrow["rate"].ToString().Trim()); //for closing val
                    db8 += fgen.make_double(mrrow["qty"].ToString().Trim());
                    mrrow["stock"] = db9;
                    dtm.Rows.Add(mrrow);
                    to_cons = 0;
                }
                else
                {
                    #region
                    //     if (stk_chk["icode"].ToString().Trim() == dropstk["icode"].ToString().Trim())
                    if (stk_chk["icode"].ToString().Trim() == dt2.Rows[k]["icode"].ToString().Trim())
                    {
                        if (Convert.ToDouble(stk_chk["balance"].ToString()) >= to_cons && to_cons > 0)
                        {
                            itot_stk = itot_stk + (to_cons * Convert.ToInt32(stk_chk["irate"]));
                            itv = itv + (to_cons * Convert.ToInt32(stk_chk["irate"]));
                            value1 = stk_chk["invno"].ToString();
                            if (value1.ToString().Trim().Length > 10) value1 = value1.Trim().Substring(0, 10);
                            //fgen.execute_cmd(frm_qstr, frm_cocd, "insert into itemvbal13(irate,branchcd,type,vchnum,vchdate,invno,invdate,acode,icode,iqtyin)values(" + Convert.ToInt32(stk_chk["irate"]) + ",'" + mbr + "','" + stk_chk["type"].ToString() + "','" + stk_chk["vchnum"].ToString() + "',to_datE('" + stk_chk["vchdate"].ToString() + "','dd/mm/yyyy'),'" + value1 + "',to_Date('" + stk_chk["invdate"].ToString() + "','dd/mm/yyyy'),'" + stk_chk["acode"].ToString().Trim() + "','" + stk_chk["icode"].ToString().Trim() + "'," + to_cons + ")");
                            mrrow = dtm.NewRow();
                            mrrow["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                            mrrow["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "iname");
                            mrrow["mrr"] = stk_chk["vchnum"].ToString().Trim();
                            mrrow["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                            mrrow["qty"] = to_cons;
                            mrrow["rate"] = stk_chk["irate"].ToString().Trim();
                            mrrow["stock"] = db9;// dropstk["opening"].ToString().Trim();
                            db7 += fgen.make_double(mrrow["qty"].ToString().Trim()) * fgen.make_double(mrrow["rate"].ToString().Trim()); //for closing val
                            db8 += fgen.make_double(mrrow["qty"].ToString().Trim());
                            dtm.Rows.Add(mrrow);
                            to_cons = 0;
                            // db1 = 0;
                        }
                        else
                        {
                            if (to_cons > 0)
                            {
                                value1 = stk_chk["invno"].ToString();
                                if (value1.ToString().Trim().Length > 10) value1 = value1.Trim().Substring(0, 10);
                                //  SQuery = "insert into itemvbal13(irate,branchcd,type,vchnum,vchdate,invno,invdate,acode,icode,iqtyin)values(" + Convert.ToInt32(stk_chk["irate"]) + ",'" + mbr + "','" + stk_chk["typE"].ToString() + "','" + stk_chk["vchnum"].ToString() + "',to_datE('" + stk_chk["vchdate"] + "','dd/mm/yyyy'),'" + value1 + "',to_Date('" + stk_chk["invdate"].ToString() + "','dd/mm/yyyy'),'" + stk_chk["acode"].ToString().Trim() + "','" + stk_chk["icode"].ToString().Trim() + "'," + Convert.ToInt32(stk_chk["balance"]) + ")";
                                mrrow = dtm.NewRow();
                                mrrow["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                                mrrow["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "iname");
                                mrrow["mrr"] = stk_chk["vchnum"].ToString().Trim();
                                mrrow["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                                mrrow["rate"] = stk_chk["irate"].ToString().Trim();
                                mrrow["stock"] = db9;// dropstk["opening"].ToString().Trim();
                                fgen.execute_cmd(frm_qstr, frm_cocd, SQuery);
                                itot_stk = itot_stk + (Convert.ToInt32(stk_chk["balance"]) * Convert.ToInt32(stk_chk["irate"]));
                                itv = itv + (Convert.ToInt32(stk_chk["balance"]) * Convert.ToInt32(stk_chk["irate"]));
                                to_cons = to_cons - Convert.ToInt32(stk_chk["balance"]);
                                mrrow["qty"] = stk_chk["balance"].ToString().Trim();
                                db8 += fgen.make_double(mrrow["qty"].ToString().Trim()); //
                                db7 += fgen.make_double(mrrow["qty"].ToString().Trim()) * fgen.make_double(mrrow["rate"].ToString().Trim()); //for opening value
                                dtm.Rows.Add(mrrow);
                            }
                        }
                        #endregion end of foreach loop
                    }
                    #endregion
                }
            }
            #region merging op in clos wali dt me
            //yaha mne op bal ko ph_tbl me fill kiya h agar closing ki ek row hai or op ki 2 hai to uske liye if else ka use kiya h
            m = 0; n = 0;
            m = ph_tbl.Rows.Count;
            n = dtm.Rows.Count;
            if (db8 == db9 && db9 != 0) //if value and op stock is matched
            {
                #region
                // if (m >= n && k!=0)//this is for row in tBLE ..AGAR PHTBL ME jyada row h to usi me add krne ke liye
                //  {
                if (m > 0)
                {
                    if (ph_tbl.Rows[m - 1]["icode"].ToString().Trim() == dt2.Rows[k]["icode"].ToString().Trim())
                    {
                        if (k != 0)
                        {
                            #region
                            ph_tbl.Rows[m - 1]["opening"] = db9;
                            ph_tbl.Rows[m - 1]["op_value"] = db7;
                            db4 = 0; db5 = 0; dt6 = new DataTable();
                            if (dt3.Rows.Count > 0)
                            {
                                DataView view2 = new DataView(dt3, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                                dt6 = view2.ToTable();
                                for (int x = 0; x < dt6.Rows.Count; x++)
                                {
                                    db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                    db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                                }
                            }
                            ph_tbl.Rows[m - 1]["inw_Qty"] = db4;
                            ph_tbl.Rows[m - 1]["inw_val"] = db5;
                            //////for outward qty and value
                            db10 = 0; db11 = 0; dt6 = new DataTable();
                            if (dt8.Rows.Count > 0)
                            {
                                DataView view2 = new DataView(dt8, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                                dt6 = view2.ToTable();
                                for (int x = 0; x < dt6.Rows.Count; x++)
                                {
                                    db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                    db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                                }
                            }
                            ph_tbl.Rows[m - 1]["out_qty"] = db10;
                            ph_tbl.Rows[m - 1]["out_val"] = db11;
                            db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
                            db13 = db7 + db5 - (db10 + db1);
                            ph_tbl.Rows[m - 1]["cons_qty"] = db12;
                            ph_tbl.Rows[m - 1]["cons_val"] = db13;
                            #endregion
                        }
                        if (k == 0)
                        {
                            #region
                            ph_tbl.Rows[m - 1]["opening"] = db9;
                            ph_tbl.Rows[m - 1]["op_value"] = db7;
                            db4 = 0; db5 = 0; dt6 = new DataTable();
                            if (dt3.Rows.Count > 0)
                            {
                                DataView view2 = new DataView(dt3, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                                dt6 = view2.ToTable();
                                for (int x = 0; x < dt6.Rows.Count; x++)
                                {
                                    db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                    db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                                }
                            }
                            ph_tbl.Rows[m - 1]["inw_Qty"] = db4;
                            ph_tbl.Rows[m - 1]["inw_val"] = db5;
                            //////for outward qty and value
                            db10 = 0; db11 = 0; dt6 = new DataTable();
                            if (dt8.Rows.Count > 0)
                            {
                                DataView view2 = new DataView(dt8, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                                dt6 = view2.ToTable();
                                for (int x = 0; x < dt6.Rows.Count; x++)
                                {
                                    db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                    db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                                }
                            }
                            ph_tbl.Rows[m - 1]["out_qty"] = db10;
                            ph_tbl.Rows[m - 1]["out_val"] = db11;
                            db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
                            db13 = db7 + db5 - (db10 + db1);
                            ph_tbl.Rows[m - 1]["cons_qty"] = db12;
                            ph_tbl.Rows[m - 1]["cons_val"] = db13;
                            #endregion
                        }
                        #endregion
                    }
                    else
                    {
                        #region
                        dr3 = ph_tbl.NewRow();
                        dr3["opening"] = db9;
                        dr3["op_value"] = db7;
                        dr3["fromdt"] = fromdt;
                        dr3["todt"] = todt;
                        dr3["header"] = header_n;
                        dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                        dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
                        dr3["mcode"] = mq1;
                        dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
                        dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
                        dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
                        dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
                        //view isley lagaya qki same icode pe more thAN 1 ROW THI USKO 1 ROW BANANE KE LIYE
                        #region
                        dt6 = new DataTable();
                        db4 = 0; db5 = 0;
                        if (dt3.Rows.Count > 0)
                        {
                            DataView view2 = new DataView(dt3, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                            dt6 = view2.ToTable();
                            for (int x = 0; x < dt6.Rows.Count; x++)
                            {
                                db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                            }
                        }
                        dr3["inw_Qty"] = db4;
                        dr3["inw_val"] = db5;
                        //////for outward qty and value
                        db10 = 0; db11 = 0; dt6 = new DataTable();
                        if (dt8.Rows.Count > 0)
                        {
                            DataView view2 = new DataView(dt8, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                            dt6 = view2.ToTable();
                            for (int x = 0; x < dt6.Rows.Count; x++)
                            {
                                db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                            }
                        }
                        dr3["out_qty"] = db10;
                        dr3["out_val"] = db11;
                        db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
                        db13 = db7 + db5 - (db10 + db1);
                        dr3["cons_qty"] = db12;
                        dr3["cons_val"] = db13;
                        #endregion
                        ph_tbl.Rows.Add(dr3);
                        #endregion
                    }
                }

                else
                {
                    #region
                    dr3 = ph_tbl.NewRow();
                    dr3["opening"] = db9;
                    dr3["op_value"] = db7;
                    dr3["fromdt"] = fromdt;
                    dr3["todt"] = todt;
                    dr3["header"] = header_n;
                    dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                    dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
                    dr3["mcode"] = mq1;
                    dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
                    dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
                    dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
                    dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
                    //view isley lagaya qki same icode pe more thAN 1 ROW THI USKO 1 ROW BANANE KE LIYE
                    #region
                    dt6 = new DataTable();
                    db4 = 0; db5 = 0;
                    if (dt3.Rows.Count > 0)
                    {
                        DataView view2 = new DataView(dt3, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        dt6 = view2.ToTable();
                        for (int x = 0; x < dt6.Rows.Count; x++)
                        {
                            db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                            db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                        }
                    }
                    dr3["inw_Qty"] = db4;
                    dr3["inw_val"] = db5;
                    //////for outward qty and value
                    db10 = 0; db11 = 0; dt6 = new DataTable();
                    if (dt8.Rows.Count > 0)
                    {
                        DataView view2 = new DataView(dt8, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        dt6 = view2.ToTable();
                        for (int x = 0; x < dt6.Rows.Count; x++)
                        {
                            db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                            db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                        }
                    }
                    dr3["out_qty"] = db10;
                    dr3["out_val"] = db11;
                    db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
                    db13 = db7 + db5 - (db10 + db1);
                    dr3["cons_qty"] = db12;
                    dr3["cons_val"] = db13;
                    #endregion
                    ph_tbl.Rows.Add(dr3);
                    #endregion
                }
            }
            #region
            //  }
            //else  if (m == n && k==0)
            //{
            //    #region
            //    ph_tbl.Rows[k]["opening"] = db9;
            //    ph_tbl.Rows[k]["op_value"] = db7;
            //    db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
            //    db13 = db7 + db5 - (db10 + db1);
            //    ph_tbl.Rows[k]["cons_qty"] = db12;
            //    ph_tbl.Rows[k]["cons_val"] = db13;                
            //    #endregion
            //}
            //else //agar n bada h m se
            //{                  
            //    #region                   
            //    dr3 = ph_tbl.NewRow();
            //    dr3["opening"] = db9;
            //    dr3["op_value"] = db7;
            //    dr3["fromdt"] = fromdt;
            //    dr3["todt"] = todt;
            //    dr3["header"] = header_n;
            //    dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
            //    dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
            //    dr3["mcode"] = mq4;
            //    dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
            //    dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
            //    dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
            //    dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
            //    //view isley lagaya qki same icode pe more thAN 1 ROW THI USKO 1 ROW BANANE KE LIYE
            //    #region
            //    dt6 = new DataTable();
            //    db4 = 0; db5 = 0;
            //    if (dt3.Rows.Count > 0)
            //    {
            //        DataView view2 = new DataView(dt3, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
            //        dt6 = view2.ToTable();
            //        for (int x = 0; x < dt6.Rows.Count; x++)
            //        {
            //            db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
            //            db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
            //        }
            //    }
            //    dr3["inw_Qty"] = db4;
            //    dr3["inw_val"] = db5;
            //    db10 = 0; db11 = 0; dt6 = new DataTable();
            //    if (dt8.Rows.Count > 0)
            //    {
            //        DataView view2 = new DataView(dt8, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
            //        dt6 = view2.ToTable();
            //        for (int x = 0; x < dt6.Rows.Count; x++)
            //        {
            //            db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
            //            db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
            //        }
            //    }
            //    dr3["out_qty"] = db10;
            //    dr3["out_val"] = db11;
            //    db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
            //    db13 = db7 + db5 - (db10 + db1);
            //    dr3["cons_qty"] = db12;
            //    dr3["cons_val"] = db13;                    
            //    #endregion
            //    ph_tbl.Rows.Add(dr3);                   
            //    #endregion
            //}       
            #endregion
            #endregion

            #region
            //            else if(db9!=0)
            //            {
            //                #region
            //                if (m > n)//this is for row in tBLE ..AGAR PHTBL ME jyada row h to usi me add krne ke liye
            //                {
            //                    if (ph_tbl.Rows[m - 1]["icode"].ToString().Trim() == dt2.Rows[k]["icode"].ToString().Trim())
            //                    {
            //                        #region
            //                        ph_tbl.Rows[m - 1]["opening"] = db9;
            //                        ph_tbl.Rows[m - 1]["op_value"] = db7;
            //                        #region comment
            //                        db4 = 0; db5 = 0; dt6 = new DataTable();
            //                        if (dt3.Rows.Count > 0)
            //                        {
            //                            DataView view2 = new DataView(dt3, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
            //                            dt6 = view2.ToTable();
            //                            for (int x = 0; x < dt6.Rows.Count; x++)
            //                            {
            //                                db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
            //                                db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
            //                            }
            //                        }
            //                        ph_tbl.Rows[m - 1]["inw_Qty"] = db4;
            //                        ph_tbl.Rows[m - 1]["inw_val"] = db5;
            //                        //////for outward qty and value
            //                        db10 = 0; db11 = 0; dt6 = new DataTable();
            //                        if (dt8.Rows.Count > 0)
            //                        {
            //                            DataView view2 = new DataView(dt8, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
            //                            dt6 = view2.ToTable();
            //                            for (int x = 0; x < dt6.Rows.Count; x++)
            //                            {
            //                                db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
            //                                db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
            //                            }
            //                        }
            //                        ph_tbl.Rows[m - 1]["out_qty"] = db10;
            //                        ph_tbl.Rows[m - 1]["out_val"] = db11;
            //                        db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
            //                        db13 = db7 + db5 - (db10 + db1);
            //                        ph_tbl.Rows[m - 1]["cons_qty"] = db12;
            //                        ph_tbl.Rows[m - 1]["cons_val"] = db13;
            //                        #endregion
            //                        #endregion
            //                    }
            //                    else
            //                    {
            //                        #region
            //                        dr3 = ph_tbl.NewRow();
            //                        dr3["opening"] = db9;
            //                        dr3["op_value"] = db7;
            //                        dr3["fromdt"] = fromdt;
            //                        dr3["todt"] = todt;
            //                        dr3["header"] = header_n;
            //                        dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
            //                        dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
            //                        dr3["mcode"] = mq4;
            //                        dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
            //                        dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
            //                        dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
            //                        dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
            //                        //view isley lagaya qki same icode pe more thAN 1 ROW THI USKO 1 ROW BANANE KE LIYE
            //                        #region
            //                        dt6 = new DataTable();
            //                        db4 = 0; db5 = 0;
            //                        if (dt3.Rows.Count > 0)
            //                        {
            //                            DataView view2 = new DataView(dt3, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
            //                            dt6 = view2.ToTable();
            //                            for (int x = 0; x < dt6.Rows.Count; x++)
            //                            {
            //                                db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
            //                                db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
            //                            }
            //                        }
            //                        dr3["inw_Qty"] = db4;
            //                        dr3["inw_val"] = db5;
            //                        //////for outward qty and value
            //                        db10 = 0; db11 = 0; dt6 = new DataTable();
            //                        if (dt8.Rows.Count > 0)
            //                        {
            //                            DataView view2 = new DataView(dt8, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
            //                            dt6 = view2.ToTable();
            //                            for (int x = 0; x < dt6.Rows.Count; x++)
            //                            {
            //                                db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
            //                                db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
            //                            }
            //                        }
            //                        dr3["out_qty"] = db10;
            //                        dr3["out_val"] = db11;
            //                        db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
            //                        db13 = db7 + db5 - (db10 + db1);
            //                        dr3["cons_qty"] = db12;
            //                        dr3["cons_val"] = db13;
            //                        #endregion
            //                        ph_tbl.Rows.Add(dr3);
            //                        #endregion
            //                    }
            //                }
            //                else //agar n bada h m se
            //                {
            //                    #region
            //                    dr3 = ph_tbl.NewRow();
            //                    dr3["opening"] = db9;
            //                    dr3["op_value"] = db7;
            //                    dr3["fromdt"] = fromdt;
            //                    dr3["todt"] = todt;
            //                    dr3["header"] = header_n;
            //                    dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
            //                    dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
            //                    dr3["mcode"] = mq4;
            //                    dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
            //                    dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
            //                    dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
            //                    dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
            //                    //view isley lagaya qki same icode pe more thAN 1 ROW THI USKO 1 ROW BANANE KE LIYE
            //                    #region
            //                    dt6 = new DataTable();
            //                    db4 = 0; db5 = 0;
            //                    if (dt3.Rows.Count > 0)
            //                    {
            //                        DataView view2 = new DataView(dt3, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
            //                        dt6 = view2.ToTable();
            //                        for (int x = 0; x < dt6.Rows.Count; x++)
            //                        {
            //                            db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
            //                            db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
            //                        }
            //                    }
            //                    dr3["inw_Qty"] = db4;
            //                    dr3["inw_val"] = db5;
            //                    db10 = 0; db11 = 0; dt6 = new DataTable();
            //                    if (dt8.Rows.Count > 0)
            //                    {
            //                        DataView view2 = new DataView(dt8, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
            //                        dt6 = view2.ToTable();
            //                        for (int x = 0; x < dt6.Rows.Count; x++)
            //                        {
            //                            db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
            //                            db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
            //                        }
            //                    }
            //                    dr3["out_qty"] = db10;
            //                    dr3["out_val"] = db11;
            //                    db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
            //                    db13 = db7 + db5 - (db10 + db1);
            //                    dr3["cons_qty"] = db12;
            //                    dr3["cons_val"] = db13;
            //                    #endregion
            //                    ph_tbl.Rows.Add(dr3);
            //                    // }
            //                    #endregion
            //                }
            //#endregion
            //            }
            #endregion

            if (db2 == 0 && db9 == 0) //agar clos aND OPENING DONO 0 HAI TO ..THIS IS ONLY FOR CHK INWARD AND OUTWARD
            {
                #region
                db4 = 0; db5 = 0; dt6 = new DataTable();
                if (dt3.Rows.Count > 0)
                {
                    DataView view2 = new DataView(dt3, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    dt6 = view2.ToTable();
                    for (int x = 0; x < dt6.Rows.Count; x++)
                    {
                        db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                        db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                    }
                }
                //////for outward qty and value
                db10 = 0; db11 = 0; dt6 = new DataTable();
                if (dt8.Rows.Count > 0)
                {
                    DataView view2 = new DataView(dt8, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    dt6 = view2.ToTable();
                    for (int x = 0; x < dt6.Rows.Count; x++)
                    {
                        db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                        db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                    }
                }
                if (db4 != 0 || db5 != 0 || db10 != 0 || db11 != 0)
                {
                    //  d = ph_tbl.Rows.Count;
                    dr3 = ph_tbl.NewRow();
                    //   ph_tbl.Rows.InsertAt(dr3, d + 1);        
                    dr3["fromdt"] = fromdt;
                    dr3["todt"] = todt;
                    dr3["header"] = header_n;
                    dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                    dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
                    dr3["mcode"] = mq1;
                    dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
                    dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
                    dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
                    dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
                    dr3["inw_Qty"] = db4;
                    dr3["inw_val"] = db5;
                    dr3["out_qty"] = db10;
                    dr3["out_val"] = db11;
                    db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
                    db13 = db7 + db5 - (db10 + db1);
                    dr3["cons_qty"] = db12;
                    dr3["cons_val"] = db13;
                    ph_tbl.Rows.Add(dr3);
                }
                #endregion
            }
        }
        #endregion end of op loop
    }

    public void Gen_stk_pl_S(string xdt, string igrp) //this fun for closing summary
    {
        header_n = "RM Closing Stock Summary";

        mq4 = "type1='" + mq1 + "'";
        cond = "substr(a.icode,1,2)='" + mq1 + "'";
        cond1 = "substr(icode,1,2)='" + mq1 + "'";

        //cond = "substr(a.icode,1,8)='02030100'";
        //cond1 = "substr(icode,1,8)='02030100'";

        header_n = "RM Closing Stock Summary";
        value1 = "";
        mrs = new DataTable(); DataRow mrrow = null; DataTable dt = new DataTable(); DataTable dt1 = new DataTable(); DataTable dt3 = new DataTable();
        DataTable dt6 = new DataTable(); DataTable dt7 = new DataTable(); DataTable dtm = new DataTable(); DataTable cons_Dt = new DataTable();
        string opbalyr = "", param = "", mq0 = "", xprd2 = "";
        ////////////ph_tbl is final cursor for report
        #region
        ph_tbl = new DataTable();
        ph_tbl.Columns.Add(new DataColumn("fromdt", typeof(DateTime)));
        ph_tbl.Columns.Add(new DataColumn("todt", typeof(DateTime)));
        ph_tbl.Columns.Add(new DataColumn("header", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("mcode", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("mname", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("scode", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("sname", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("icode", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("iname", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("unit", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("cpartno", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("maker", typeof(string)));
        ph_tbl.Columns.Add(new DataColumn("opening", typeof(double)));//op bal in this
        ph_tbl.Columns.Add(new DataColumn("op_value", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("inw_Qty", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("inw_val", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("out_qty", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("out_val", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("cons_qty", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("cons_val", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("clos_qty", typeof(double)));//show clos bal in this 
        ph_tbl.Columns.Add(new DataColumn("clos_val", typeof(double)));
        ph_tbl.Columns.Add(new DataColumn("avg_rate", typeof(double)));
        ///////////////////////mrs is cursor for detail report
        mrs.Columns.Add(new DataColumn("Icode", typeof(string)));
        mrs.Columns.Add(new DataColumn("Iname", typeof(string)));
        mrs.Columns.Add(new DataColumn("mrr", typeof(string)));
        mrs.Columns.Add(new DataColumn("mrrdt", typeof(DateTime)));
        mrs.Columns.Add(new DataColumn("qty", typeof(double)));
        mrs.Columns.Add(new DataColumn("rate", typeof(double)));
        mrs.Columns.Add(new DataColumn("stock", typeof(double)));
        ////////////
        dtm.Columns.Add(new DataColumn("Icode", typeof(string)));
        dtm.Columns.Add(new DataColumn("Iname", typeof(string)));
        dtm.Columns.Add(new DataColumn("mrr", typeof(string)));
        dtm.Columns.Add(new DataColumn("mrrdt", typeof(DateTime)));
        dtm.Columns.Add(new DataColumn("qty", typeof(double)));
        dtm.Columns.Add(new DataColumn("rate", typeof(double)));
        dtm.Columns.Add(new DataColumn("stock", typeof(double)));
        #endregion
        DataRow dr4 = mrs.NewRow();
        DataRow dr3 = ph_tbl.NewRow();
        //fgen.execute_cmd(frm_qstr, frm_cocd, "Delete from itemvbal13 a where a.branchcd='" + frm_mbr + "' " + cond + "");
        opbalyr = "yr_" + fgen.seek_iname(frm_qstr, frm_cocd, "SELECT TO_CHAR(TO_DATE(PARAMS,'DD/MM/YYYY'),'YYYY') AS params FROM CONTROLS WHERE ID='R02'", "params");
        param = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT PARAMS AS params FROM CONTROLS WHERE ID='R02'", "params");
        xprd1 = "BETWEEN TO_dATE('" + param + "','dd/mm/yyyy') and to_Date('" + xdt + "','dd/mm/yyyy')-1 ";
        xprd2 = "BETWEEN TO_dATE('" + xdt + "','dd/mm/yyyy') and to_Date('" + xdt + "','dd/mm/yyyy') ";


        opbalyr = "yr_" + frm_myear;
        xprd1 = "BETWEEN TO_dATE('" + frm_cDt1 + "','dd/mm/yyyy') and to_Date('" + fromdt + "','dd/mm/yyyy')-1 ";
        xprd2 = "BETWEEN TO_dATE('" + fromdt + "','dd/mm/yyyy') and to_Date('" + xdt + "','dd/mm/yyyy') ";

        #region for closing
        //SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y' " + cond + " and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + xdt + "','dd/mm/yyyy') " + cond + " and a.iqtyin>0 and substr(trim(a.icode),1,2)='" + mq4 + "' order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //changes by yogita...old
        SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y' and " + cond + " and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + xdt + "','dd/mm/yyyy') and a.iqtyin>0  order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //changes by yogita........
        //SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y'  and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + xdt + "','dd/mm/yyyy') and substr(trim(a.icode),1,4)='0706' and a.iqtyin>0  order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //for testing on single icode
        dt = fgen.getdata(frm_qstr, frm_cocd, SQuery); //this is mrr dt for only closing 
        //////////////////
        // SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y' " + cond + " and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + fromdt + "','dd/mm/yyyy') " + cond + " and a.iqtyin>0 and substr(trim(a.icode),1,2)='" + mq4 + "' order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //changes by yogita.....old
        SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y' and " + cond + " and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + fromdt + "','dd/mm/yyyy') and a.iqtyin>0  order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //changes by yogita
        //SQuery = "select a.type,a.VCHNUM,to_Char(a.VCHDATE,'dd/mm/yyyy') as VCHDATE,a.invno,to_char(a.invdate,'dd/mm/yyyy') as invdate,a.acode,trim(a.icode) as icode,a.iqtyin as balance,(Case when nvl(a.ichgs,0)=0 then decode(a.irate,0,b.irate,a.irate) else a.ichgs end) as irate from ivoucher a,item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and a.type like '0%' and a.type not in ('04','09','08','0J')  and a.store='Y'  and a.vchdate>=to_DatE('" + param + "','DD/MM/YYYY') and a.vchdate<=to_DatE('" + xdt + "','dd/mm/yyyy') and substr(trim(a.icode),1,4)='0706' and a.iqtyin>0  order by trim(a.icode),a.vchdate desc,a.vchnum desc"; //for testing on single icode
        DataTable dt9 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //this is mrr dt for only opening 
        //////////////=================below is closing dt
        #endregion
        #region this is old query only for closing balance
        //mq0 = "select c.irate,trim(a.icode) as icode,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as closing from (Select icode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where branchcd='" + frm_mbr + "' " + cond.Replace("a.", "") + " union all  ";      //by yogita    
        //mq1 = "select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + " and store='Y' " + cond.Replace("a.", "") + " GROUP BY ICODE union all ";//BY ME     
        //mq2 = "select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + " and store='Y' " + cond.Replace("a.", "") + " GROUP BY ICODE )a, type b,item c  where trim(A.icode)=trim(c.icodE) and substr(a.icode,1,2)=b.type1 and b.id='Y' and nvl(b.rcnum,'Y')!='N' and substr(trim(a.icode),1,2)='" + mq4 + "' group by c.irate,trim(a.icode) having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>0  order by trim(a.icode)";
        //SQuery = mq0 + mq1 + mq2;
        #endregion
        //SQuery = "select c.irate,trim(a.icode) as icode,sum(a.opening) as opening,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as closing   from (Select icode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal  where branchcd='" + frm_mbr + "' and substr(trim(icode),1,2)='" + mq4 + "'  union all select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  and store='Y' and substr(trim(icode),1,2)='" + mq4 + "' GROUP BY ICODE union all  select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + "  and store='Y' and substr(trim(icode),1,2)='" + mq4 + "' GROUP BY ICODE )a, item c  where trim(A.icode)=trim(c.icodE)  group by c.irate,trim(a.icode) /*having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>0*/  order by trim(a.icode)";//old
        SQuery = "select c.irate,trim(a.icode) as icode,sum(a.opening) as opening,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as closing   from (Select icode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal  where branchcd='" + frm_mbr + "' and " + cond1 + " union all select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  and store='Y' and " + cond1 + " GROUP BY ICODE union all  select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + "  and store='Y' and " + cond1 + " GROUP BY ICODE ) a, item c  where trim(A.icode)=trim(c.icodE)  group by c.irate,trim(a.icode) /*having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>0*/  order by trim(a.icode)";
        dt1 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //closing bal dt1
        ///////////////
        //mq5 = "select c.irate,trim(a.icode) as icode,sum(a.opening) as opening from (Select icode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where branchcd='" + frm_mbr + "' and substr(trim(icode),1,2)='" + mq4 + "'  union all";
        mq5 = "select c.irate,trim(a.icode) as icode,sum(a.opening) as opening from (Select icode, yr_" + frm_myear + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where branchcd='" + frm_mbr + "' and " + cond1 + " union all";
        //mq6 = " select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  and store='Y' and substr(trim(icode),1,2)='" + mq4 + "' GROUP BY ICODE union all ";//old
        mq6 = " select icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange1 + "  and store='Y' and " + cond1 + " GROUP BY ICODE union all ";
        //mq7 = " select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + "  and store='Y' and substr(trim(icode),1,2)='" + mq4 + "' GROUP BY ICODE )a, type b,item c  where trim(A.icode)=trim(c.icodE) and substr(a.icode,1,2)=b.type1 and b.id='Y' and nvl(b.rcnum,'Y')!='N' group by c.irate,trim(a.icode) having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>=0  order by trim(a.icode)";
        mq7 = " select icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" + frm_mbr + "' and type like '%' and vchdate " + xprdRange + "  and store='Y' and " + cond1 + " GROUP BY ICODE )a, type b,item c  where trim(A.icode)=trim(c.icodE) and substr(a.icode,1,2)=b.type1 and b.id='Y' and nvl(b.rcnum,'Y')!='N' group by c.irate,trim(a.icode) having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>=0  order by trim(a.icode)";
        SQuery = mq5 + mq6 + mq7;
        dt7 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt for opening balance
        ////////////////
        //SQuery = "select icode,iname from item where substr(trim(icode),1,2) in ('" + mq4 + "') and length(trim(icode))=4";//old
        SQuery = "select icode,iname from item where " + cond1 + " and length(trim(icode))=4";
        DataTable dt4 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt for subgroup name and code
        SQuery = "select TYPE1 AS MGCODE,NAME AS MNAME from type where " + mq4 + " and id='Y'";////-------------need chnages in this
        DataTable dt5 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt for MAINGROUP name and code
        //SQuery = "select distinct icode,iname,unit from item where length(trim(icode))>=8 and substr(trim(icode),1,2) in ('" + mq4 + "') order by icode";//old
        SQuery = "select distinct icode,iname,unit,cpartno,maker from item where length(trim(icode))>=8 and " + cond1 + "  order by icode"; //and icode='10060001' 
        DataTable dt2 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt for main item or name
        //////=====dt3 me mne without store data pic kiya hua tha then main me dekha to usme summry me store Y ka data aara tha but detail (25168) me main me Y,N both store ka data aara tha..agar user kahega ki detail se mtch kro then is qry me dono store pas kr denge
        //SQuery = "select sum(iqtyin) as qty ,sum((iqtyin)*irate) as val,irate ,icode from ivoucher where branchcd='" + frm_mbr + "' and type like '0%'  and vchdate " + xprdRange + "  group by icode,irate,TYPE  ORDER BY TYPE";//OLD IN THIS STORE Y AND N DATA IS COMING
        //SQuery = "select sum(iqtyin) as qty ,sum((iqtyin)*irate) as val,irate ,icode from ivoucher where branchcd='" + frm_mbr + "' and substr(type,1,1) in ('0','1') AND STORE='Y' and vchdate " + xprdRange + "  group by icode,irate,TYPE  ORDER BY TYPE"; //SET STORE=Y BECAUSE IN MAIN Tejaxo ONLY STORE Y DATA IS COMING IN THIS REPORT
        SQuery = "select sum(a.iqtyin) as qty ,sum((a.iqtyin)*(case when a.irate>0 then a.irate else b.irate end) ) as val,(case when a.irate>0 then a.irate else b.irate end) irate ,a.icode from ivoucher a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + frm_mbr + "' and substr(a.type,1,1) in ('0','1') AND a.STORE='Y' and a.vchdate " + xprdRange + " and " + cond + "  group by a.icode,a.irate,a.TYPE,b.irate  ORDER BY a.TYPE"; //SET STORE=Y BECAUSE IN MAIN Tejaxo ONLY STORE Y DATA IS COMING IN THIS REPORT
        dt3 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt3 for inward qty and value

        //SQuery = "select sum(iqtyin) as qty ,sum((iqtyin)*irate) as val,irate ,icode from ivoucher where branchcd='" + frm_mbr + "' and  type like '2%' OR TYPE LIKE '4%' and vchdate " + xprdRange + "  group by icode,irate,TYPE ORDER BY TYPE";
        SQuery = "select sum(a.iqtyin) as qty ,sum((a.iqtyin)* (case when a.irate>0 then a.irate else b.irate end) ) as val,(case when a.irate>0 then a.irate else b.irate end) as irate ,a.icode from ivoucher a,item b where trim(a.icode)=trim(b.icode) and a.branchcd='" + frm_mbr + "' and (a.type like '2%' OR a.TYPE LIKE '4%') and A.STORE='Y' and a.vchdate " + xprdRange + " and " + cond + " group by a.icode,a.irate,a.TYPE,b.irate ORDER BY a.TYPE";
        DataTable dt8 = fgen.getdata(frm_qstr, frm_cocd, SQuery); //dt8 for inward qty and value

        //========consumption dt
        SQuery = "select trim(a.icode) as icode,sum(nvl(a.iqtyout,0)) as cons_qty,sum(nvl(a.iqtyout,0)*(case when a.irate>0 then a.irate else b.irate end)) as cons_val  from ivoucher a,item b where  trim(a.icode)=trim(b.icode) and a.branchcd='" + frm_mbr + "' and a.type like '3%' and " + cond + " and A.STORE='Y' AND a.vchdate " + xprdRange + " group by trim(a.icode)";
        cons_Dt = fgen.getdata(frm_qstr, frm_cocd, SQuery);
        ///////////      
        for (int k = 0; k < dt2.Rows.Count; k++)
        {
            // foreach (DataRow drrstk in dt1.Rows) //stock dt...this is for closing bal fill in dt
            //foreach (DataRow drrstk in dt2.Rows) //dt2 for all item for selected group
            //{
            #region end of foreach loop
            itot_stk = 0; to_cons = 0; itv = 0; db = 0; db1 = 0; db2 = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0; db7 = 0; db8 = 0; m = 0; int n; db10 = 0; db11 = 0;
            // to_cons = Convert.ToDouble(drrstk["closing"]);
            to_cons = fgen.make_double(fgen.seek_iname_dt(dt1, "icode='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "closing"));
            db2 = to_cons;
            foreach (DataRow stk_chk in dt.Rows) //ivoucher dt
            {
                /// //dt.Select(drrstk["icode"].ToString());
                #region for details of closing balance
                if (dt.Rows.Count == 0)
                {
                    #region
                    // fgen.execute_cmd(frm_qstr, frm_cocd, "insert into itemvbal13(irate,branchcd,type,vchnum,vchdate,invno,invdate,acode,icode,iqtyin)values(" + Convert.ToInt32(stk_chk["irate"]) + ",'" + frm_mbr + "','" + stk_chk["type"].ToString() + "','" + stk_chk["vchnum"].ToString() + "',to_datE('" + stk_chk["vchdate"].ToString() + "','dd/mm/yyyy'),'" + value1 + "',to_Date('" + stk_chk["invdate"].ToString() + "','dd/mm/yyyy'),'" + stk_chk["acode"].ToString().Trim() + "','" + stk_chk["icode"].ToString().Trim() + "'," + to_cons + ")");
                    dr4 = mrs.NewRow();
                    dr4["icode"] = stk_chk["icode"].ToString().Trim();
                    dr4["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr4["icode"].ToString().Trim() + "'", "iname");
                    dr4["mrr"] = stk_chk["vchnum"].ToString().Trim();
                    dr4["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                    dr4["qty"] = stk_chk["balance"].ToString().Trim();
                    dr4["rate"] = stk_chk["irate"].ToString().Trim();
                    db1 += fgen.make_double(dr4["qty"].ToString().Trim()) * fgen.make_double(dr4["rate"].ToString().Trim()); //for closing val
                    db3 += fgen.make_double(dr4["qty"].ToString().Trim());
                    dr4["stock"] = db2;
                    mrs.Rows.Add(dr4);
                    to_cons = 0;
                    #endregion
                }
                else
                {
                    #region
                    if (stk_chk["icode"].ToString().Trim() == dt2.Rows[k]["icode"].ToString().Trim())
                    {
                        if (Convert.ToDouble(stk_chk["balance"].ToString()) >= to_cons && to_cons > 0)
                        {
                            itot_stk = itot_stk + (to_cons * Convert.ToInt32(stk_chk["irate"]));
                            itv = itv + (to_cons * Convert.ToInt32(stk_chk["irate"]));
                            value1 = stk_chk["invno"].ToString();
                            if (value1.ToString().Trim().Length > 10) value1 = value1.Trim().Substring(0, 10);
                            dr4 = mrs.NewRow();
                            dr4["icode"] = stk_chk["icode"].ToString().Trim();
                            dr4["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr4["icode"].ToString().Trim() + "'", "iname");
                            dr4["mrr"] = stk_chk["vchnum"].ToString().Trim();
                            dr4["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                            dr4["qty"] = to_cons;
                            dr4["rate"] = stk_chk["irate"].ToString().Trim();
                            dr4["stock"] = db2;// drrstk["closing"].ToString().Trim();
                            db1 += fgen.make_double(dr4["qty"].ToString().Trim()) * fgen.make_double(dr4["rate"].ToString().Trim()); //for closing val
                            db3 += fgen.make_double(dr4["qty"].ToString().Trim());
                            mrs.Rows.Add(dr4);
                            to_cons = 0;
                            // db1 = 0;
                        }
                        else
                        {
                            if (to_cons > 0)
                            {
                                value1 = stk_chk["invno"].ToString();
                                if (value1.ToString().Trim().Length > 10) value1 = value1.Trim().Substring(0, 10);
                                dr4 = mrs.NewRow();
                                dr4["icode"] = stk_chk["icode"].ToString().Trim();
                                dr4["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr4["icode"].ToString().Trim() + "'", "iname");
                                dr4["mrr"] = stk_chk["vchnum"].ToString().Trim();
                                dr4["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                                dr4["rate"] = stk_chk["irate"].ToString().Trim();
                                dr4["stock"] = db2;// drrstk["closing"].ToString().Trim();
                                fgen.execute_cmd(frm_qstr, frm_cocd, SQuery);
                                itot_stk = itot_stk + (Convert.ToInt32(stk_chk["balance"]) * Convert.ToInt32(stk_chk["irate"]));
                                itv = itv + (Convert.ToInt32(stk_chk["balance"]) * Convert.ToInt32(stk_chk["irate"]));
                                to_cons = to_cons - Convert.ToInt32(stk_chk["balance"]);
                                dr4["qty"] = stk_chk["balance"].ToString().Trim();
                                db3 += fgen.make_double(dr4["qty"].ToString().Trim());
                                db1 += fgen.make_double(dr4["qty"].ToString().Trim()) * fgen.make_double(dr4["rate"].ToString().Trim()); //for closing val
                                mrs.Rows.Add(dr4);
                            }
                        }
                        #endregion
                    }
                    #endregion end of foreach loop
                }
            }
            #region fill data into final cursor
            if (db3 == db2 && db2 != 0)
            {
                db12 = 0; db13 = 0;
                dr3 = ph_tbl.NewRow();
                dr3["fromdt"] = fromdt;
                dr3["todt"] = todt;
                dr3["header"] = header_n;
                dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
                dr3["mcode"] = mq1;
                dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
                dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
                dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
                dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
                dr3["cpartno"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "cpartno");
                dr3["maker"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "maker");
                dr3["opening"] = fgen.seek_iname_dt(dt7, "icode='" + dr3["icode"].ToString().Trim() + "'", "opening");
                dr3["op_value"] = fgen.make_double(dr3["opening"].ToString().Trim()) * fgen.make_double(fgen.seek_iname_dt(dt7, "icode='" + dr3["icode"].ToString().Trim() + "'", "irate"));
                dr3["cons_qty"] = fgen.seek_iname_dt(cons_Dt, "icode='" + dr3["icode"].ToString().Trim() + "'", "cons_qty");
                dr3["cons_val"] = fgen.seek_iname_dt(cons_Dt, "icode='" + dr3["icode"].ToString().Trim() + "'", "cons_val");
                // dr3["clos_val"] = db1;
                dr3["clos_qty"] = db2;
                dr3["clos_val"] = db2 * fgen.make_double(fgen.seek_iname_dt(dt1, "icode='" + dr3["icode"].ToString().Trim() + "'", "irate"));
                // dr3["avg_rate"] = db1 / db2; //old
                dr3["avg_rate"] = fgen.make_double(dr3["clos_val"].ToString().Trim()) / db2;
                #region
                dt6 = new DataTable();
                //view isley lagaya qki same icode pe more thAN 1 ROW THI USKO 1 ROW BANANE KE LIYE
                db4 = 0; db5 = 0;
                if (dt3.Rows.Count > 0)
                {
                    DataView view2 = new DataView(dt3, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    dt6 = view2.ToTable();
                    for (int x = 0; x < dt6.Rows.Count; x++)
                    {
                        db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                        db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                    }
                }
                dr3["inw_Qty"] = db4;
                dr3["inw_val"] = db5;
                //  ph_tbl.Rows.Add(dr3);
                //////for outward qty and value
                db4 = 0; db5 = 0; dt6 = new DataTable();
                if (dt8.Rows.Count > 0)
                {
                    DataView view2 = new DataView(dt8, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    dt6 = view2.ToTable();
                    for (int x = 0; x < dt6.Rows.Count; x++)
                    {
                        db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                        db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                    }
                }
                dr3["out_qty"] = db4;
                dr3["out_val"] = db5;

                #endregion
                ph_tbl.Rows.Add(dr3);
            }
            #region
            else
            {
                if (db2 != 0)
                {
                    #region
                    dr3 = ph_tbl.NewRow();
                    dr3["fromdt"] = fromdt;
                    dr3["todt"] = todt;
                    dr3["header"] = header_n;
                    dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                    dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
                    dr3["mcode"] = mq1;
                    dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
                    dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
                    dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
                    dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
                    dr3["cpartno"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "cpartno");
                    dr3["maker"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "maker");
                    dr3["opening"] = fgen.seek_iname_dt(dt7, "icode='" + dr3["icode"].ToString().Trim() + "'", "opening");
                    dr3["op_value"] = fgen.make_double(dr3["opening"].ToString().Trim()) * fgen.make_double(fgen.seek_iname_dt(dt7, "icode='" + dr3["icode"].ToString().Trim() + "'", "irate"));
                    dr3["cons_qty"] = fgen.seek_iname_dt(cons_Dt, "icode='" + dr3["icode"].ToString().Trim() + "'", "cons_qty");
                    dr3["cons_val"] = fgen.seek_iname_dt(cons_Dt, "icode='" + dr3["icode"].ToString().Trim() + "'", "cons_val");
                    dr3["clos_qty"] = db2;
                    // dr3["clos_val"] = db1;
                    dr3["clos_val"] = db2 * fgen.make_double(fgen.seek_iname_dt(dt1, "icode='" + dr3["icode"].ToString().Trim() + "'", "irate"));
                    dr3["avg_rate"] = fgen.make_double(dr3["clos_val"].ToString().Trim()) / db2;
                    #region
                    dt6 = new DataTable();
                    //view isley lagaya qki same icode pe more thAN 1 ROW THI USKO 1 ROW BANANE KE LIYE
                    db4 = 0; db5 = 0;
                    if (dt3.Rows.Count > 0)
                    {
                        DataView view2 = new DataView(dt3, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        dt6 = view2.ToTable();
                        for (int x = 0; x < dt6.Rows.Count; x++)
                        {
                            db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                            db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                        }
                    }
                    dr3["inw_Qty"] = db4;
                    dr3["inw_val"] = db5;
                    //   ph_tbl.Rows.Add(dr3);
                    //////for outward qty and value
                    db10 = 0; db11 = 0; dt6 = new DataTable();
                    if (dt8.Rows.Count > 0)
                    {
                        DataView view2 = new DataView(dt8, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        dt6 = view2.ToTable();
                        for (int x = 0; x < dt6.Rows.Count; x++)
                        {
                            db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                            db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                        }
                    }
                    if (db10 != 0 && db11 != 0)
                    {
                        // dr3 = ph_tbl.NewRow();
                        dr3["out_qty"] = db10;
                        dr3["out_val"] = db11;
                    }
                    ph_tbl.Rows.Add(dr3);
                }
                #endregion
                #endregion
            }


            #endregion

            #endregion
            #endregion
            // }
            //////////for opening summsry and detail

            #region  opening blance loop
            itot_stk = 0; to_cons = 0; itv = 0; db = 0; db3 = 0; db4 = 0; db5 = 0; db6 = 0; db7 = 0; db8 = 0;

            // to_cons = Convert.ToDouble(fgen.seek_iname_dt(dt7, "icode='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "opening"));
            to_cons =fgen.make_double(fgen.seek_iname_dt(dt1, "icode='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "opening"));
            db9 = to_cons;
            foreach (DataRow stk_chk in dt9.Rows) //ivoucher dt
            {
                #region for details of opening balance
                if (dt9.Rows.Count == 0)
                {
                    // fgen.execute_cmd(frm_qstr, frm_cocd, "insert into itemvbal13(irate,branchcd,type,vchnum,vchdate,invno,invdate,acode,icode,iqtyin)values(" + Convert.ToInt32(stk_chk["irate"]) + ",'" + frm_mbr + "','" + stk_chk["type"].ToString() + "','" + stk_chk["vchnum"].ToString() + "',to_datE('" + stk_chk["vchdate"].ToString() + "','dd/mm/yyyy'),'" + value1 + "',to_Date('" + stk_chk["invdate"].ToString() + "','dd/mm/yyyy'),'" + stk_chk["acode"].ToString().Trim() + "','" + stk_chk["icode"].ToString().Trim() + "'," + to_cons + ")");
                    mrrow = dtm.NewRow();
                    mrrow["icode"] = stk_chk["icode"].ToString().Trim();
                    mrrow["iname"] = fgen.seek_iname_dt(dt2, "icode='" + mrrow["icode"].ToString().Trim() + "'", "iname");
                    mrrow["mrr"] = stk_chk["vchnum"].ToString().Trim();
                    mrrow["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                    mrrow["qty"] = stk_chk["balance"].ToString().Trim();
                    mrrow["rate"] = stk_chk["irate"].ToString().Trim();
                    db7 += fgen.make_double(mrrow["qty"].ToString().Trim()) * fgen.make_double(mrrow["rate"].ToString().Trim()); //for closing val
                    db8 += fgen.make_double(mrrow["qty"].ToString().Trim());
                    mrrow["stock"] = db9;
                    dtm.Rows.Add(mrrow);
                    to_cons = 0;
                }
                else
                {
                    #region
                    //     if (stk_chk["icode"].ToString().Trim() == dropstk["icode"].ToString().Trim())
                    if (stk_chk["icode"].ToString().Trim() == dt2.Rows[k]["icode"].ToString().Trim())
                    {
                        if (Convert.ToDouble(stk_chk["balance"].ToString()) >= to_cons && to_cons > 0)
                        {
                            itot_stk = itot_stk + (to_cons * Convert.ToInt32(stk_chk["irate"]));
                            itv = itv + (to_cons * Convert.ToInt32(stk_chk["irate"]));
                            value1 = stk_chk["invno"].ToString();
                            if (value1.ToString().Trim().Length > 10) value1 = value1.Trim().Substring(0, 10);
                            //fgen.execute_cmd(frm_qstr, frm_cocd, "insert into itemvbal13(irate,branchcd,type,vchnum,vchdate,invno,invdate,acode,icode,iqtyin)values(" + Convert.ToInt32(stk_chk["irate"]) + ",'" + mbr + "','" + stk_chk["type"].ToString() + "','" + stk_chk["vchnum"].ToString() + "',to_datE('" + stk_chk["vchdate"].ToString() + "','dd/mm/yyyy'),'" + value1 + "',to_Date('" + stk_chk["invdate"].ToString() + "','dd/mm/yyyy'),'" + stk_chk["acode"].ToString().Trim() + "','" + stk_chk["icode"].ToString().Trim() + "'," + to_cons + ")");
                            mrrow = dtm.NewRow();
                            mrrow["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                            mrrow["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "iname");
                            mrrow["mrr"] = stk_chk["vchnum"].ToString().Trim();
                            mrrow["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                            mrrow["qty"] = to_cons;
                            mrrow["rate"] = stk_chk["irate"].ToString().Trim();
                            mrrow["stock"] = db9;// dropstk["opening"].ToString().Trim();
                            db7 += fgen.make_double(mrrow["qty"].ToString().Trim()) * fgen.make_double(mrrow["rate"].ToString().Trim()); //for closing val
                            db8 += fgen.make_double(mrrow["qty"].ToString().Trim());
                            dtm.Rows.Add(mrrow);
                            to_cons = 0;
                            // db1 = 0;
                        }
                        else
                        {
                            if (to_cons > 0)
                            {
                                value1 = stk_chk["invno"].ToString();
                                if (value1.ToString().Trim().Length > 10) value1 = value1.Trim().Substring(0, 10);
                                //  SQuery = "insert into itemvbal13(irate,branchcd,type,vchnum,vchdate,invno,invdate,acode,icode,iqtyin)values(" + Convert.ToInt32(stk_chk["irate"]) + ",'" + mbr + "','" + stk_chk["typE"].ToString() + "','" + stk_chk["vchnum"].ToString() + "',to_datE('" + stk_chk["vchdate"] + "','dd/mm/yyyy'),'" + value1 + "',to_Date('" + stk_chk["invdate"].ToString() + "','dd/mm/yyyy'),'" + stk_chk["acode"].ToString().Trim() + "','" + stk_chk["icode"].ToString().Trim() + "'," + Convert.ToInt32(stk_chk["balance"]) + ")";
                                mrrow = dtm.NewRow();
                                mrrow["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                                mrrow["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "iname");
                                mrrow["mrr"] = stk_chk["vchnum"].ToString().Trim();
                                mrrow["mrrdt"] = stk_chk["vchdate"].ToString().Trim();
                                mrrow["rate"] = stk_chk["irate"].ToString().Trim();
                                mrrow["stock"] = db9;// dropstk["opening"].ToString().Trim();
                                fgen.execute_cmd(frm_qstr, frm_cocd, SQuery);
                                itot_stk = itot_stk + (Convert.ToInt32(stk_chk["balance"]) * Convert.ToInt32(stk_chk["irate"]));
                                itv = itv + (Convert.ToInt32(stk_chk["balance"]) * Convert.ToInt32(stk_chk["irate"]));
                                to_cons = to_cons - Convert.ToInt32(stk_chk["balance"]);
                                mrrow["qty"] = stk_chk["balance"].ToString().Trim();
                                db8 += fgen.make_double(mrrow["qty"].ToString().Trim()); //
                                db7 += fgen.make_double(mrrow["qty"].ToString().Trim()) * fgen.make_double(mrrow["rate"].ToString().Trim()); //for opening value
                                dtm.Rows.Add(mrrow);
                            }
                        }
                        #endregion end of foreach loop
                    }
                    #endregion
                }
            }
            #region merging op in clos wali dt me
            //yaha mne op bal ko ph_tbl me fill kiya h agar closing ki ek row hai or op ki 2 hai to uske liye if else ka use kiya h
            m = 0; n = 0;
            m = ph_tbl.Rows.Count;
            n = dtm.Rows.Count;
            if (db8 == db9 && db9 != 0) //if value and op stock is matched
            {
                #region
                // if (m >= n && k!=0)//this is for row in tBLE ..AGAR PHTBL ME jyada row h to usi me add krne ke liye
                //  {
                if (m > 0)
                {
                    if (ph_tbl.Rows[m - 1]["icode"].ToString().Trim() == dt2.Rows[k]["icode"].ToString().Trim())
                    {
                        if (k != 0)
                        {
                            #region
                            ph_tbl.Rows[m - 1]["opening"] = db9;
                            ph_tbl.Rows[m - 1]["op_value"] = db7;
                            db4 = 0; db5 = 0; dt6 = new DataTable();
                            if (dt3.Rows.Count > 0)
                            {
                                DataView view2 = new DataView(dt3, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                                dt6 = view2.ToTable();
                                for (int x = 0; x < dt6.Rows.Count; x++)
                                {
                                    db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                    db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                                }
                            }
                            ph_tbl.Rows[m - 1]["inw_Qty"] = db4;
                            ph_tbl.Rows[m - 1]["inw_val"] = db5;
                            //////for outward qty and value
                            db10 = 0; db11 = 0; dt6 = new DataTable();
                            if (dt8.Rows.Count > 0)
                            {
                                DataView view2 = new DataView(dt8, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                                dt6 = view2.ToTable();
                                for (int x = 0; x < dt6.Rows.Count; x++)
                                {
                                    db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                    db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                                }
                            }
                            ph_tbl.Rows[m - 1]["out_qty"] = db10;
                            ph_tbl.Rows[m - 1]["out_val"] = db11;
                            db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
                            db13 = db7 + db5 - (db10 + db1);
                            ph_tbl.Rows[m - 1]["cons_qty"] = db12;
                            ph_tbl.Rows[m - 1]["cons_val"] = db13;
                            #endregion
                        }
                        if (k == 0)
                        {
                            #region
                            ph_tbl.Rows[m - 1]["opening"] = db9;
                            ph_tbl.Rows[m - 1]["op_value"] = db7;
                            db4 = 0; db5 = 0; dt6 = new DataTable();
                            if (dt3.Rows.Count > 0)
                            {
                                DataView view2 = new DataView(dt3, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                                dt6 = view2.ToTable();
                                for (int x = 0; x < dt6.Rows.Count; x++)
                                {
                                    db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                    db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                                }
                            }
                            ph_tbl.Rows[m - 1]["inw_Qty"] = db4;
                            ph_tbl.Rows[m - 1]["inw_val"] = db5;
                            //////for outward qty and value
                            db10 = 0; db11 = 0; dt6 = new DataTable();
                            if (dt8.Rows.Count > 0)
                            {
                                DataView view2 = new DataView(dt8, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                                dt6 = view2.ToTable();
                                for (int x = 0; x < dt6.Rows.Count; x++)
                                {
                                    db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                    db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                                }
                            }
                            ph_tbl.Rows[m - 1]["out_qty"] = db10;
                            ph_tbl.Rows[m - 1]["out_val"] = db11;
                            db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
                            db13 = db7 + db5 - (db10 + db1);
                            ph_tbl.Rows[m - 1]["cons_qty"] = db12;
                            ph_tbl.Rows[m - 1]["cons_val"] = db13;
                            #endregion
                        }
                        #endregion
                    }
                    else
                    {
                        #region
                        dr3 = ph_tbl.NewRow();
                        dr3["opening"] = db9;
                        // dr3["op_value"] = db7;
                        dr3["fromdt"] = fromdt;
                        dr3["todt"] = todt;
                        dr3["header"] = header_n;
                        dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                        dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
                        dr3["mcode"] = mq1;
                        dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
                        dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
                        dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
                        dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
                        dr3["cpartno"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "cpartno");
                        dr3["maker"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "maker");
                        dr3["op_value"] = fgen.make_double(dr3["opening"].ToString().Trim()) * fgen.make_double(fgen.seek_iname_dt(dt7, "icode='" + dr3["icode"].ToString().Trim() + "'", "irate"));
                        dr3["cons_qty"] = fgen.seek_iname_dt(cons_Dt, "icode='" + dr3["icode"].ToString().Trim() + "'", "cons_qty");
                        dr3["cons_val"] = fgen.seek_iname_dt(cons_Dt, "icode='" + dr3["icode"].ToString().Trim() + "'", "cons_val");
                        dr3["clos_qty"] = fgen.seek_iname_dt(dt1, "icode='" + dr3["icode"].ToString().Trim() + "'", "closing");
                        dr3["clos_val"] = fgen.make_double(dr3["clos_qty"].ToString().Trim()) * fgen.make_double(fgen.seek_iname_dt(dt1, "icode='" + dr3["icode"].ToString().Trim() + "'", "irate"));
                        dr3["avg_rate"] = fgen.make_double(dr3["clos_val"].ToString().Trim()) / fgen.make_double(dr3["clos_qty"].ToString().Trim());
                        //view isley lagaya qki same icode pe more thAN 1 ROW THI USKO 1 ROW BANANE KE LIYE
                        #region
                        dt6 = new DataTable();
                        db4 = 0; db5 = 0;
                        if (dt3.Rows.Count > 0)
                        {
                            DataView view2 = new DataView(dt3, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                            dt6 = view2.ToTable();
                            for (int x = 0; x < dt6.Rows.Count; x++)
                            {
                                db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                            }
                        }
                        dr3["inw_Qty"] = db4;
                        dr3["inw_val"] = db5;
                        //////for outward qty and value
                        db10 = 0; db11 = 0; dt6 = new DataTable();
                        if (dt8.Rows.Count > 0)
                        {
                            DataView view2 = new DataView(dt8, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                            dt6 = view2.ToTable();
                            for (int x = 0; x < dt6.Rows.Count; x++)
                            {
                                db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                                db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                            }
                        }
                        dr3["out_qty"] = db10;
                        dr3["out_val"] = db11;
                        db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
                        db13 = db7 + db5 - (db10 + db1);
                        dr3["cons_qty"] = db12;
                        dr3["cons_val"] = db13;
                        #endregion
                        ph_tbl.Rows.Add(dr3);
                        #endregion
                    }
                }

                else
                {
                    #region
                    dr3 = ph_tbl.NewRow();
                    dr3["opening"] = db9;
                    //  dr3["op_value"] = db7;
                    dr3["fromdt"] = fromdt;
                    dr3["todt"] = todt;
                    dr3["header"] = header_n;
                    dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                    dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
                    dr3["mcode"] = mq1;
                    dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
                    dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
                    dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
                    dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
                    dr3["cpartno"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "cpartno");
                    dr3["maker"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "maker");
                    dr3["op_value"] = fgen.make_double(dr3["opening"].ToString().Trim()) * fgen.make_double(fgen.seek_iname_dt(dt7, "icode='" + dr3["icode"].ToString().Trim() + "'", "irate"));
                    dr3["cons_qty"] = fgen.seek_iname_dt(cons_Dt, "icode='" + dr3["icode"].ToString().Trim() + "'", "cons_qty");
                    dr3["cons_val"] = fgen.seek_iname_dt(cons_Dt, "icode='" + dr3["icode"].ToString().Trim() + "'", "cons_val");
                    dr3["clos_qty"] = fgen.seek_iname_dt(dt1, "icode='" + dr3["icode"].ToString().Trim() + "'", "closing");
                    dr3["clos_val"] = fgen.make_double(dr3["clos_qty"].ToString().Trim()) * fgen.make_double(fgen.seek_iname_dt(dt1, "icode='" + dr3["icode"].ToString().Trim() + "'", "irate"));
                    dr3["avg_rate"] = fgen.make_double(dr3["clos_val"].ToString().Trim()) / fgen.make_double(dr3["clos_qty"].ToString().Trim());
                    //view isley lagaya qki same icode pe more thAN 1 ROW THI USKO 1 ROW BANANE KE LIYE
                    #region
                    dt6 = new DataTable();
                    db4 = 0; db5 = 0;
                    if (dt3.Rows.Count > 0)
                    {
                        DataView view2 = new DataView(dt3, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        dt6 = view2.ToTable();
                        for (int x = 0; x < dt6.Rows.Count; x++)
                        {
                            db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                            db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                        }
                    }
                    dr3["inw_Qty"] = db4;
                    dr3["inw_val"] = db5;
                    //////for outward qty and value
                    db10 = 0; db11 = 0; dt6 = new DataTable();
                    if (dt8.Rows.Count > 0)
                    {
                        DataView view2 = new DataView(dt8, "ICODE='" + dr3["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                        dt6 = view2.ToTable();
                        for (int x = 0; x < dt6.Rows.Count; x++)
                        {
                            db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                            db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                        }
                    }
                    dr3["out_qty"] = db10;
                    dr3["out_val"] = db11;
                    db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
                    db13 = db7 + db5 - (db10 + db1);
                    dr3["cons_qty"] = db12;
                    dr3["cons_val"] = db13;
                    #endregion
                    ph_tbl.Rows.Add(dr3);
                    #endregion
                }
            }

            #endregion

            if (db2 == 0 && db9 == 0) //agar clos aND OPENING DONO 0 HAI TO ..THIS IS ONLY FOR CHK INWARD AND OUTWARD
            {
                #region
                db4 = 0; db5 = 0; dt6 = new DataTable();
                if (dt3.Rows.Count > 0)
                {
                    DataView view2 = new DataView(dt3, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    dt6 = view2.ToTable();
                    for (int x = 0; x < dt6.Rows.Count; x++)
                    {
                        db4 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                        db5 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                    }
                }
                //////for outward qty and value
                db10 = 0; db11 = 0; dt6 = new DataTable();
                if (dt8.Rows.Count > 0)
                {
                    DataView view2 = new DataView(dt8, "ICODE='" + dt2.Rows[k]["icode"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    dt6 = view2.ToTable();
                    for (int x = 0; x < dt6.Rows.Count; x++)
                    {
                        db10 += fgen.make_double(dt6.Rows[x]["qty"].ToString().Trim());
                        db11 += fgen.make_double(dt6.Rows[x]["val"].ToString().Trim());
                    }
                }
                if (db4 != 0 || db5 != 0 || db10 != 0 || db11 != 0)
                {
                    //  d = ph_tbl.Rows.Count;
                    dr3 = ph_tbl.NewRow();
                    //   ph_tbl.Rows.InsertAt(dr3, d + 1);        
                    dr3["fromdt"] = fromdt;
                    dr3["todt"] = todt;
                    dr3["header"] = header_n;
                    dr3["icode"] = dt2.Rows[k]["icode"].ToString().Trim();
                    dr3["iname"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "iname");
                    dr3["mcode"] = mq1;
                    dr3["mname"] = fgen.seek_iname_dt(dt5, "MGCODE='" + dr3["mcode"].ToString().Trim() + "'", "mname");
                    dr3["scode"] = dr3["icode"].ToString().Substring(0, 4);
                    dr3["sname"] = fgen.seek_iname_dt(dt4, "icode='" + dr3["scode"].ToString().Trim() + "'", "iname");
                    dr3["unit"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "unit");
                    dr3["cpartno"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "cpartno");
                    dr3["maker"] = fgen.seek_iname_dt(dt2, "icode='" + dr3["icode"].ToString().Trim() + "'", "maker");
                    dr3["opening"] = fgen.seek_iname_dt(dt7, "icode='" + dr3["icode"].ToString().Trim() + "'", "opening");
                    dr3["op_value"] = fgen.make_double(dr3["opening"].ToString().Trim()) * fgen.make_double(fgen.seek_iname_dt(dt7, "icode='" + dr3["icode"].ToString().Trim() + "'", "irate"));
                    dr3["cons_qty"] = fgen.seek_iname_dt(cons_Dt, "icode='" + dr3["icode"].ToString().Trim() + "'", "cons_qty");
                    dr3["cons_val"] = fgen.seek_iname_dt(cons_Dt, "icode='" + dr3["icode"].ToString().Trim() + "'", "cons_val");
                    dr3["clos_qty"] = db2;
                    //  dr3["clos_val"] = db2;                   
                    dr3["clos_val"] = db2 * fgen.make_double(fgen.seek_iname_dt(dt1, "icode='" + dr3["icode"].ToString().Trim() + "'", "irate"));
                    if (db2 > 0)
                        dr3["avg_rate"] = fgen.make_double(dr3["clos_val"].ToString().Trim()) / db2;
                    dr3["inw_Qty"] = db4;
                    dr3["inw_val"] = db5;
                    dr3["out_qty"] = db10;
                    dr3["out_val"] = db11;
                    db12 = db9 + db4 - (db5 + db2); //op+inw qty-(inw val
                    db13 = db7 + db5 - (db10 + db1);
                    // dr3["cons_qty"] = db12;
                    dr3["cons_val"] = db13;
                    ph_tbl.Rows.Add(dr3);
                }
                #endregion
            }
        }
        #endregion end of op loop
    }
    void printDsc_OLD(DataSet dataSet, string rptFile)
    {
        string frm_FileName = frm_cocd + "_" + DateTime.Now.ToString("dd_MM_yy").Trim();
        DataSet ds = dataSet;
        string rpt = rptFile;
        DataTable dtDistEntryNo = new DataTable();
        DataView dv = new DataView(ds.Tables["Prepcur"], "", "", DataViewRowState.CurrentRows);
        dtDistEntryNo = dv.ToTable(true, "VCHNUM", "TYPE", "VCHDATE");
        string frm_pdfName = "";
        string[] allFiles = new string[dtDistEntryNo.Rows.Count];
        string tiffPath = @"c:\tej_erp\tiff\";
        int k = 0;

        col1 = fgen.seek_iname(frm_qstr, frm_cocd, "SELECT NUM4||'~'||NUM5 AS FSTR FROM TYPEGRP WHERE ID='X1' AND TYPE1='" + 1006 + "' ", "FSTR");

        //left pad
        int a = 660;
        // bottom pad
        int b = 60;
        //width

        if (col1.Split('~')[0].ToString().toDouble() > 0)
        {
            a = fgen.make_int(col1.Split('~')[0].ToString());
            b = fgen.make_int(col1.Split('~')[1].ToString());
        }

        int c = a + 110;
        //height
        int d = b + 50;

        string dscPanNo = "", dscAuthName = "", dscNametoPrint = "";

        DataTable dt = new DataTable();
        dt = fgen.getdata(frm_qstr, frm_cocd, "SELECT DSC_NAME,DSC_DESG,DSC_PAN FROM TYPE WHERE ID='B' AND TYPE1='" + frm_mbr + "' ");
        if (dt.Rows.Count > 0)
        {
            dscAuthName = dt.Rows[0]["DSC_NAME"].ToString().Trim();
            dscNametoPrint = dt.Rows[0]["DSC_DESG"].ToString().Trim();
            dscPanNo = dt.Rows[0]["DSC_PAN"].ToString().Trim();
        }

        tiffPath = @"c:\tej_erp\DSC_pdf\CR_Pdf\";
        string filenamePr = frm_cocd + "_" + "CR" + "_" + frm_mbr + "_";

        foreach (DataRow dr in dtDistEntryNo.Rows)
        {
            try
            {
                DataTable newDt = new DataTable();
                DataSet newDs = new DataSet();
                DataView dvN = new DataView(ds.Tables["Prepcur"], "VCHNUM='" + dr["vchnum"].ToString().Trim() + "' ", "", DataViewRowState.CurrentRows);
                newDt = dvN.ToTable();
                newDs.Tables.Add(newDt);
                frm_pdfName = filenamePr + dr["vchnum"].ToString().Trim() + ".pdf";
                frm_FileName = Server.MapPath(@"~\tej-base\xmlfile\" + frm_pdfName);

                repDoc.Refresh();
                repDoc.ExportToDisk(ExportFormatType.PortableDocFormat, frm_FileName);

                repDoc.Dispose();

                string path1 = Server.MapPath(@"~\tej-base\xmlfile\" + frm_pdfName);
                path1 = Server.MapPath(@"~\tej-base\xmlfile\" + frm_pdfName);

                FileInfo fi = new FileInfo(path1);
                BinaryReader br = new BinaryReader(fi.OpenRead());

                Webtel_e_Sign.Res rr = new Webtel_e_Sign.Res();

                Webtel_e_Sign.ESign aa = new Webtel_e_Sign.ESign(ConnInfo.IP, "FIN" + frm_cocd, ConnInfo.nPwd, ConnInfo.srv, "1521", "2");

                //-2 for last page
                //-1 for every page

                rr = aa.SignPDF(br.ReadBytes((int)fi.Length), dscAuthName, dscNametoPrint, a, b, c, d, "", frm_pdfName, -1, "", -1);

                string path2 = tiffPath + frm_pdfName;
                string path3 = "c:\\tej_erp\\pdf\\" + frm_pdfName;

                if (rr.Error_Detail != "")
                {
                    fgen.FILL_ERR(rr.Error_Detail);
                }

                File.WriteAllBytes(path2, rr.OutputFile);

                allFiles[k] = frm_pdfName;
                br.Close();
                br.Dispose();
                k++;
                br.Dispose();

                //convertPdfToDSC(v);
            }
            catch (Exception ex)
            {
                fgen.FILL_ERR("DSC Conv : " + ex.Message + " " + frm_pdfName);
            }
            ViewState["frm_pdfname"] = allFiles;

            DirectoryInfo di = new DirectoryInfo(tiffPath);
            allFiles = (string[])ViewState["frm_pdfname"];
            var files = di.GetFiles();
            for (int i = 0; i < allFiles.Length; i++)
            {
                var filesToDownload = files.Where(r => r.Name.Contains(allFiles[i].ToString().Substring(0, 20)));

                foreach (FileInfo file in filesToDownload)
                {
                    Response.Clear();
                    string filePath = file.FullName.Replace(@"\", "/");
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(filePath);
                    Response.End();
                }
            }
        }
    }
    private ReportDocument GetReportDocumentDP(DataSet rptDS, string rptFileName)
    {
        string repFilePath = Server.MapPath("" + rptFileName + "");
        repDoc.Load(repFilePath);
        repDoc.Refresh();
        repDoc.SetDataSource(rptDS);
        return repDoc;
    }
    void printDsc(DataSet dataSet, string rptFile)
    {
        string frm_FileName = frm_cocd + "_" + DateTime.Now.ToString("dd_MM_yy").Trim();
        DataSet ds = dataSet;
        string rpt = rptFile;
        DataTable dtDistEntryNo = new DataTable();
        DataView dv = new DataView(ds.Tables[0], "", "", DataViewRowState.CurrentRows);
        dtDistEntryNo = dv.ToTable(true, "VCHNUM", "TYPE", "VCHDATE");
        string frm_pdfName = "";
        string[] allFiles = new string[dtDistEntryNo.Rows.Count];
        string tiffPath = @"c:\tej_erp\DSC_pdf\";
        string filenamePr = "";

        col1 = fgen.dscDimension(frm_qstr, frm_cocd, frm_mbr, reportActionCode);

        //left pad
        int a = 660;
        // bottom pad
        int b = 60;
        //width

        if (col1.Split('~')[0].ToString().toDouble() > 0)
        {
            a = fgen.make_int(col1.Split('~')[0].ToString());
            b = fgen.make_int(col1.Split('~')[1].ToString());
        }

        int c = a + 110;
        //height
        int d = b + 50;

        string dscPanNo = "", dscAuthName = "", dscNametoPrint = "";
        dscAuthName = fgen.dscAuthName(frm_qstr, frm_cocd, frm_mbr, frm_uname);
        dscNametoPrint = fgen.dscNametoPrint(frm_qstr, frm_cocd, frm_mbr, frm_uname);
        dscPanNo = fgen.dscPanNo(frm_qstr, frm_cocd, frm_mbr, frm_uname);

        switch (hfhcid.Value)
        {
            case "F70203":
            case "P70106C":
            case "P70106D":
                a = 680;
                b = 55;
                //width
                c = a + 100;
                //height
                d = b + 50;
                tiffPath += "ACC_Pdf\\";
                filenamePr = frm_cocd + "_" + "AC" + "_" + frm_mbr;
                break;
            case "F1006":
                if (frm_cocd == "STUD")
                {
                    a = 710;
                    b = 50;
                    //width
                    c = a + 100;
                    //height
                    d = b + 50;
                }
                tiffPath += "Inv_Pdf\\";
                filenamePr = frm_cocd + "_" + "INV" + "_" + frm_mbr;
                if (frm_vty == "4F")
                {
                    a = 460;
                    b = 33;
                }
                break;
        }
        int k = 0;

        foreach (DataRow dr in dtDistEntryNo.Rows)
        {
            try
            {
                if (Session["rptfile"] != null)
                    frm_rptName = (string)Session["rptfile"];
                DataTable newDt = new DataTable();
                DataSet newDs = new DataSet();
                DataView dvN = new DataView(ds.Tables[0], "VCHNUM='" + dr["vchnum"].ToString().Trim() + "' ", "", DataViewRowState.CurrentRows);
                newDt = dvN.ToTable();
                newDs.Tables.Add(newDt);

                DataRow nedr;
                for (int i = 0; i < ds.Tables.Count; i++)
                {
                    if (ds.Tables[i].TableName.ToUpper() != "PREPCUR")
                    {
                        newDt = new DataTable();
                        newDt = ds.Tables[i].Clone();
                        for (int x = 0; x < ds.Tables[i].Rows.Count; x++)
                        {
                            nedr = newDt.NewRow();
                            for (int y = 0; y < ds.Tables[i].Columns.Count; y++)
                            {
                                nedr[y] = ds.Tables[i].Rows[x][y];
                            }
                            newDt.Rows.Add(nedr);
                        }
                        newDt.TableName = ds.Tables[i].TableName;
                        newDs.Tables.Add(newDt);
                    }
                }
                repDoc = new ReportDocument();
                GetReportDocumentDP(newDs, frm_rptName);

                frm_pdfName = filenamePr + "_" + dr["TYPE"].ToString().Trim() + "_" + dr["vchnum"].ToString().Trim() + "_" + Convert.ToDateTime(dr["VCHDATE"].ToString().Trim()).ToString("dd_MM_yy") + ".pdf";
                frm_FileName = Server.MapPath(@"~\tej-base\xmlfile\" + frm_pdfName);

                //repDoc.Refresh();
                repDoc.ExportToDisk(ExportFormatType.PortableDocFormat, frm_FileName);
                repDoc.Dispose();

                FileInfo fi = new FileInfo(frm_FileName);
                BinaryReader br = new BinaryReader(fi.OpenRead());

                Webtel_e_Sign.Res rr = new Webtel_e_Sign.Res();
                Webtel_e_Sign.ESign aa = new Webtel_e_Sign.ESign(ConnInfo.IP, "FIN" + frm_cocd, ConnInfo.nPwd, ConnInfo.srv, "1521", "2");

                //-2 for last page
                //-1 for every page
                rr = aa.SignPDF(br.ReadBytes((int)fi.Length), dscAuthName, dscNametoPrint, a, b, c, d, "", frm_pdfName, -1, "", -1);

                if (rr.Error_Detail != "")
                {
                    fgen.FILL_ERR(rr.Error_Detail);
                }

                if (frm_cocd != "SAIP")
                    fgen.save_dsc_info(frm_qstr, frm_cocd, frm_mbr, dr["TYPE"].ToString().Trim(), dr["vchnum"].ToString().Trim(), Convert.ToDateTime(dr["VCHDATE"].ToString().Trim()).ToString("dd/MM/yyyy"), hfhcid.Value, frm_pdfName, frm_FileName, frm_uname);

                File.WriteAllBytes(tiffPath + frm_pdfName, rr.OutputFile);

                allFiles[k] = frm_pdfName;
                br.Close();
                br.Dispose();
                k++;
                br.Dispose();

                //convertPdfToDSC(v);
            }
            catch (Exception ex)
            {
                fgen.FILL_ERR("DSC Conv : " + ex.Message + " " + frm_pdfName);
            }
        }

        PdfReader reader = null;
        Document sourceDocument = null;
        PdfCopy pdfCopyProvider = null;
        PdfImportedPage importedPage;

        ViewState["frm_pdfname"] = allFiles;
        DirectoryInfo di = new DirectoryInfo(Server.MapPath(@"~\tej-base\xmlfile\"));
        allFiles = (string[])ViewState["frm_pdfname"];
        var files = di.GetFiles();

        string newtiffPath = @"c:\tej_erp\DSC_pdf\CUSTOMER_INV_Pdf\";
        //if ((frm_cocd == "SAIP" || frm_cocd == "SAIL" || frm_cocd == "KLAS") && (hfhcid.Value == "F1006" || hfhcid.Value == "F1033" || hfhcid.Value == "F1007" || hfhcid.Value == "F1007A"))
        if ((frm_cocd == "SAIP" || frm_cocd == "SAIL" || frm_cocd == "KLAS") && (hfhcid.Value == "F1006" || hfhcid.Value == "F1033" || hfhcid.Value == "F1007" || hfhcid.Value == "F1007A" || hfhcid.Value == "P70106D"))
        {
            foreach (DataRow dr in dtDistEntryNo.Rows)
            {
                try
                {
                    if (frm_cocd == "SAIP" && hfhcid.Value != "P70106D")
                        frm_rptName = "~/tej-base/REPORT/std_SAIP_INV.rpt";
                    if (frm_cocd == "SAIP" && hfhcid.Value == "P70106D")
                    {
                        newtiffPath = @"c:\tej_erp\DSC_pdf\CUSTOMER_DR_Pdf\";
                        frm_rptName = "~/tej-base/Report/std_vchsaip.rpt";
                    }
                    if (frm_cocd == "SAIL")
                        frm_rptName = "~/tej-base/REPORT/gst_inv_bc.rpt";
                    if (frm_cocd == "KLAS")
                        frm_rptName = "~/tej-base/REPORT/gst_inv_rx.rpt";
                    if (hfhcid.Value == "F1007")
                    {
                        newtiffPath = @"c:\tej_erp\DSC_pdf\CUSTOMER_CHL_Pdf\";
                        frm_rptName = "~/tej-base/REPORT/std_chl_GST.rpt";
                    }

                    DataTable newDt = new DataTable();
                    DataSet newDs = new DataSet();
                    DataView dvN = new DataView(ds.Tables[0], "VCHNUM='" + dr["vchnum"].ToString().Trim() + "' AND MTITLESRNO='0'", "", DataViewRowState.CurrentRows);
                    newDt = dvN.ToTable();
                    newDs.Tables.Add(newDt);
                    DataRow nedr;
                    for (int i = 0; i < ds.Tables.Count; i++)
                    {
                        if (ds.Tables[i].TableName.ToUpper() != "PREPCUR")
                        {
                            newDt = new DataTable();
                            newDt = ds.Tables[i].Clone();
                            for (int x = 0; x < ds.Tables[i].Rows.Count; x++)
                            {
                                nedr = newDt.NewRow();
                                for (int y = 0; y < ds.Tables[i].Columns.Count; y++)
                                {
                                    nedr[y] = ds.Tables[i].Rows[x][y];
                                }
                                newDt.Rows.Add(nedr);
                            }
                            newDt.TableName = ds.Tables[i].TableName;
                            newDs.Tables.Add(newDt);
                        }
                    }

                    repDoc = new ReportDocument();
                    GetReportDocumentDP(newDs, frm_rptName);

                    if (frm_cocd == "KLAS") frm_pdfName = "ORIG_" + frm_pdfName;
                    else frm_pdfName = newDs.Tables[0].Rows[0]["VENCODE"].ToString().Trim() + "_" + dr["vchnum"].ToString().Trim() + "_" + Convert.ToDateTime(dr["VCHDATE"].ToString().Trim()).ToString("ddMMyyyy") + ".pdf";
                    frm_FileName = Server.MapPath(@"~\tej-base\xmlfile\" + frm_pdfName);

                    repDoc.Refresh();
                    repDoc.ExportToDisk(ExportFormatType.PortableDocFormat, frm_FileName);
                    repDoc.Dispose();

                    FileInfo fi = new FileInfo(frm_FileName);
                    BinaryReader br = new BinaryReader(fi.OpenRead());

                    Webtel_e_Sign.Res rr = new Webtel_e_Sign.Res();
                    Webtel_e_Sign.ESign aa = new Webtel_e_Sign.ESign(ConnInfo.IP, "FIN" + frm_cocd, ConnInfo.nPwd, ConnInfo.srv, "1521", "2");

                    //-2 for last page
                    //-1 for every page
                    rr = aa.SignPDF(br.ReadBytes((int)fi.Length), dscAuthName, dscNametoPrint, a, b, c, d, "", frm_pdfName, -1, "", -1);

                    if (rr.Error_Detail != "")
                    {
                        fgen.FILL_ERR(rr.Error_Detail);
                    }

                    File.WriteAllBytes(newtiffPath + frm_pdfName, rr.OutputFile);

                    br.Close();
                    br.Dispose();
                    br.Dispose();
                    //convertPdfToDSC(v);                              
                }
                catch (Exception ex)
                {
                    fgen.FILL_ERR("DSC Conv : " + ex.Message + " " + frm_pdfName);
                }
            }
        }

        reader = null;
        sourceDocument = null;
        pdfCopyProvider = null;
        importedPage = null;

        //DirectoryInfo di = new DirectoryInfo(tiffPath);        

        string outputPdfPath = @"c:\tej_erp\pdf\temp" + hfhcid.Value + ".pdf";
        string outputPdfPath2 = @"c:\tej_erp\pdf\tempnew" + hfhcid.Value + ".pdf";

        del_file(outputPdfPath);
        del_file(outputPdfPath2);

        sourceDocument = new Document();
        pdfCopyProvider = new PdfCopy(sourceDocument, new System.IO.FileStream(outputPdfPath, System.IO.FileMode.Create));

        sourceDocument.Open();


        for (int i = 0; i < allFiles.Length; i++)
        {
            var filesToDownload = files.Where(r => r.Name.Contains(allFiles[i].ToString()));

            foreach (FileInfo file in filesToDownload)
            {
                string filePath = file.FullName.Replace(@"\", "/");
                if (!filePath.Contains("ORIG_" + frm_cocd))
                {
                    reader = new PdfReader(filePath);

                    for (int x = 1; x <= reader.NumberOfPages; x++)
                    {
                        importedPage = pdfCopyProvider.GetImportedPage(reader, x);
                        pdfCopyProvider.AddPage(importedPage);
                    }
                    reader.Close();
                }
            }
        }
        pdfCopyProvider.Close();
        sourceDocument.Close();

        {
            FileInfo fi = new FileInfo(outputPdfPath);
            BinaryReader br = new BinaryReader(fi.OpenRead());

            Webtel_e_Sign.Res rr = new Webtel_e_Sign.Res();
            Webtel_e_Sign.ESign aa = new Webtel_e_Sign.ESign(ConnInfo.IP, "FIN" + frm_cocd, ConnInfo.nPwd, ConnInfo.srv, "1521", "2");

            //-2 for last page
            //-1 for every page
            rr = aa.SignPDF(br.ReadBytes((int)fi.Length), dscAuthName, dscNametoPrint, a, b, c, d, "", "temp", -1, "", -1);

            if (rr.Error_Detail != "")
            {
                fgen.FILL_ERR(rr.Error_Detail);
            }

            File.WriteAllBytes(outputPdfPath2, rr.OutputFile);
            br.Close();
        }
        ds.Dispose();

        try
        {
            Response.Clear();
            Response.ContentType = "application/pdf";
            Response.WriteFile(outputPdfPath2);
            Response.End();
            //HttpContext.Current.ApplicationInstance.CompleteRequest();
        }
        catch { }
    }
    protected void btnCSV_Click(object sender, ImageClickEventArgs e)
    {
        DataSet ds = (DataSet)Session["data_set"];
        fgen.exp_to_excel(ds.Tables[0], "ms-excel", "xls", frm_cocd + "_" + DateTime.Now.ToString().Trim());
        //string zipFilePath = "c:\\tej_erp\\Upload\\" + frm_cocd + "_" + DateTime.Now.ToString("dd_MM_yyyy") + ".csv";
        //fgen.CreateCSVFile(ds.Tables[0], zipFilePath);
        //Session["FileName"] = frm_cocd + "_" + DateTime.Now.ToString("dd_MM_yyyy") + ".csv";
        //Session["FilePath"] = frm_cocd + "_" + DateTime.Now.ToString("dd_MM_yyyy") + ".csv";

        //Response.Write("<script>");
        //Response.Write("window.open('../fin-base/dwnlodFile.aspx','_blank')");
        //Response.Write("</script>");
    }
    protected void btnhide_Click(object sender, EventArgs e)
    {
        switch (frm_formID)
        {
            case "F70141":
            case "F70101":
            case "F70106":
            case "F70111":
            case "F70203P":
                ScriptManager.RegisterStartupScript(this, this.GetType(), "abc", "closePopup('#ContentPlaceHolder1_btnhideF');", true);
                break;
            default:
                ScriptManager.RegisterStartupScript(this, this.GetType(), "abc", "closePopup2();", true);
                break;
        }
    }
}